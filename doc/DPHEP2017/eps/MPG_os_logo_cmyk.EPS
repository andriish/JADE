%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: MNRV_4C.EPS
%%Creator: Adobe Illustrator(R) 15.1
%%For: Bernhard Schober
%%CreationDate: 18.07.13
%%BoundingBox: 0 0 146 146
%%HiResBoundingBox: 0 0 145.2920 145.2886
%%CropBox: 0 0 145.2920 145.2886
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 17134 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA884596035130C130C130C130C130C131335358484AFAFFD%64FFA88435130C120C0C0C120C0C0C130C130C130C130C12FD070C597DA8%AFFD5CFF84600C120C120C13356084A8A8FD0BFFA8AF848459350C120C12%0C1335A8AFFD56FF7D350C0C0B0C0C597DAFFD18FFA88459350C0C0C1235%84A8FD50FFA8600C120C1335A8AFFD21FF845F0C120C1359AFFD4CFF840C%120C0C3584AEFD27FF84350C0C0C3584FD48FF84350C120C84AFFD2DFF59%130C120CA8FD44FF840C0C0C3584FD13FFA8AF84A8848483A884A8A8FD13%FFA8840C0C0C1384FD40FFA8350C1213AFFD10FF848435350C130C130C12%0C130C120C130C13135F59A8A8FD0FFF84350C1213AFFD3DFF590C0C1384%FD0DFFA8843513FD050C130C3535593559356035350C13FD070C357DAFFD%0DFFA80C0C0C5FAFFD39FFA80C120C84FD0CFFA88413120C120C353584A8%FFAFFD07FFA8FD05FFA8A8596013130C120C1359AFFD0CFF84130C1384FD%36FFA8590C0C35FD0BFFA8840C0C0B0C0C5984FD04FF84A8FD07FF840CA8%FD09FFA88435130C0C0C1359AFFD0AFFA8350C0C35FD34FFA8130C1384FD%0AFFAF35130C121284A8FD07FF0C60FD07FF840CFD08FF8412FD04FFAF59%350C120C60A8FD0AFFA80C120CAFFD31FF7D0C0C35A8FD09FF84350C0C0C%59A8FFA8FD08FF3513FD07FF5913FD08FF0C35FD07FFAF350C0C1213A8FD%0AFF130C0C84FD2FFF59120C84FD0AFF35120C135FFFFFFF8412A8FD07FF%5913FD07FF6013FD07FFA81284FD07FF84FFFF840C120C35A8FD09FF5F12%0C60FD2DFF120C0CA8FD08FFA8590C0C0C84A8FD05FF0C35FD07FF840CFD%07FF1235FD07FF590CFD07FF590C84FFFFFF59130C0CA8FD09FF840C0B35%A8FD2AFF131212FD09FF84130C135FFD08FF840CFD07FFA81384FD06FF13%35FD07FF0C84FD06FF841284FD05FF0C1284FD0BFFA8350C13AFFD27FFAF%0C0C13FD09FF35120C35A8FD0AFF1335FD07FF0C84FD06FF59A8FD06FF59%12A8FD05FFA81235FD04FFAF0C1259FD0DFFA8350C13A8FD26FF0C1235FD%08FFAF0C120CA8FFAF0CAFFD08FF8412A8FD07FFAEFFFFAF84AF84A884AF%A8FD04FFAF84FD06FF130CFD05FF121235FD10FF350C13A8FD23FFAF0C0C%35FD08FF600C0C35FFFFFFAF130CFD09FF0C59FD04FF838459130C12FD09%0C120C597DA8A8FD04FF350CFD05FF0C0C13FD12FF590C12A8FD22FF0C12%35FD08FF350C1384FD06FF130CFD09FFAFAF59350C130C120C130C131235%133512350C130C130C120C13138484FFA8FD05FF351213FD14FF590C13AF%FD20FF0C0C35FD07FFA8130C1384FD07FFA8130CFD06FFAF5913FD050C5F%5984A8FD0AFFAF848459130C120C0C0C84A8FFFFFF590C0CFD16FF350C13%AFFD1EFF131213FD07FFAE130C35FD0AFFA81313FFFFFF84350C120C1335%84AFFD15FF84600C120C1313A859120CAFFD17FF350C35FD1DFF350C0CFD%07FF84130C35A8FD0BFF8484FF84FD040C3584FD05FFAF838435350C130C%0C0C120C130C595984A8FD05FF8435FD050CA8FD18FFAF130B59FD1BFF84%120CFD07FFA8130C59FF840C84FD0AFFA8350C120C84AEFFFFFFA8843513%0C120C120C130C13123512130C130C120C13125984FD05FF59130C84FD1A%FFA8130C84FD19FF84120CA8FD06FFA8120C59FFFFA8590C35A8FD06FFAF%35120C1359FFFFFFA88413FD040C13358484AEA8FD07FFA8A87D590C120C%0C0C3584FF84350C13FD1CFF84120CA8FD18FF130C84FD06FFA8130C59FD%05FFAF0C1384FD04FF840C120C60FD04FF59130C120C5984FD13FFA8A859%130C120C13A86059FD1DFF591212FD17FF590C35FD07FF130B35FD08FF35%0C35FFA8350C0C12AEFFFFA8590C0C0C3584FD1AFF840C13A8FF0C84FD1E%FF0C0C35FD15FFAE0C13AFFD06FF350C35FD0AFF84AFA8130C1384FFFFFF%59130C1359FD1DFF8435FFFFA813AFFFFFFFAFFD1BFF0C1284FD14FF0C12%84FD06FF840C13A8FD0BFF84120C13A8FFFFA80C0C0C59A8FD1BFF5984A8%13A8FFFF5F0C3535130C350C84FD19FF840C13A8FD12FF591235FD06FFA8%0C13A8FD0BFF5F120C35FFFFFF600C1235FD1CFFAF1213136059FFFFAF0C%1335A8AFFFA813A8FF84350C59FD15FF350C60FD11FF840C0CAFFD06FF0C%0C7DAF35A8FD08FF590C0C59FFFFA8130B1283FD1CFF840C84A8130CAFFF%AF0C13A8FD04FF130CAE350C0C130C84FD14FFA8120CA8FD10FF350C84FD%06FF351235FF84130C1384FD05FF59130C84FFFF84130C35AFFD1CFFAF0C%AFFFAF0C35FFFF0C60FD04FF84130C130C120C84FF350CFD15FF841213FD%0FFF840C13FD06FF84120CFD04FFA835120C3584FF590C0C84FFFF59120C%59FD1EFF0C84FFFF590C83AF0C60FFFFA8840C1384FF120C0CA8FFFF1313%FD16FF0C0C84FD0EFF131284FD06FF130CA8FD06FFAE8412AF84130C84FF%FF59120C84FD1CFF84FF5935FFFFAF3513350C13353512133584FFFF5912%35FFFFFFA81359FD16FFA80C13FD0DFF7D0C0CFD06FF590C35FD0AFFA80C%0C59FFFF590C0C84FD1BFFA80C0C7D3584FFFF590C130C595960350C84FF%FFFF340C59FD04FF350CFD18FF350C84FD0CFF350CA8FD06FF0C13A8FD0A%FF130C35FFFF84130CA8FD1BFFAE0CAE843535FFFFA80C1384FD04FF3559%FFFFFF131384FD05FFA81359FD17FF841212FD0BFF840C35FD06FF350C59%FD0AFF350C13AFFF840C0CA8FD1BFFAF0CA8FF840C60FFA80C35FD04FFA8%3513FFFFFF0C0C84FD07FF841284FD17FF120C84FD0AFF131284FD05FFA8%120CFD0AFF840C13A8FFA8130C84FD1CFF0C84FFFF591384AF0C60FD04FF%841335FFFFFF0C13AEFD09FF8313AFFD16FFA80C35FD09FF840C0CFD06FF%350C84FD0AFF0C0C59FFFF130B5FFD1CFF7D13FFFFFF130C350C35FFFF84%590C3584FFFFFF0C12A8FD0BFF5913A8FD15FFA8130CA8FD08FF600C84FD%05FFAF0C13FF600C355984A8FFFFFF351213FFFF600C35FD1AFFA835AF35%84FFFF84355F0C120C130C1359FD05FF0C13FD0EFF1313FD16FF5F1259FD%08FF0C12A8FD05FF350C59FF595F13130C120CA884120CAFFFA80C0CA8FD%19FF84130C6013FFFFFF0C350C35598484840CFD05FF0C13AFFD0FFF0C84%FD16FF0C12A8FD06FF841235FD05FFAF130CFD07FFA8AFFF350C60FFFF0C%1284FD19FF8413AFA80C5FFFFF351235AFFD04FF1284FD04FF0C13AFFD10%FF59A8FD16FF350C84FD06FF350C84FD05FF840C59FD09FF840C12A8FF59%0C12FD19FFA80C84FF840C59FF590C59FD05FF0C35FD04FF0C13A8FD0DFF%848435120CFD17FF7D0C35FD06FF0C13AFFD05FF1312A8FD09FF13125FFF%AE130CFD1AFF3559FFFF840C84841283FD04FFA80C5FFD04FF1213FD0BFF%AF5F350C130C120C13A8FD17FF0C13AFFD04FF830C35FD05FF84120CFD09%FF84120CFFFF590C59FD19FFAF0CFFFFFF59130C1259FFAFAE59130CA8FD%04FF130CA8FD09FF59130C120C0C0C3513130C84FD17FF350C84FD04FF59%0C84FD05FF600C84FD09FF350C84FFFF0C13AFFD17FF59AF5960FFFFA835%A8350C3512130C60A8FD05FF5912A8FD07FFA8350C120C130C60A8FFFF59%0C3583FD17FF841259FD04FF0C0CA8FD05FF0C0C84FD08FFAF0C0CA8FF59%0C59FD17FF3512353559FFFF59348412130C35130CA8FD05FF590C84FD06%FF840C0C0C5984FF0C0CA8FFA8350C0C0CFD18FFAF0C13FFFFFFA81213FD%05FFA81312FD09FF591235FFFF130CFD17FF3535FF3512AFFFFF0C1335AE%FFFFFFA80CFD05FF841284FD05FFA8350C1384FD04FF130C130C1313FF35%59FD19FF350CAFFFFF840C59FD05FF840C5FFFA87D5F35350C35AF130C84%FF840C35FD16FF8413FFFF3512A8FF0C0C84FD05FF0CA8FD04FF841259FD%05FF35120C0C0CFD04FF350C59598484FFFFA80CAFFD18FF590C7DFFFF35%1284FD05FF3512A8840C130C35355F84AF0C13FFFF131284FD16FF1384FF%FF600CA81313FD05FFAE0C84FD04FFAF1335FD04FFAF0C120C350C35FFFF%FF5F0C59FD07FF1359FD18FFA80C60FFFF130CAFFD05FF120CFFA8AFA8FD%05FF590C35FFA80C0CFD16FF840CFFFFFF35350C0CA8FFFFFFA8590C84FD%05FF130CFD04FF840C0C0CA8840C0C8435120C35A8FD07FF5912AEFD17FF%A80C0CFFFF0C13FD06FF0C35FD09FF350CA8FF840C60FD16FF3584FFFFA8%35841259FF8484351359FD06FF350CFD04FF840C1384FFFF840C120C1312%84FD0AFF0C84FD18FF0C13FFA80C12FD05FF840C35FD09FF0C0CA8FF350C%84FD13FF84138435A8FFFF5F59FF13130C120C84AFFD06FF5F0CFD04FF60%0C13A8FFFFFF0C125984A8FD0CFF350CFD18FF350CAF840C60FD05FF840C%84FD08FF841212FFFF130CFD13FFA813353513FFFFFF1259353535605935%35FD06FFA80CA8FFFFFF840C35FD04FF841235FD09FFA8FD05FFA813AFFD%17FF591284590C59FD05FF350C84FD08FF840B59FFAF0C13FD13FF1359FF%0C13A8FF590C1284A8FFFFFF0C84FD05FFAF0C60FFFFFF840C35FD04FF84%0C0CFD07FFA8590C350C84FD04FF0CAFFD17FF840C5F600CA8FD05FF350C%FD09FF351284FF841259FD12FF8435FFFF600CFF84135FFD05FF5935FD06%FF0C35FFFFFFAF0C35FFFFAFAE59130CFD07FF843559FFFFAF59FD04FF60%AFFD17FF8412350C12A8FD05FF0C13AFFD05FFA8A8AF130C84FF5F0C84FD%12FF0CAFFFFF5912130C59FD05FF5913A8FD05FF3512AFFFFFAF0C13FFFF%FF350C0C35FD07FF3535A8FFFFFFAFFD05FF35FD18FFAF0C35130CFD05FF%AF130CFD04FFAF35130CFF0C13A8FF351284FD11FF8435FFFFFF60351359%FD04FFA80C35FD06FF8413A8FFFFFF131235FFFF840C84FD07FFAF3584FD%04FFAF35A8FD04FF3584FD17FFA813120C0CA8FD04FFAF0C35FFAF350C0C%1359AFA8130CFFFF350CA8FD11FF5959FFFFFF13590CA8848459350C84FD%06FFA80C59FFFFFF59FD040C130C13FD07FF8435AFFFFFFF8412120CAFFD%04FF5913FD18FF0C13130CFD05FFA81235FF0C1359AFFD04FF0C13FFFF13%13AFFD0FFF138459A8FFFFA835843513130C3584FD08FF3513FFFFFF8413%0C130C130C1235FD0BFFA8130C130CAEFD05FFAF0CFD18FF130C0C13FD05%FFA80C59AFA8FD06FF84120CFFFF130CFD0FFF35130C3584FFFF5935600C%3535593513AFFD06FF840CFFFFFFA8130C1384130C5F130CA8FD09FF590C%35AFFF3559FD06FF3535FD17FF0C121313FD05FF841259FD08FFA80C35FF%FF0C13FD0EFF8413FF600C84FFAF0C1359AFFFFFFF8435FD07FF0CA8FFFF%FF590C13AFFF8412FFFF0C84FD07FFAF1335A8FFFFFF3584FD06FF8413AF%FD16FF130C0C13FD05FFA80C59FD08FF830C0CFFAF0C0CFD0EFF1384FFA8%0C35FF0C35A8FD04FFAF0CAFFD06FF0C35FFFFFF840C12A8FFFF840CA8FF%130CFD05FF83350C0C3584595F351284FD07FF0C5FFD16FF0C0C1313FD05%FF841359FD08FF840C35FFFF0C35FD0DFF8413FFFFFF0C131335FD06FF0C%84FD06FF8413FD04FF0C13A8FFFFFF3512A8FF5913FD05FFAF8484836035%350C3535AFFD07FF840CFD16FF350C0C13FD05FFA80C59FD08FF840C0CFF%FF0C0CFD0DFF3584FFFFFF350C13FD05FF840C84FD06FFA81284FFFFFF35%0C59FFFFFF590C0CFFFF600CFD17FFAF0C59FD15FF0C0C120CFD05FFA812%35FD06FFAF84AF0C13FFFF0C13FD0DFF35AEFFFFFF121384FFAFA8593535%AFFD07FF3513FFFFFF841213FFFFFF5F1212FFFFFF0C13FD18FF5913FD15%FF350C0C12A8FD04FFA80C35FD05FF840C59A80C0CFFFF130CFD0BFFA8FF%0CFFFFFF84130C350C130C137DFD07FFA8600CAFFFFFAF130C84FFFF590C%35FFFFFF840C59FD19FF0C84FD14FF0C0C130CFD05FFA81313FFFFFFA835%0C84FFFF0C13FFFF1313A8FD09FF84125935FFFFFF6059FF351312355935%35FFFFFFA83513350C59FFFFFF600C1384FFA81259FFFFFFA8130CFD1AFF%5F0CFD14FF130C0C0CA8FD05FF0C13FFFF590C0CAFFFFFA8130CFFFF350C%A8FD08FFA81383130CAFFFFF0C350C59A8FFFFFF3559FFFF591284FFA8FF%3560FFA80C130C84FF350CFFFFFFAF130C84FD1AFFA80C84FD12FFAF0C13%350CAFFD05FF130CFF351259FD05FF0C1384FF591284FD08FF5935FF8412%59FF591235FD05FFA813A8FFA812A8FF353584FF13130C13A81359FF84FD%04FF350C5FFD1CFF3535FD12FFA81213350C84FD05FF0C0CA88484FD06FF%350B84FF840B5FFD08FF0CFFFFFF0C13840C59FD05FFA81359FFFF3535FF%0CFFA813A8FF0C0C59FF0C5FFD05FF840C13FD14FF59AFFD07FFAE0CFD12%FFA80C59840C84FD05FF600CA8FD08FF591259FFA81335FD07FF5F59FFFF%FF350C1335FD05FF841359FFFFFF0CFF59AEFFFF5F84FF350CFFA81284FD%05FF841259FD14FF35A8FD08FF1384FD11FF841259830C59FD05FF590C59%FD08FF840C35FFFF0C13AFFD06FF3584FFFFFF35590CAFFFFFA8A8131384%FFFFFF8313AF59A8FFFF847DFF8313FF350CFD06FF840C84FD13FFAF35FD%04FFAF84FFFFFF1384FD11FF600C84AF0C35FD05FFA80C59FD08FFAE130C%FFFF350CAFFD06FF13AFFFFFFF5F3513596013131284FD05FF840CFF59FF%FFFF35AFFFFF0C130C1335AEFD04FF831284FD13FFA860FFFFA8350C84FF%FF8335FD12FF3513A8A80C0CFD05FFA80C0CFD07FF12AF0C0C84FF590C59%FD05FFA813A8FFFFFF0CFF84130C130C350C84FD04FF5913A860FFFFA835%AFFFA813FD050CA8FFFFFF350CFD15FF0C8459357DFFA8A83559A8FD12FF%120CFFFF1313A8FD05FF1213A8FD05FF1313FF600C84FFAF0C35FD04FF13%3535AFFFFFA835593559AEAEFFFF3559FD04FF840CFF59FFFFFF1384FFFF%AFAE84FFA8120C6084840C84FD15FF841384FFFF598484FD15FF0C35FFFF%590C84FD05FF590C84FD04FF350C84FF840C0CFFFF130CAFFFFF5935350C%59FFFF5F0C59A8FD04FFAF0CFD05FFA80CA88459FFFFAF84FD07FF84130C%0C0C35FD19FF8435AFFD16FF840C35FFFF841259FD05FF841235FFFFFF59%1284FFFFFF0C12A8FF591259FFAF13A8FF0C13FFFF0C60FD06FF1284FD06%FF0C60FF3584FD0CFFA884AFFD1AFF12FD18FF840C84FFFFAE0C13FD06FF%0C12A8FF590C7DFD04FF590C59FFFF0C0CFF8435FFFF840C843435FD06FF%0C35FD07FF590CFFA81335FD28FF35A8FD17FF0C0CA8FFFFFF130CFD06FF%350CAFA81259FD05FFA8120CFFFF590C8435A8FFFFA8130C13FD05FF840C%60FD08FF0C1235FFFF8459FD27FF5984FD16FFA81312FD04FF350C83FD05%FF590C35FF59FD07FF0C0C59FF840C0C13FD04FF35350C847D84353535AF%FD08FF0C13840C59FFFF3535A8FD25FF8412FD16FF840C59FD04FFA80C59%FD06FF0C13FD09FF840C13FFFF351213FD04FF35848459350C13358484AF%FD06FF1213A85F0C1284FFA835A8FD23FFA8591313A8FD15FF351284FD04%FFA8120CFD06FF350C84FD07FFAFA8130C84FFAE0C13AEFFFFFF0CFFA835%0CFD04591359FD05FF8359A8130B350C13FD26FF8435A8FF0CA8FD14FFA8%130CFD06FF351284FD05FF841213FD07FF0CAF84120CFFFF590CFFFFFFAF%35351384FD05FF13AFFD06FFA8130C84FFAF0C84FFFFFFAFA8FD1FFF8460%FFFF1335FD15FFA80C35FD06FF840C35FD06FF0C0C84FD05FF590CA8FF0C%0C59FFA80C84FFFF840C35FD06FF3535FD06FF59120C84FFFFFF350CAFFF%FF0CA8FD1DFFA85984FFFFFF840CFD15FF350C84FD06FFAF130CFD06FF84%0C59FD04FFAF1359FFFF840C13A8FF5935FFFF3513FD06FF8413AFFD05FF%131213FD05FF13120C590C12AFFD20FF8484FFA813AFFD13FFAF130CFD08%FF350C59FD05FFA8130CAFFFFFFF5F0CFD04FF350C35FFFF0C84840CA8FD%05FF5913A8FFFFFFAE5F0C1384FD05FFA81335590C0C0C5FFD20FF848435%1284FD14FF840C59FD08FFAF0C13FD06FF591235FFFFFF0C84FD04FFA813%0CA8FFAF0C1313FFFFFFAF841235AFFD04FF841384FD08FF0C84FF840C5F%0C84FD21FF3584FD15FF1212A8FD09FF350C84FD06FF0C0CA8FF350CA8FD%05FF590C0CAFFF840C1335350C133584FD11FF1359FFA81284A80C84FD1F%FFA812FD15FF840C12FD0AFF841213FD06FF840C35FF1359FD05FFA8FF35%1212FF5F120C35A8AFAFFD13FF0C35FFFF0C60FF840C84FD1EFF5935FD15%FF350CA8FD0BFF0C0C84FD05FFA8130CA8A8FD06FF5935FF0C0C0C120C0C%0CA8FD15FF590CFFFF350CFFFF840C84FD1DFF5F0CFD14FFA80C13FD0CFF%A80C35FD06FF84120CFD07FF1335FFAF0C130C8484130CA8FD14FF8313FF%FF8413A8FFFFAF0C59FD1CFF8413FD14FF131284FD0DFF130C84FD06FF13%0C59FD05FFAF0C59FFFF5F0C35FFFF84130C84FD13FFA80CA8FFFF0C84FF%FFFFAF0C13A8FD1AFFA80CFD13FF84120CFD0EFF841213FD07FF0C12A8FD%04FFAF0CAFFFFF351284FD04FF350C84FD13FF1359FFFF3512FD05FF0C12%84FD19FF8413A8FD12FF130CA8FD0FFF0C0C59FD06FF840C13A8FFFFFF59%12AFFFA8120CFD06FF350C84FD12FF0C35FFFF590CA8FD05FF0C0C59FD18%FF840CFD12FF840C13FD10FFAF0C13AEFD06FF350C60FFFFFF3535FFFFAF%0C59FD07FF350CAFFD11FF5F12FFFFAF0CAFFD06FF591213AFFD16FF1260%FD12FF0C12A8FD11FF5F0C35FD06FFA80C0C84FFFF0C84FFFF7D0C59FD08%FF130CFD11FF5912FFFFFF0C59FD07FF84130C5FFD14FF3512A8FD11FF35%0C59FD12FFAF130C84FD06FF84120CAFFF13A8FFFF840C84FD08FF841259%FD10FF840CFFFFFF1335FD09FF600C1384FD11FF131284FD11FF84120CFD%14FF830C0CFD07FF590C0CFFA8FFFFFF590C7DFD09FF0C12A8FD0FFF7D0C%A8FFFF590CFD0AFFAF130C0C60A8FD0BFFA8590C13A8FD11FFA8130C84FD%15FF351235FD07FF351213FD04FF840C84FD09FF130CFD10FF350CFFFFFF%5913FD0CFFA85F0C120C6084A8A8FFA8AF846013130CA8FD13FF350C5FFD%17FF0C0C59FD07FF0C0C12FFFFFF840C35FD09FF0C0CA8FD05FF84603559%3559353513120C59FFFFFF840CFD0FFF7D130C120C0C0C130C120C60A8FD%14FF840C13FD18FFAF0C1284FD07FF0C1235FFFFFF0C13FD08FFA8130CFF%FFAF35130C130C130C130C130C13125FAFFFFFFF5913FD10FF8435FFFFA8%A8A8FD18FFAF0C12A8FD19FF840C0CA8FD07FF0C0C12FFFF130CAEFD07FF%590B35FFFF591359A8A8FFFFFFAEFFFFFFA8FFFFFFAFFFFF130CFD10FF59%59FD1CFFAF0C0C7DFD1BFF600C35FD08FF131212FF841259FD06FF840C13%A8FD14FFAF0C84FD10FF13AFFD1CFF0C1259FD1DFF350C35FD08FF0C0C0C%A80C12A8FD04FF840C0C0C848484595F3535123535593560598483A884A8%84840C0C84FD0FFF8413AFFD1BFF130C0CFD1FFF130C35FD08FF35120C13%0C60FFFFFF840C120C130C120C120C120C120C130C130C130C120C120C12%0C130C35FD0FFF840CFD1BFF351213FD20FFA8120B59FD08FF350C0C120C%A8FFFF0C0C59350C0C0C590C0C83FFA80C0C84FFFFFF840C0C3559355984%130CAEFD0EFF3513FD1AFF350C0CFD22FFA8130C59FD08FF83130C130CFF%A81284FF5913A8FFFF130CFFFFFF0C13FD04FFAF130CFD05FF591284FD0E%FF3513FD19FF35120CFD24FFA8130C35FD08FF84130C0C13FF0C59A8130C%FFFFFF0C35FFFFA80C0CFD05FF0C0C84FD04FF840C84FD0EFF1213FD18FF%350C0CAFFD25FFA8130C35FD09FF590C1235A80C120C35FFFFA81335FFFF%A80C35FD05FF840C13AFFFFFFF1212A8FD0EFF350CFD17FF13120CFD28FF%A8130C13A8FD08FF840C0CA8FF590C0CFFFFAE0C35FFFF7D0C35FD06FF35%0C137DA8350C0CFD0FFF350CA8FD14FFAF0C0C0CFD2BFF350C13A8FD09FF%83FFFFFF351284FFAF1313FFFFAF0C35FD07FF840C130C1235FD10FF840C%84FD13FFAE0C1235FD2DFF590C1259FD0CFFAF0C13A8FF0C13FFFFA8130C%AFFD07FFA80C5FA8FD11FF841235FD12FF840C0C35FD2FFF840C1235FD0D%FF13130C120CAFFFFF121259FD07FF8412A8FD13FF0C13AEFD0FFFAF350C%1384FD31FFA80C0C0C84FD0CFF84350C0C0CFFFF840C13A8FD05FFA8130C%FD0DFFA8FD06FF840B5FFD0EFF7D130C1384FD34FF35120C59AFFD0DFF84%130C8435130C35A8FFAFFF83130C1384845960595F3559353512130C1313%35358484FFA8130CAFFD0CFF35130C5FFD37FF84130C1359FD0DFFA8600C%35355913130C120C1312353559FD04350C3512130C3513130C130C0C0C12%FD040C59FD0AFF840C0C0CA8FD3AFF600C1213A8FD13FFAF84FD15FFAFAF%8484845912A8FD08FF84130C1359FD3DFFA80C0C0C1384FD36FF840C0C0C%3584FD40FF84130C1313A8FD32FF84350C1213A8FD44FF840C0C0C1359FD%2DFFA8840C0C0C1383FD48FF84350C120C3584FD28FF8435130C1213A8FD%4CFFAE35120C0C0C357DFD21FFA88435120C0C0C59A8FD51FFA835130C12%0C3559A8A8FD19FF848413130C120C3584FD56FFA88435130C0C0C120C35%598484A8A8FD09FFAFAF84A8595912130C0C0C120C5983FD5DFFAF845912%130C120C120C130C1313130C3513130C130C120C120C120C355984A8FD64%FFA8A8836035350C12FD090C131259598484FD34FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2013-07-18T17:48:42+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2013-07-18T17:48:42+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-07-18T17:48:42+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUu1nzFoWiQevq1/BZRn7PrOFZqfyL9pj8hkoxJ5NWXPDGLkQHnWuf85E+UbMsmlW1xqkg+&#xA;y9Pq8J/2Tgyf8k8ujp5Hm6rN25ij9IMvsH6/sSJfzN/ObzD/AMcDy99Vt5P7q49B2H/I6crCf+By&#xA;XhQjzLjfn9Xl+iFD3fpOy4eTf+cgdY+K/wBd/R1ftL9Z9E9fCyUrjx4x0T+V12T6pcPxr/ctj8gP&#xA;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&#xA;AExyLa7FXYq7FXYq7FXYq7FXYq7FX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:DocumentID>xmp.did:F77F1174072068118083F923C347D389</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F1174072068118083F923C347D389</xmpMM:InstanceID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118083F923C347D389</stEvt:instanceID>
                  <stEvt:when>2013-07-18T17:48:42+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:8D85C08365A8DF11B1E8BE109BBB79A9</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:8E85C08365A8DF11B1E8BE109BBB79A9</stRef:instanceID>
            <stRef:documentID>uuid:8D85C08365A8DF11B1E8BE109BBB79A9</stRef:documentID>
            <stRef:originalDocumentID>uuid:8D85C08365A8DF11B1E8BE109BBB79A9</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>54.999916</stDim:w>
            <stDim:h>54.999916</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standard-Farbfeldgruppe</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 328</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>47.000000</xmpG:yellow>
                           <xmpG:black>30.000002</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -145.289 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 145.289 li
145.292 145.289 li
145.292 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 72.6431 mo
0 112.701 32.5879 145.289 72.647 145.289 cv
112.704 145.289 145.292 112.701 145.292 72.6431 cv
145.292 32.5889 112.704 0 72.647 0 cv
32.5879 0 0 32.5889 0 72.6431 cv
cp
2.03369 72.6431 mo
2.03369 33.707 33.708 2.02979 72.647 2.02979 cv
111.582 2.02979 143.259 33.707 143.259 72.6431 cv
143.259 111.582 111.582 143.259 72.647 143.259 cv
33.708 143.259 2.03369 111.582 2.03369 72.6431 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 0 .47 .3 cmyk
f
92.7988 116.334 mo
91.0332 122.45 90.1943 125.603 92.9473 131.905 cv
92.9746 132.144 93.2383 132.924 92.9473 133.028 cv
89.9033 132.417 89.0928 132.155 86.2354 131.943 cv
83.5938 131.487 79.2061 132.222 76.2695 132.196 cv
73.9756 132.274 71.6504 132.352 69.2471 132.647 cv
68.5273 132.274 69.0864 131.472 69.1431 130.939 cv
69.4072 130.11 69.4336 129.685 69.5156 128.722 cv
69.8892 128.323 70.3447 128.536 70.7959 128.348 cv
72.3438 128.111 73.6543 126.749 74.0273 125.304 cv
74.5088 123.786 73.9756 122.104 73.2803 120.66 cv
73.1455 120.234 72.5601 119.914 72.7993 119.489 cv
74.6953 115.935 73.3584 112.331 72.7207 108.862 cv
72.0532 106.402 71.0386 103.681 70.6353 101.089 cv
70.7168 100.825 70.3706 100.208 70.9561 100.156 cv
71.1729 100.208 li
73.1982 102.667 79.0078 107.867 81.1836 109.555 cv
83.3594 111.245 88.9785 114.522 92.6338 115.402 cv
92.9814 115.693 92.9287 115.935 92.7988 116.334 cv
cp
65.7661 122.638 mo
65.7661 122.316 65.7847 122.185 66.0278 122.081 cv
67.3477 122.081 li
68.5195 122.122 70.0273 122.506 71.124 121.372 cv
71.7549 121.395 71.8105 122.144 71.978 122.722 cv
72.1274 123.533 72.0908 124.046 72.0908 124.774 cv
71.8286 125.35 71.5352 126.226 70.938 126.592 cv
69.9902 127.041 69.0381 126.954 68.1279 126.592 cv
66.751 125.778 65.7476 124.476 65.7661 122.638 cv
cp
68.0127 129.375 mo
67.8442 130.968 65.8442 132.372 64.8667 132.655 cv
63.8857 132.935 60.957 132.797 60.1133 132.505 cv
59.2734 132.215 57.2178 128.2 57.457 126.114 cv
57.457 124.394 57.9199 121.663 58.6099 121.443 cv
59.3003 121.226 61.1279 121.338 61.1279 121.338 cv
61.8926 121.287 62.4712 121.468 63.1431 121.547 cv
63.6206 121.73 63.2847 122.331 63.4526 122.67 cv
63.6689 123.559 63.7178 124.522 64.2695 125.41 cv
65.0386 126.898 66.4521 127.786 67.8442 128.308 cv
68.1582 128.595 67.9863 128.983 68.0127 129.375 cv
cp
56.6133 132.133 mo
56.0684 132.693 55.7627 132.431 55.2104 132.483 cv
53.6396 132.057 52.7109 131.375 52.2666 129.596 cv
51.6914 127.114 51.7109 124.386 52.2666 121.854 cv
52.52 121.656 li
53.625 121.529 55.2969 121.305 55.7515 121.555 cv
56.2036 121.805 55.2627 126.267 55.2627 126.267 cv
55.2334 127.152 55.666 129.417 56.0684 130.592 cv
56.1543 130.767 57.0576 131.674 56.6133 132.133 cv
cp
75.2021 79.1987 mo
75.1465 80.7212 li
75.0088 82.1089 74.3662 83.7095 73.0605 84.4849 cv
72.2808 84.2993 72.5601 83.3618 72.3662 82.7241 cv
72.8667 81.3364 73.8398 80.188 74.6465 78.9595 cv
74.7549 78.8774 74.8672 78.8257 74.9785 78.8774 cv
75.2021 79.1987 li
cp
86.5293 66.9116 mo
85.7207 67.2847 84.8877 67.3662 83.9932 66.9526 cv
83.7656 66.6436 83.0254 66.3926 83.3174 65.9375 cv
83.9668 64.8857 85.0674 64.0161 85.7422 62.9824 cv
86.0566 62.8149 li
87.4258 61.1621 89.582 59.7778 91.627 58.5352 cv
92.8623 57.9976 li
93.1299 57.729 93.7617 57.1694 94.0068 57.748 cv
94.0518 59.9009 93.1416 62.2031 91.0889 63.7256 cv
89.8428 64.6465 89.3105 64.4678 88.1982 64.5352 cv
87.627 65.5684 li
87.4922 66.0835 87.0449 66.6021 86.5293 66.9116 cv
cp
82.0898 87.2241 mo
81.7168 87.4399 78.4902 86.2095 78.8662 86.5522 cv
78.1016 85.7251 79.3516 85.4438 76.5039 84.3774 cv
75.8135 84.4478 li
75.7246 84.5298 75.4746 84.6567 75.2168 84.3022 cv
75.1904 83.8735 75.7549 83.937 75.9336 83.4028 cv
76.9521 81.1089 76.3916 79.3325 76.292 76.9556 cv
77.0459 75.0083 li
78.4746 73.2847 78.4707 73.0386 79.4414 72.1021 cv
80.4102 70.7397 80.6123 70.6353 81.9102 69.5161 cv
82.124 69.3335 82.5156 69.1875 82.7695 69.4033 cv
83.3818 69.8818 83.4141 70.1948 83.5938 70.8071 cv
83.9004 73.0791 82.5254 74.6353 80.8701 75.8618 cv
79.6943 76.8765 78.5752 78.4526 78.8291 80.0005 cv
78.9297 80.106 li
79.4668 79.6528 80.1416 79.3892 80.3691 78.8286 cv
81.2656 76.8286 83.6748 75.9185 85.0264 74.1841 cv
85.6123 73.1436 85.2539 71.3364 85.0264 70.1353 cv
85.0186 70.1689 86.7949 69.2959 86.3135 69.6089 cv
87.1563 69.9565 87.0518 70.561 87.459 71.3325 cv
88.25 73.3374 88.1836 75.146 86.959 76.8804 cv
83.5938 81.0786 li
83.542 83.2173 84.1299 85.9702 82.0898 87.2241 cv
cp
96.3428 55.2778 mo
96.5752 54.9829 li
97.6191 54.4868 98.5928 54.103 99.7529 53.7671 cv
101.146 53.4048 li
101.514 53.0688 102.163 52.7969 102.537 53.2705 cv
102.56 55.0723 101.213 57.2363 99.2207 58.0684 cv
98.5928 58.3403 97.7578 58.4307 97.0146 58.6128 cv
96.8281 58.4531 96.2236 58.793 96.041 58.3403 cv
96.1563 57.438 96.5049 56.0874 96.3428 55.2778 cv
cp
109.76 51.9082 mo
109.688 53.2031 107.962 54.2734 106.518 54.6729 cv
105.902 54.77 105.336 54.7334 104.791 54.7334 cv
104.649 54.6328 104.484 54.5122 104.506 54.374 cv
104.601 53.7588 104.697 53.4004 104.742 52.8452 cv
105.1 52.5835 li
106.375 52.3267 107.936 52.0503 109.216 51.7109 cv
109.405 51.7515 109.642 51.7329 109.76 51.9082 cv
cp
68.5801 77.7954 mo
72.3184 71.0942 76.8584 65.2734 81.7168 59.293 cv
88.5254 51.5542 li
93.3838 46.3721 98.75 41.0586 104.704 36.9507 cv
105.45 36.521 105.779 35.645 106.551 36.2603 cv
107.253 36.9058 li
107.723 37.4395 107.313 38.9541 106.832 39.3794 cv
106.447 39.6924 106.074 40.0024 105.704 40.3081 cv
106.866 41.4575 108.539 43.644 109.917 45.0586 cv
110.521 45.6816 110.335 46.3267 111.417 46.8306 cv
111.959 47.0845 112.111 47.6738 111.79 48.1807 cv
110.831 49.4087 109.229 49.2222 107.974 49.543 cv
103.303 50.5835 99.5254 51.9194 94.3584 54.4268 cv
90.2207 56.6172 86.9102 59.0459 83.918 62.8105 cv
82.7725 64.2251 81.4893 65.2954 80.5303 67.0015 cv
77.8066 70.501 75.6426 73.7847 73.4785 77.3892 cv
72.7061 78.5229 72.4531 79.0854 71.3701 80.1128 cv
70.8447 80.6128 70.3745 79.5679 70.0459 79.2056 cv
70.0083 79.1646 69.9858 79.1196 69.96 79.0796 cv
69.8477 79.0933 69.7329 79.0718 69.6206 78.9976 cv
69.3296 78.6235 68.4194 78.4634 68.5801 77.7954 cv
cp
111.902 52.793 mo
111.752 52.9492 111.566 53.1431 111.316 53.0767 cv
110.749 52.6807 110.965 52.1768 110.999 51.6992 cv
111.115 51.5845 111.134 51.5171 111.316 51.5171 cv
111.585 51.4717 111.734 51.6699 111.835 51.8115 cv
112.003 52.1211 112.021 52.4722 111.902 52.793 cv
cp
49.1631 129.588 mo
48.0688 129.614 47.3003 129.018 46.7935 127.726 cv
46.2817 126.084 46.1104 124.633 46.4644 122.943 cv
46.5762 122.73 46.8188 122.592 46.9756 122.663 cv
48.5024 122.144 li
49.0137 121.935 49.4307 121.864 49.9194 121.981 cv
50.2295 122.286 li
50.207 123.177 49.9863 123.834 49.9648 124.66 cv
49.875 126.726 49.6997 127.342 50.2964 129.311 cv
50.0767 129.831 49.6357 129.581 49.1631 129.588 cv
cp
44.6069 123.819 mo
44.3682 124.248 44.4014 124.536 44.293 125.051 cv
44.1626 125.286 43.4946 124.969 43.2822 124.838 cv
42.4536 124.39 42.5093 124.619 42.271 123.85 cv
42.1367 123.334 42.1514 122.73 43.0059 122.282 cv
43.5391 121.981 44.6069 121.619 44.9536 122.282 cv
45.062 122.73 44.5283 123.308 44.6069 123.819 cv
cp
120.932 79.7993 mo
119.01 75.3667 116.85 71.5498 115.271 67.0903 cv
114.152 65.4897 114.794 63.7813 114.659 62.0723 cv
113.939 59.4009 112.816 57.3447 111.749 54.7559 cv
111.454 54.0098 112.283 53.7925 112.577 53.2627 cv
113.059 51.9526 112.712 50.4829 112.122 49.229 cv
111.884 48.5093 112.738 48.002 112.577 47.2554 cv
112.547 46.1069 111.537 45.3306 110.734 44.7183 cv
109.532 42.9834 108.973 42.0728 107.477 40.499 cv
107.477 40.2041 li
108.223 39.5396 108.84 38.3906 108.813 37.4019 cv
108.518 36.2827 108.279 35.2417 107.208 34.4648 cv
105.503 33.5029 103.768 34.999 102.407 35.7744 cv
102.029 36.0391 101.843 36.3081 101.309 36.2563 cv
100.964 36.1328 100.605 36.0044 100.242 35.874 cv
99.8936 36.272 99.4619 36.6934 98.9297 37.1128 cv
100.589 37.7856 li
100.648 37.8311 100.671 37.8643 100.671 37.9199 cv
100.671 37.9497 100.66 38.0024 100.652 38.0474 cv
100.537 38.1475 96.8125 41.4126 96.8125 41.4126 cv
96.8018 41.4199 90.1016 48.0425 90.1016 48.0425 cv
90.1016 48.0464 88.1797 49.9946 88.1797 49.9946 cv
88.168 50.0059 82.2129 56.8667 82.2129 56.8667 cv
79.0977 60.48 74.4961 66.4082 71.7285 70.7466 cv
70.2886 72.7324 68.8511 74.938 67.5117 77.0229 cv
67.3672 77.2544 67.0942 77.2368 66.6616 77.1841 cv
66.3667 77.1499 66.0645 77.1196 65.7925 77.2134 cv
65.7993 77.2134 65.8032 77.2134 65.8032 77.2134 cv
65.7437 77.229 li
65.7588 77.2251 65.7769 77.2202 65.7925 77.2134 cv
64.2773 77.3804 63.1763 77.8853 61.9976 78.9517 cv
60.4678 80.7544 59.6992 82.938 59.6992 85.2915 cv
59.6992 86.9106 60.0684 88.6157 60.811 90.3286 cv
60.498 91.2466 59.7773 92.0562 59.1323 92.772 cv
58.7739 93.1763 li
58.3154 93.6265 li
58.0166 93.9106 57.6768 94.231 57.4302 94.5454 cv
57.4077 94.5747 li
57.3931 94.6118 li
57.3628 94.7124 57.3486 94.9028 57.6436 95.0454 cv
57.7139 95.0825 li
57.7925 95.063 li
59.2036 94.7271 60.0913 93.6685 60.9526 92.6411 cv
60.9526 92.6411 61.4941 92.0181 61.5723 91.9253 cv
61.6987 91.9028 61.8037 91.9731 61.9907 92.1313 cv
62.0874 92.2134 62.1987 92.2915 62.3262 92.3511 cv
62.3262 92.3804 62.3262 92.4224 62.3262 92.4224 cv
62.3262 92.4224 62.3071 92.8774 62.3037 92.9819 cv
58.9639 96.2798 56.2446 98.1411 52.6885 100.231 cv
52.0947 100.579 li
52.7813 100.649 li
54.1694 100.788 55.4863 100.006 56.7588 99.2534 cv
58.2886 98.4097 li
59.7026 97.686 61.0127 96.5815 62.2842 95.5142 cv
62.2842 95.5142 63.4346 94.5601 63.5576 94.4595 cv
63.6763 94.4771 63.8105 94.6304 63.9155 94.7544 cv
63.9155 94.7544 63.9907 94.8354 64.0386 94.8882 cv
64.061 94.9282 65.106 96.9966 65.1694 97.1187 cv
64.9302 98.1011 64.8257 99.0815 64.8257 100.063 cv
64.8257 102.202 65.2886 104.328 65.7437 106.41 cv
66.1909 108.462 66.6538 110.582 66.6538 112.664 cv
66.6538 112.801 66.6509 112.935 66.647 113.074 cv
66.647 113.715 65.9414 114.571 65.3555 114.838 cv
64.02 115.066 62.4082 115.081 60.6987 115.097 cv
58.6064 115.115 56.4385 115.133 54.7744 115.584 cv
54.2368 115.648 53.6172 115.823 53.0166 115.992 cv
52.4272 116.156 51.8193 116.327 51.252 116.406 cv
51.1963 116.414 li
51.1318 116.462 li
50.9272 116.604 li
50.7373 116.723 50.5024 116.868 50.4453 117.148 cv
50.4424 117.17 50.439 117.197 50.439 117.223 cv
50.439 117.383 50.5127 117.558 50.6323 117.682 cv
50.748 117.801 50.8936 117.856 51.0425 117.842 cv
51.5469 117.842 52.1099 117.637 52.6587 117.439 cv
53.0391 117.301 53.438 117.156 53.8037 117.093 cv
57.2813 116.499 61.0947 116.619 63.6763 116.827 cv
64.9521 116.805 67.0454 116.764 67.7993 114.954 cv
68.0718 114.219 68.165 113.536 68.165 112.88 cv
68.165 112.156 68.0537 111.458 67.9375 110.742 cv
67.71 108.981 li
67.5571 107.907 67.3296 106.834 67.1089 105.797 cv
66.7183 103.955 66.3145 102.06 66.3145 100.141 cv
66.3145 99.7524 66.3369 99.3618 66.3701 98.9702 cv
66.4077 98.9204 66.4482 98.8618 66.4976 98.855 cv
66.6099 98.8394 66.8076 98.9956 66.9639 99.1196 cv
67.1426 99.2603 67.3257 99.395 67.5273 99.4478 cv
67.7588 99.6226 68.02 99.6724 68.2583 99.7017 cv
68.5903 99.7466 68.7695 99.7876 68.8745 100.044 cv
69.0234 101.731 69.6055 103.473 70.1689 105.16 cv
70.5566 106.321 70.96 107.522 71.2173 108.694 cv
71.6763 110.745 72.1387 112.828 72.1387 114.879 cv
72.1387 116.1 71.9746 117.312 71.5454 118.501 cv
70.6533 120.126 68.7021 120.133 66.8179 120.141 cv
66.2554 120.141 li
61.6357 119.86 li
57.6729 119.573 53.5762 119.279 49.375 119.958 cv
49.4043 119.954 48.4351 120.059 48.4351 120.059 cv
47.9165 120.137 47.4268 120.201 46.9019 120.077 cv
46.707 119.92 46.5498 119.648 46.5498 119.365 cv
46.5498 119.275 46.5654 119.181 46.6025 119.092 cv
47.353 117.435 47.73 115.939 47.73 114.615 cv
47.73 113.541 47.4829 112.581 46.9907 111.739 cv
45.9048 109.656 44.7109 108.211 43.2373 107.205 cv
41.4336 105.399 39.8911 103.799 38.521 102.241 cv
37.7197 102.14 37.2261 101.981 37.1733 101.964 cv
36.9946 101.904 li
36.1929 102.891 li
37.2339 103.88 38.1963 104.869 39.3711 105.936 cv
41.1597 106.898 42.6025 108.634 43.8833 109.809 cv
45.4312 111.623 45.8037 113.544 45.4834 115.682 cv
45.2705 118.215 42.9497 119.313 41.3716 120.995 cv
40.7339 122.197 40.3306 123.637 41.2109 124.76 cv
41.7749 126.251 44.1738 125.983 44.4688 127.215 cv
45.1294 129.927 49.834 131.495 50.752 131.558 cv
51.6655 131.622 52.6133 132.632 52.6133 132.632 cv
54.4824 133.994 56.9385 133.667 58.229 133.468 cv
59.5161 133.274 61.8223 134.315 63.2661 134.102 cv
65.4268 133.248 67.1914 133.648 69.4336 133.461 cv
76.4824 133.569 84.4893 133.409 91.6982 134.315 cv
93.0332 134.155 94.6338 135.197 95.8916 134.558 cv
96.2129 134.021 95.9707 133.569 95.8916 133.114 cv
92.4473 127.697 91.9326 121.615 93.8838 115.711 cv
95.1855 115.788 li
99.8613 116.295 104.113 115.69 108.862 112.94 cv
111.24 111.63 112.488 108.569 112.38 106.354 cv
112.302 104.914 111.802 103.212 112.044 101.689 cv
112.128 101.01 112.577 99.979 113.161 99.6528 cv
113.413 99.5142 114.288 98.9204 114.563 98.1606 cv
115.014 96.9253 114.046 96.3423 113.767 96.1743 cv
114.521 95.8677 115.252 94.3247 114.557 93.1226 cv
114.109 92.647 113.592 90.772 113.536 90.1567 cv
113.376 89.2759 113.35 88.3696 114.179 87.8062 cv
116.048 86.8208 117.809 86.5786 119.757 85.7251 cv
121.092 85.1646 121.785 83.7769 121.733 82.522 cv
120.932 79.7993 li
cp
120.375 84.4595 mo
118.398 86.2993 115.596 86.3286 113.327 87.8218 cv
112.286 88.8618 112.55 90.0444 112.976 91.355 cv
113.813 93.0151 113.496 92.8433 112.324 93.2349 cv
109.586 94.147 109.616 97.1421 106.322 96.6392 cv
106.136 96.6958 105.365 96.3101 105.82 96.8628 cv
106.175 97.2847 106.322 97.0298 107.021 97.1138 cv
108.193 97.1694 108.63 96.686 109.454 96.1265 cv
110.63 95.1382 110.489 94.7661 111.934 94.0718 cv
112.28 93.9897 113.133 93.7368 113.608 93.9048 cv
113.93 94.1997 113.938 94.2075 113.99 94.4722 cv
113.804 95.2739 112.631 95.9419 112.185 96.2212 cv
112.8 96.6724 113.953 97.4341 113.767 98.0728 cv
113.502 98.4927 113.516 98.562 113.05 98.7886 cv
112.398 99.105 111.096 99.0571 109.867 98.147 cv
109.681 98.2036 109.477 97.7837 108.95 98.2837 cv
110.146 99.5142 111.821 99.2349 112.073 99.4868 cv
112.324 99.7368 111.179 101.223 111.127 101.544 cv
110.324 103.678 111.309 105.644 110.88 107.862 cv
110.615 109.596 110.096 110.42 108.578 111.514 cv
105.792 113.443 103.839 114.001 100.713 114.504 cv
92.5156 115.064 87.3428 112.251 81.4414 107.843 cv
75.5381 103.434 73.2803 101.089 71.437 98.6079 cv
71.4106 97.5933 72.1567 96.8218 71.519 95.7231 cv
70.9858 95.9097 71.0386 96.604 70.7168 97.0073 cv
70.2622 97.6489 69.1689 98.1265 68.3921 98.0483 cv
65.9639 97.2192 65.8291 94.3647 64.311 92.7349 cv
61.0537 89.5308 60.1431 84.9116 61.8818 81.0425 cv
62.4937 79.8394 63.5874 78.6909 64.8184 78.2661 cv
66.3369 78.0229 68.1279 78.0229 69.1167 79.4937 cv
70.2886 80.6128 71.0127 82.4292 71.3037 84.0298 cv
71.7847 84.8062 71.1987 85.687 71.9976 86.3286 cv
73.3848 86.4595 74.5859 86.8062 75.9219 85.9556 cv
76.9121 86.0854 77.0459 87.1831 77.792 87.6606 cv
79.127 88.4634 li
80.542 89.0483 82.3584 89.0483 83.5605 88.0073 cv
85.8027 85.7134 85.3125 83.3511 86.0859 80.8179 cv
88.2246 78.9224 89.6455 76.2095 89.6191 73.564 cv
89.4844 71.937 88.8994 70.2544 87.9375 68.6279 cv
88.0977 67.665 88.6299 66.9453 88.9512 66.0898 cv
89.2197 65.9302 89.5674 65.9302 89.8584 65.8779 cv
92.2354 65.3701 94.3994 63.2065 95.332 60.9375 cv
95.5449 60.7251 li
98.2686 60.5391 101.659 59.5757 103.234 56.7183 cv
103.555 55.4902 104.943 56.397 105.798 56.106 cv
107.237 56.0239 108.682 55.2256 109.775 54.2891 cv
110.096 54.1807 110.335 54.5317 110.525 54.6885 cv
111.163 56.8267 112.34 58.8818 113.006 61.0459 cv
113.834 62.6733 114.13 64.2212 113.834 65.8779 cv
114.182 68.4116 115.623 70.7876 116.638 73.3516 cv
117.652 76.0493 119.227 78.7729 120.375 81.5493 cv
120.588 82.6685 121.068 83.5522 120.375 84.4595 cv
cp
f
108.227 63.1802 mo
108.601 63.6611 108.842 64.0864 108.547 64.5425 cv
107.854 64.5947 107.746 63.7139 107.159 63.4189 cv
106.197 62.9414 105.343 63.4487 104.384 63.688 cv
101.954 64.729 99.9248 66.811 97.5752 67.9038 cv
97.2832 67.9038 97.0146 67.8774 96.8281 67.665 cv
97.2275 67.2661 97.8691 67.1836 98.376 66.8633 cv
100.806 65.2622 103.156 62.7549 106.197 62.2998 cv
106.999 62.248 107.721 62.5386 108.227 63.1802 cv
cp
f
105.896 72.0347 mo
105.518 72.5908 104.921 72.1055 104.396 72.1724 cv
103.194 72.0347 101.163 72.3145 99.8398 72.1504 cv
99.6377 72.0347 99.4893 71.8257 99.6123 71.6387 cv
99.8135 71.3105 100.366 71.2886 100.717 71.0308 cv
102.167 70.125 103.692 69.2622 105.346 68.8672 cv
105.646 68.8218 105.896 69.0757 105.946 69.2852 cv
106.145 70.0532 106.021 71.2886 105.896 72.0347 cv
cp
108.04 67.292 mo
107.854 66.7031 107.88 65.7437 107.159 65.6094 cv
106.999 65.9829 107.159 66.3853 106.999 66.7324 cv
106.787 66.9976 106.413 67.3179 105.983 67.21 cv
103.048 67.397 100.858 69.9902 98.3506 71.3218 cv
97.4961 71.8027 96.5332 72.0713 95.627 72.311 cv
95.5449 72.4453 95.5752 72.6318 95.7041 72.7104 cv
98.4844 73.0049 101.23 73.2729 103.984 73.564 cv
107.051 73.2173 li
107.134 72.8174 106.652 72.4712 106.73 72.0156 cv
107.082 70.7627 107.186 69.3999 106.839 68.2246 cv
107.082 67.5869 107.988 68.0649 108.04 67.292 cv
cp
f
109.592 81.0552 mo
109.691 80.9165 109.803 80.7573 109.934 80.7437 cv
110.108 80.8091 110.2 80.8911 110.225 81.2124 cv
110.202 81.728 110.071 82.269 109.932 82.8433 cv
109.773 83.4966 109.612 84.1636 109.612 84.8188 cv
109.612 85.1089 109.645 85.396 109.721 85.6782 cv
110.108 86.1597 110.704 86.269 111.418 86.0229 cv
111.432 86.0171 112.635 85.3276 112.635 85.3276 cv
113.681 84.7017 114.668 84.1118 116.5 83.645 cv
116.545 83.6333 116.555 83.6479 116.563 83.6558 cv
116.59 83.689 116.604 83.7573 116.604 83.8433 cv
116.604 84.0005 116.558 84.2144 116.482 84.3892 cv
116.412 84.4204 114.719 85.1753 114.719 85.1753 cv
113.387 85.7583 112.009 86.3608 110.717 87.1011 cv
110.335 87.1782 109.982 86.9731 109.642 86.7729 cv
109.558 86.7231 li
109.067 86.0522 108.908 85.4009 108.908 84.7485 cv
108.908 84.1646 109.035 83.5806 109.167 82.981 cv
109.288 82.4224 109.413 81.8442 109.441 81.2388 cv
109.483 81.187 109.592 81.0552 109.592 81.0552 cv
cp
f
67.9941 80.5083 mo
68.9561 82.4819 67.9409 84.3511 67.9941 86.4067 cv
68.1543 86.9927 69.3037 87.0757 68.9561 87.769 cv
68.687 87.9556 68.3145 88.0073 68.02 87.7954 cv
67.4863 87.4478 67.2998 87.1831 67.1655 86.5679 cv
67.0313 84.7544 68.4751 82.6421 67.1914 80.9341 cv
66.8179 80.5601 66.2852 80.188 65.7515 80.1616 cv
64.6021 80.3735 64.0161 81.6011 63.6172 82.5083 cv
63.002 84.9116 62.8413 87.4478 64.9487 89.3696 cv
66.1802 90.0894 67.6724 90.8657 67.7544 92.4146 cv
67.9409 92.6821 68.3145 92.9478 68.6094 92.7876 cv
68.9819 92.7612 69.0347 91.6938 69.5688 92.2017 cv
69.7285 92.5747 li
69.5942 93.0005 69.4639 93.7505 68.7695 93.7759 cv
68.4224 93.855 68.0459 93.6685 67.7544 93.4556 cv
67.0049 92.6821 67.5947 91.5083 66.3369 91.0005 cv
64.2554 90.3579 62.8936 88.1685 62.6802 86.1118 cv
62.5464 84.1382 62.6279 81.9751 64.3369 80.2397 cv
65.0049 79.731 65.8862 79.4106 66.7402 79.6802 cv
67.2212 79.7583 67.7808 80.106 67.9941 80.5083 cv
cp
f
42.2695 95.7632 mo
45.0459 94.4761 48.2178 94.6255 49.4116 94.7407 cv
49.0713 95.8423 47.9194 98.6997 44.7617 100.249 cv
41.5942 101.8 38.8818 101.431 37.8896 101.214 cv
38.2554 100.118 39.4819 97.0581 42.2695 95.7632 cv
cp
41.8926 94.9468 mo
38.0913 96.7114 36.9307 101.238 36.8818 101.431 cv
36.7813 101.831 li
37.1733 101.964 li
37.3223 102.013 40.8525 103.17 45.1572 101.054 cv
49.501 98.9243 50.3926 94.6255 50.4302 94.4429 cv
50.519 93.9868 li
50.0605 93.9136 li
49.8809 93.8833 45.624 93.2144 41.8926 94.9468 cv
cp
ef
46.0518 87.2329 mo
48.8164 85.9829 51.8345 86.1431 52.9922 86.2661 cv
52.6367 87.3403 51.458 90.0786 48.3057 91.5864 cv
45.1641 93.0874 42.4697 92.8032 41.4395 92.6099 cv
41.877 91.4897 43.2686 88.4897 46.0518 87.2329 cv
cp
45.6821 86.4126 mo
41.873 88.1323 40.4663 92.6177 40.4106 92.8071 cv
40.2798 93.2358 li
40.7051 93.3667 li
40.854 93.4155 44.3726 94.4644 48.6934 92.397 cv
53.0547 90.3101 53.9805 86.1587 54.0176 85.9829 cv
54.1108 85.5269 li
53.6563 85.4458 li
53.4844 85.4165 49.4287 84.7222 45.6821 86.4126 cv
cp
ef
50.9912 79.0181 mo
53.7446 77.8062 56.6104 77.9771 57.7334 78.1079 cv
57.3604 79.1567 56.1553 81.772 53.0063 83.2388 cv
49.8975 84.6821 47.2266 84.4849 46.1519 84.3169 cv
46.6675 83.1782 48.2119 80.2388 50.9912 79.0181 cv
cp
50.6289 78.1938 mo
46.8159 79.8687 45.1631 84.3101 45.0957 84.4995 cv
44.9282 84.9546 li
45.395 85.0854 li
45.5435 85.1265 49.0547 86.0708 53.3828 84.0522 cv
57.7637 82.0142 58.7222 78.0073 58.7632 77.8354 cv
58.8638 77.3843 li
58.4092 77.2954 li
58.2485 77.2612 54.394 76.5376 50.6289 78.1938 cv
cp
ef
55.897 70.9043 mo
58.6436 69.7319 61.356 69.9116 62.438 70.0459 cv
62.0498 71.0684 60.8184 73.5679 57.6729 74.9937 cv
54.5986 76.3853 51.9458 76.2661 50.834 76.1226 cv
51.4277 74.9644 53.1284 72.0874 55.897 70.9043 cv
cp
55.5425 70.0757 mo
51.7256 71.7095 49.8301 76.1089 49.752 76.2915 cv
49.5469 76.7759 li
50.0576 76.9038 li
50.2031 76.9419 53.7031 77.7808 58.0459 75.811 cv
62.4419 73.8179 63.4346 69.9565 63.4756 69.7925 cv
63.5874 69.3408 li
63.1318 69.2432 li
62.979 69.21 59.3301 68.4595 55.5425 70.0757 cv
cp
ef
62.6875 62.7847 mo
65.4189 61.6509 67.9863 61.8374 69.0308 61.9829 cv
68.624 62.9751 67.3672 65.3555 64.2285 66.7393 cv
61.1655 68.0903 58.5425 68.0347 57.4043 67.9224 cv
58.0879 66.7441 59.9307 63.9302 62.6875 62.7847 cv
cp
62.3447 61.9531 mo
58.5161 63.542 56.3828 67.9004 56.2925 68.0835 cv
56.043 68.5981 li
56.5986 68.7173 li
56.7471 68.751 60.2363 69.4824 64.5908 67.564 cv
69.0049 65.6172 70.0303 61.9004 70.0713 61.7441 cv
70.1919 61.2954 li
69.7397 61.188 li
69.5986 61.1543 66.147 60.375 62.3447 61.9531 cv
cp
ef
70.1763 54.9492 mo
72.8892 53.856 75.3096 54.0474 76.3174 54.1997 cv
75.8926 55.1655 74.6094 57.4341 71.4746 58.7734 cv
68.4409 60.0767 65.8442 60.0869 64.6768 60.0049 cv
65.4414 58.8071 67.4307 56.0576 70.1763 54.9492 cv
cp
69.8408 54.1167 mo
66.0088 55.6616 63.6284 59.979 63.5273 60.1616 cv
63.2368 60.7031 li
63.8413 60.8184 li
63.9863 60.8442 67.4678 61.4751 71.8286 59.6016 cv
76.2656 57.6992 77.3252 54.1284 77.3662 53.9795 cv
77.4941 53.5347 li
77.0488 53.4199 li
76.9121 53.3857 73.6621 52.5757 69.8408 54.1167 cv
cp
ef
78.1719 47.5464 mo
80.8623 46.4951 83.1465 46.689 84.1123 46.8447 cv
83.668 47.7817 82.3584 49.9385 79.2324 51.2407 cv
76.2432 52.4868 73.666 52.5693 72.46 52.5166 cv
73.3174 51.2998 75.4492 48.6138 78.1719 47.5464 cv
cp
77.8428 46.707 mo
74.0049 48.2104 71.3848 52.4868 71.2764 52.6704 cv
70.9302 53.2407 li
71.5908 53.3447 li
71.7363 53.3672 75.207 53.8936 79.5781 52.0688 cv
84.0303 50.2139 85.123 46.7935 85.168 46.6479 cv
85.3027 46.2065 li
84.8623 46.084 li
84.7344 46.0464 81.6875 45.2036 77.8428 46.707 cv
cp
ef
86.4932 40.7114 mo
89.1563 39.7002 91.3027 39.8975 92.2285 40.0625 cv
91.7646 40.9683 90.4258 43.0132 87.3135 44.2739 cv
84.3477 45.4722 81.8027 45.6138 80.5713 45.5918 cv
81.5195 44.3643 83.7764 41.7417 86.4932 40.7114 cv
cp
86.1709 39.8716 mo
82.3213 41.3345 79.4629 45.5688 79.3428 45.749 cv
78.9404 46.3525 li
79.6611 46.4463 li
79.8066 46.4644 83.2656 46.8828 87.6494 45.1064 cv
92.1191 43.2964 93.2461 40.0249 93.291 39.8828 cv
93.4326 39.4536 li
93 39.3164 li
92.8799 39.2788 90.0342 38.4048 86.1709 39.8716 cv
cp
ef
94.9395 34.5884 mo
97.5781 33.6182 99.5928 33.8159 100.477 33.9878 cv
99.9922 34.8604 98.6309 36.8013 95.5225 38.021 cv
92.5967 39.1704 90.0859 39.3682 88.8242 39.3794 cv
89.8623 38.1396 92.2422 35.5845 94.9395 34.5884 cv
cp
94.6309 33.7446 mo
90.7725 35.167 87.6748 39.3643 87.5449 39.5435 cv
87.083 40.1772 li
87.8623 40.2563 li
88.0078 40.2705 91.459 40.5845 95.8545 38.8574 cv
100.34 37.0962 101.5 33.9692 101.549 33.835 cv
101.697 33.4092 li
101.272 33.2598 li
101.163 33.2188 98.5137 32.3154 94.6309 33.7446 cv
cp
ef
33.6743 94.522 mo
33.6743 94.3843 33.6782 94.2505 33.6855 94.1118 cv
33.8867 91.022 35.5581 88.2993 36.2305 87.3179 cv
37.0098 88.1196 38.8647 90.3726 38.8647 93.6938 cv
38.8647 93.8208 38.8608 93.9517 38.853 94.0815 cv
38.6997 97.6226 37.0654 99.8433 36.3945 100.612 cv
35.6328 99.7983 33.6743 97.4253 33.6743 94.522 cv
cp
35.813 86.3511 mo
35.6997 86.4966 33.0581 89.9263 32.7861 94.0522 cv
32.5137 98.2544 35.9502 101.462 36.0996 101.597 cv
36.4009 101.877 li
36.7075 101.597 li
36.8232 101.493 39.5435 98.9399 39.7529 94.1187 cv
39.9648 89.2651 36.5962 86.4028 36.4536 86.2847 cv
36.0962 85.9849 li
35.813 86.3511 li
cp
ef
38.5806 85.3696 mo
38.5806 85.105 38.5957 84.8325 38.6294 84.5601 cv
38.6851 84.0894 38.771 83.6382 38.8867 83.2173 cv
39.5435 80.7769 40.9053 78.8706 41.5176 78.0972 cv
42.1621 78.8657 43.5688 80.8628 43.5688 83.7095 cv
43.5688 84.0454 43.5469 84.3911 43.5059 84.7515 cv
43.0947 88.1606 41.3975 90.2769 40.6855 91.0347 cv
40.0508 90.1948 38.5806 87.981 38.5806 85.3696 cv
cp
41.1738 77.105 mo
41.0845 77.2065 38.9351 79.5747 38.0176 82.9829 cv
37.894 83.4438 37.7969 83.9399 37.7373 84.4517 cv
37.2412 88.5259 40.1846 91.8657 40.312 92.0063 cv
40.6025 92.3315 li
40.9385 92.0493 li
41.0547 91.9478 43.834 89.5376 44.3979 84.8589 cv
44.9653 80.1265 41.9434 77.2065 41.8159 77.0825 cv
41.4834 76.769 li
41.1738 77.105 li
cp
ef
44.103 76.8804 mo
44.103 76.4595 44.1362 76.022 44.2183 75.5864 cv
44.3032 75.106 44.4082 74.6831 44.5391 74.2954 cv
45.353 71.8931 46.7974 70.1543 47.4497 69.4487 cv
47.9644 70.1763 48.9761 71.9077 48.9761 74.2886 cv
48.9761 74.8257 48.9233 75.397 48.8008 75.9966 cv
48.1436 79.269 46.3857 81.2798 45.625 82.0269 cv
45.125 81.1792 44.103 79.1802 44.103 76.8804 cv
cp
47.1846 68.4341 mo
47.0879 68.5229 44.8345 70.6245 43.688 74.0083 cv
43.5435 74.438 43.4243 74.9038 43.3306 75.4302 cv
42.6143 79.3696 45.0649 82.8364 45.1699 82.9849 cv
45.4424 83.3667 li
45.812 83.0757 li
45.9312 82.9829 48.771 80.7144 49.6851 76.1724 cv
50.6099 71.5713 47.9346 68.5869 47.8193 68.4639 cv
47.5171 68.1279 li
47.1846 68.4341 li
cp
ef
50.1777 69.0869 mo
50.1777 68.4673 50.2407 67.8213 50.3975 67.1802 cv
50.5127 66.6992 50.6406 66.2915 50.7852 65.9375 cv
51.7559 63.5796 53.2739 62.0054 53.9678 61.3672 cv
54.3525 62.0234 55.0386 63.4639 55.0386 65.4111 cv
55.0386 66.1431 54.9429 66.9487 54.6953 67.8032 cv
53.7964 70.9336 51.9873 72.8442 51.1733 73.5825 cv
50.8154 72.7695 50.1777 71.0532 50.1777 69.0869 cv
cp
53.7925 60.3296 mo
53.6924 60.4082 51.334 62.2402 49.9531 65.5977 cv
49.7896 65.9932 49.6514 66.4419 49.5205 66.9683 cv
48.5952 70.7778 50.5396 74.3667 50.6211 74.519 cv
50.8667 74.9644 li
51.2783 74.6646 li
51.4009 74.5796 54.2969 72.4531 55.5615 68.0537 cv
56.8447 63.5874 54.52 60.5391 54.4194 60.4116 cv
54.1475 60.0605 li
53.7925 60.3296 li
cp
ef
56.7251 62.0723 mo
56.7251 61.1948 56.8301 60.2544 57.1172 59.3296 cv
57.2671 58.8521 57.4111 58.4717 57.5718 58.1401 cv
58.71 55.8154 60.3037 54.3975 61.0313 53.8296 cv
61.3071 54.4009 61.7285 55.5234 61.7285 57.042 cv
61.7285 57.9604 61.5757 59.0161 61.1357 60.1689 cv
60.0093 63.1509 58.1436 64.9678 57.27 65.6948 cv
57.0537 64.9678 56.7251 63.6279 56.7251 62.0723 cv
cp
60.9492 52.7852 mo
60.8442 52.8486 58.3931 54.4116 56.7666 57.7441 cv
56.584 58.1206 56.4189 58.5391 56.2593 59.0615 cv
55.1172 62.7397 56.5615 66.4487 56.625 66.606 cv
56.8301 67.1167 li
57.293 66.8145 li
57.4155 66.729 60.3672 64.7441 61.979 60.4902 cv
63.6206 56.1582 61.6509 53.0503 61.5645 52.9199 cv
61.3218 52.5503 li
60.9492 52.7852 li
cp
ef
63.6763 55.9419 mo
63.6763 54.7515 63.8296 53.3525 64.3369 52.0244 cv
64.5161 51.5649 64.6797 51.2031 64.8633 50.8862 cv
66.1616 48.603 67.8218 47.3413 68.5903 46.8447 cv
68.7588 47.3154 68.9902 48.1289 68.9902 49.2485 cv
68.9902 50.3154 68.7773 51.6289 68.0835 53.0835 cv
66.7246 55.938 64.7998 57.6436 63.8779 58.3521 cv
63.7847 57.7998 63.6763 56.9487 63.6763 55.9419 cv
cp
68.6094 45.7896 mo
68.501 45.8423 65.9604 47.1362 64.0796 50.4419 cv
63.8779 50.7969 63.6914 51.1992 63.4976 51.7031 cv
62.1396 55.248 63.0947 59.0718 63.1357 59.2324 cv
63.2847 59.8188 li
63.8037 59.5049 li
63.9302 59.4307 66.9375 57.5835 68.8931 53.4717 cv
70.8892 49.2778 69.2769 46.1133 69.2065 45.9834 cv
69.0015 45.5918 li
68.6094 45.7896 li
cp
ef
70.9453 50.8491 mo
70.9453 49.4419 71.1167 47.2266 72.0234 45.2593 cv
72.2251 44.8267 72.4189 44.4722 72.6172 44.1704 cv
74.0869 41.9272 75.8135 40.8154 76.6123 40.3906 cv
76.6982 40.7485 76.7881 41.2822 76.7881 41.9873 cv
76.7881 43.1699 76.5234 44.7705 75.4971 46.5396 cv
73.9189 49.2632 71.9414 50.8638 70.96 51.5503 cv
70.9526 51.3452 70.9453 51.1177 70.9453 50.8491 cv
cp
76.7402 39.3345 mo
76.627 39.3794 74.0078 40.4087 71.8633 43.6738 cv
71.6387 44.0171 71.4258 44.4126 71.2061 44.8823 cv
69.6362 48.293 70.0977 52.2329 70.1201 52.397 cv
70.1987 53.0542 li
70.7803 52.7363 li
70.9121 52.666 73.9707 50.96 76.2773 46.9907 cv
78.624 42.939 77.3711 39.7222 77.3174 39.5874 cv
77.1494 39.1777 li
76.7402 39.3345 li
cp
ef
80.1416 39.0254 mo
80.3584 38.6255 80.5752 38.2856 80.8027 37.98 cv
82.4443 35.7817 84.2422 34.8159 85.0713 34.4619 cv
85.0967 34.6704 85.1191 34.9238 85.1191 35.249 cv
85.1191 36.4541 84.8252 38.3867 83.3467 40.5249 cv
81.5527 43.1182 79.5195 44.6216 78.4824 45.2822 cv
78.5791 43.9653 78.915 41.2632 80.1416 39.0254 cv
cp
85.3027 33.4136 mo
85.1904 33.4463 82.4922 34.2153 80.083 37.4429 cv
79.8291 37.7783 79.5898 38.1592 79.3516 38.5918 cv
77.5605 41.8682 77.542 45.9233 77.542 46.0957 cv
77.5459 46.8154 li
78.1914 46.4985 li
78.3252 46.4312 81.4414 44.8638 84.0859 41.0356 cv
86.7881 37.1294 85.8955 33.8608 85.8545 33.7266 cv
85.7324 33.2974 li
85.3027 33.4136 li
cp
ef
89.3438 32.312 mo
91.1641 30.1597 93.0293 29.3354 93.8877 29.0469 cv
93.8916 29.0698 93.8916 29.0815 93.8916 29.1069 cv
93.8916 30.144 93.623 32.4839 91.5557 35.0356 cv
89.5557 37.5063 87.4551 38.9131 86.3662 39.5435 cv
86.6563 37.9424 87.4746 34.5176 89.3438 32.312 cv
cp
94.2236 28.021 mo
94.1074 28.04 91.3428 28.5552 88.6572 31.73 cv
85.9854 34.8833 85.3584 40.0957 85.332 40.3154 cv
85.2432 41.0957 li
85.959 40.7778 li
86.0938 40.7188 89.2686 39.2891 92.2578 35.5996 cv
95.3027 31.8379 94.7676 28.5244 94.7461 28.3872 cv
94.667 27.9434 li
94.2236 28.021 li
cp
ef
10.8281 72.6431 mo
10.8281 38.5581 38.5581 10.8247 72.647 10.8247 cv
82.7314 10.8247 92.6875 13.3242 101.537 18.0107 cv
100.242 19.4883 95.123 25.3281 94.3369 26.2231 cv
87.5303 23.0366 80.2393 21.4063 72.647 21.4063 cv
44.3936 21.4063 21.4063 44.3901 21.4063 72.6431 cv
21.4063 85.2466 25.6821 96.7456 33.7383 105.976 cv
33.2749 107.047 32.4502 109.394 32.4502 112.502 cv
32.4502 115.074 33.0479 118.16 34.8569 121.439 cv
19.8984 109.522 10.8281 91.4028 10.8281 72.6431 cv
cp
8.79834 72.6431 mo
8.79834 94.3989 20.5737 115.331 39.5317 127.275 cv
40.3154 127.767 li
40.8794 127.032 li
41.0396 126.823 41.103 126.625 41.103 126.443 cv
41.103 125.976 40.7036 125.61 40.4795 125.402 cv
39.3828 124.349 li
35.4766 119.914 34.4287 115.704 34.4287 112.469 cv
34.4287 108.891 35.7075 106.502 35.813 106.321 cv
36.1631 105.689 li
35.6816 105.149 li
27.6704 96.2124 23.4399 84.9741 23.4399 72.6431 cv
23.4399 45.5098 45.5132 23.436 72.647 23.436 cv
80.1914 23.436 87.4287 25.0962 94.1602 28.3721 cv
94.8574 28.7114 li
104.75 17.4287 li
103.652 16.8164 li
94.2236 11.5664 83.5 8.79492 72.647 8.79492 cv
37.4395 8.79492 8.79834 37.4395 8.79834 72.6431 cv
cp
ef
95.0449 26.5474 mo
88.0342 23.1333 80.5 21.4063 72.647 21.4063 cv
44.3936 21.4063 21.4063 44.3901 21.4063 72.6431 cv
21.4063 85.4819 25.8203 97.1899 34.1709 106.502 cv
35.0474 107.481 li
38.9429 101.593 li
38.7354 101.351 li
38.3867 101.311 38.0977 101.26 37.8896 101.214 cv
37.9434 101.053 38.019 100.843 38.1128 100.608 cv
37.8062 100.244 37.499 99.8784 37.208 99.5054 cv
36.8931 100.006 36.5981 100.377 36.3945 100.612 cv
35.6328 99.7983 33.6743 97.4253 33.6743 94.522 cv
33.6743 94.4282 33.6782 94.3364 33.6826 94.2437 cv
30.0371 87.8286 28.1895 80.5962 28.1895 72.6431 cv
28.1895 48.1289 48.1328 28.186 72.647 28.186 cv
78.6641 28.186 84.4678 29.3569 89.9258 31.6709 cv
90.5117 31.0659 91.0879 30.5894 91.624 30.2163 cv
85.6484 27.5366 79.2773 26.1563 72.647 26.1563 cv
47.0132 26.1563 26.1563 47.0098 26.1563 72.6431 cv
26.1563 83.7583 29.6255 93.5298 36.4199 101.723 cv
36.0244 102.325 35.4727 103.16 34.8384 104.115 cv
27.3979 95.3501 23.4399 84.5161 23.4399 72.6431 cv
23.4399 45.5098 45.5132 23.436 72.647 23.436 cv
79.8545 23.436 86.7764 24.9692 93.25 27.9619 cv
92.9795 28.5488 92.7148 29.1235 92.4482 29.6987 cv
93.042 29.3638 93.5459 29.1621 93.8877 29.0469 cv
93.8916 29.0698 93.8916 29.0815 93.8916 29.1069 cv
93.8916 29.8633 93.7441 31.3135 92.8672 33.0322 cv
93.0967 33.145 li
95.9404 26.981 li
95.0449 26.5474 li
cp
ef
94.5898 16.5039 mo
89.6904 22.6992 li
90.1396 22.8525 90.5869 23.0127 91.0313 23.1792 cv
95.8945 17.0288 li
95.4619 16.8486 95.0273 16.6743 94.5898 16.5039 cv
cp
f
85 13.6499 mo
82.1455 20.7231 li
82.5957 20.8062 83.0459 20.894 83.4932 20.9878 cv
86.3379 13.9434 li
85.8926 13.8389 85.4473 13.7446 85 13.6499 cv
cp
f
73.5977 12.376 mo
72.8955 19.8726 li
73.3467 19.8745 73.7979 19.8813 74.248 19.895 cv
74.9492 12.4116 li
74.499 12.3945 74.0488 12.3823 73.5977 12.376 cv
cp
f
62.4854 13.2227 mo
63.9102 20.5962 li
64.3535 20.5225 64.7979 20.4531 65.2446 20.3906 cv
63.8184 13.0103 li
63.3721 13.0757 62.9277 13.147 62.4854 13.2227 cv
cp
f
51.7026 16.1157 mo
55.0737 22.8809 li
55.501 22.7295 55.9321 22.583 56.3638 22.4429 cv
52.9824 15.6577 li
52.5537 15.8057 52.127 15.959 51.7026 16.1157 cv
cp
f
41.4746 21.0635 mo
46.5073 26.8101 li
46.9063 26.5815 47.3086 26.3594 47.7134 26.1411 cv
42.6548 20.3647 li
42.2583 20.5938 41.8652 20.8267 41.4746 21.0635 cv
cp
f
32.1812 27.9976 mo
38.5337 32.4106 li
38.8906 32.1089 39.251 31.8105 39.6152 31.5166 cv
33.2212 27.0757 li
32.8711 27.3789 32.5249 27.6865 32.1812 27.9976 cv
cp
f
24.2759 36.7061 mo
31.5742 39.5454 li
31.8721 39.1763 32.1748 38.8115 32.4814 38.4512 cv
25.1279 35.5889 li
24.8398 35.9585 24.5562 36.3301 24.2759 36.7061 cv
cp
f
18.1704 46.8438 mo
26.0244 47.9385 li
26.25 47.5137 26.4814 47.0913 26.7188 46.6733 cv
18.7954 45.5688 li
18.5815 45.9907 18.373 46.416 18.1704 46.8438 cv
cp
f
14.1719 57.9673 mo
22.1787 57.2012 li
22.3232 56.7319 22.4717 56.2656 22.6284 55.8022 cv
14.54 56.5757 li
14.4116 57.0376 14.2891 57.501 14.1719 57.9673 cv
cp
f
12.4375 69.6177 mo
20.1831 66.9258 li
20.2373 66.4258 20.2988 65.9282 20.3672 65.4326 cv
12.5283 68.1572 li
12.4932 68.6431 12.4614 69.1294 12.4375 69.6177 cv
cp
f
13.0376 81.3843 mo
20.0347 76.7896 li
19.9961 76.2739 19.9604 75.7593 19.9365 75.2407 cv
12.8291 79.9077 li
12.8921 80.4009 12.9619 80.8931 13.0376 81.3843 cv
cp
f
16.021 92.897 mo
21.7017 86.6411 li
21.5605 86.1206 21.4336 85.5942 21.3096 85.0679 cv
15.5098 91.4536 li
15.6738 91.937 15.8447 92.4185 16.021 92.897 cv
cp
f
21.3647 103.9 mo
25.3823 96.2554 li
25.1313 95.7593 24.8809 95.2612 24.6465 94.7554 cv
20.5537 102.542 li
20.8184 102.998 21.0879 103.451 21.3647 103.9 cv
cp
f
28.21 113.068 mo
30.3574 104.211 li
30.0015 103.744 29.6533 103.272 29.314 102.793 cv
27.1235 111.83 li
27.4805 112.247 27.8428 112.66 28.21 113.068 cv
cp
f
93.585 33.5894 mo
93.7705 33.7129 93.9541 33.835 94.1348 33.9565 cv
94.2998 33.8833 94.4629 33.8066 94.6309 33.7446 cv
94.8291 33.6719 95.0225 33.6094 95.2148 33.5469 cv
94.7979 33.2734 94.4092 32.9673 94.0381 32.6421 cv
93.9102 32.9487 93.7578 33.2646 93.585 33.5894 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.1.0%%For: (Bernhard Schober) ()%%Title: (MNRV_4C.EPS)%%CreationDate: 18.07.13 17:48%%Canvassize: 16383%AI9_DataStream%Gb!R&H!VH%ec=>An/`"S@5]tR,Rh\9!FZB>!eH"AE.@pHZ-@^k^-?p$]nYB/Dlh8-e`<`N)>iao^<Z[_A#iSWdF"AY,F(k?mFTqV%6gJWbrV(>0e'+P(3(;Y(MhZ!]8u8YFULlGkVekXqL)%mt"Y\M#g!T!m^$M3!"g?J12m:QP<q!9A^1hc&eb2qRdp4S,s(SitkKTp&%p:lJ(:Q:ja6E.8-??m&W9s<AuDY/gd>#qk(eZLf:+.dBE?_=NkS`QU6@]=fF/Y-u&G>2`[^N8pglfRI)[Wr-q2K-'siGfYUfN7_D%\Cp0Kp],gOYZ:GCGH.k&?Mg-/JAS$Y<6Bq)+*qqhYd4;j@)$$t2.ot>%Z^[lo7&P4LQ-2\$".ruS#u.c!l.S."\YLE9m+X8:VCSU%d(4+aAOA1p^_;rRm4Z`IQ`!<Vad@4AU7nRWYG_K3Tr4n"aORAdTpAEjEf6f3+h#pqUDZm;)dGVCI.OOsk.d4?>Kt0)ZbqU%FF(t<%rs$uPL7p$na\Rq'T:2=7ejGL\<7uF4eU-]<jqE:-^[F<C&<R=uVZrbuiCfqefB`O[[%CZO&+.qgd?-T-9^Xh<Bm,(<%UPU+0C;\i%;Df3)Q)W]><Rskm0O\W)[-ga<L0di%_s^Y95.PrT%%EE.fJ%N)0_YgCLV&>mZ;Pj_bq^l<A(r_<dphn#loa&-e7!,]LHh.OSC%;=%r1@C&2"Z+=Q5C!+CNV:D#=btBbT2)A#6Jd#*WUtqk0X,<5do&CTPBHm"6UE>[FP2e\FE?*a]<tB\rNDKKqGN+T@KqmeTLejlhFH2%nYr\_;pW@jq(9e,>*alW/.65r(=ocBc]`4W0%P#JXQ./^I+reKQKr!3r.^hGX'3JGeLJ:9Xl>OZ($g)c54q%]_RDZ=T6hWo_[nW:%$kN*R:[q0T>h9?0r5;bu-N(ec3$pX`IYK)a:TT0n_G;/\`!!i5A&;%>Kd4H1Cl.]#/`VZV'??)^YnY63I53^kJ#n@a_G@8nGuuEV%#9d_"1DUj$prRIFa;K;YSRLR8&TTm%Z3L?H=u\_D`0PWPH.;bNB+4fL/KCCQ@E&YhMrV]Nr.Up+q8Z9c*)#c7CZ5'XP@p#WK^m4`%@ulcW&9:?,Em>Lc`]D[[]Lfd*a;K;WSDiIV\Rdd.>XSM.3]K/lR5d6TRn(_!EI@P<[@"[JI#J_f(I,/7Nil3APV%090ulF2F\<X=%Zm)IY+_ODU>*++TkEPM^cnX+^?cF$O/n[S4NFBk2Z?L2Whrj2#O!//]A8:6eBA@G6*rTUF%Chtd.?l*e#+R"0'[T$B\"rnOrp]<*%L*WZ%ZRi@$bQC0W0o9fRfT<=0G\+YF0#+Bc$N7lW//;1T:Xf)1n<a0K3l?H`?iF+TR3n7'J,,^RoC(Tjrr^5-ru=Q&m>-7W$9njr%o"U.nrZ1puIt^e&`[/H.r`?;pn),l!;uD+rcZ/CBPNS3\b?t/``hs\S_t7]Tl$4#a0hg1sFAp_TCB+=6Y(Q]8(lhJ`.\9]D.:DXL%iXJV]id^sbGRKsA;f&:F\ot1Wapd#Y@3-Ek)$/Whs.L6%JNfT]"8+UWLPgl#R]^PNH8%O_M9hh0R")`&:Z9%tr1lO7M<`0%M5TjG%%Q5$0&+:tBeF243:K%iTe!&mjMkpWoWW5!I#S@l<3n1UC>df]i:tLh@=;N[rokL(2!]NYT+U!P9D$FpY\f<HA%KG\fQa*4s2rJV2%@Hrb?_0r:DNEYiX@lRh(r%lpbW-D'3J4\\Q$Xi+?FFmWg"F\md=to"+9=0`X+GTE9U`]#iB3R<?-D5:'QQ\;EJom>P(e7E;b,kbN%Jf:$9OBObm6a<m#p.SS/OBuo@d@!mGVKddH0'I!Wlgn4daF^Pt*X0Lo">h4MK?Z2>IFf/l9^.KJd8rbGT3Km'-c1:1%8ZO#=E8lf%9%?gkT&:Pb%Ijb56I[2naAV6(8q8Y5TSeu[IFE6r9T-^D0Xh*nn5mi&NO)77*/&n4@5Ekd+Y`eRKUg)@,LJW":X2sog1.4j3$Hr9%fW];I)pXS93ul!T1VY/I>/G3(9W<gej;I)<3<hL%`)VC%Jh\r#iGBOkPGS%Dn;[<V*;D+tJe'e:3ade6A&nD.:O,]0:X5/?'5*fS%ADnIe@rca(.H6&q'<L3jL<m9GCDtFtNa)"5/+G,D6h'`W9f"?7Tk"M?6]@Wc$%"O8ahOQO*2UUc@85t?O`^s\oY'7F2jdg2H6,7=%\]/Xs+fD4BQV2-+N_GrNmK4b6W-=g05Y<>)*MaFd8KRULg-A<,8g?S2ePW(<3lNDUVFf#ViP9mfc5ENVRj`eWU1la`TPoQ9#!Huj%nY.[0"6iCg"D7nQKdA=o<g:FO]Y[hTKd!,9&ShB%_@ZQk(m5rVDhb583S-Y:MEE5qTYbpan.O^m61+FdHFMrp=Tb^I60FCulR^G[%XMJmIme6=W/p&MUDalRnN\ejVJtC]O)pNfU',!cT..`[rmg[iN*`J+Coc_^<c$5o+"IFpi0O5b.-:>oM+cY^l)VRI1;5k)WhdP</%K);BLPM28j<u7)LUq`_5-l!m(,'0poI:>f/6b9tJqV2%pE^eU^1qsOL1&$KF-Eq!bFRUTZ)aHhJBCN!aF]S84'R7Hs0uZee&Q\!u%+uNE=0He(TF93N'&'gOkUk9_%8u\<TG<gL;H==uV@B0Xt_bt/+C913mLK,Le,nJpm"^HnGZ\9kdP`S/E/eGHi7DOT)7EA$-N]<C'%L"';*9:;h_!HfmaDC*MTdRJD6j;0K`KmAWHMC7L";jWa:aQ"gU!Z`D[*`KYg"h,bY,*M'?%T>2nNGFn&gHs+;@HruWZ>:10T4X+c%4kZUpYqBI0R9p7F<T4Q!3LAmIj&p!)7eSNse@0)t%jkcrB3nT7%4cG@["`arTO(.2+%b-F^ORc*r`E(WkUM7,VDB[CWOskG?Lj+"%\V3L+oSTl_/=*`U)79PkgusIQO!jIJOB2Ph(fp`\bEdO&<G358J1O![De[\aJaOn"@kdlP/3&C&#XcHA'5<FPE_m8'oEmtE8Xl!E%e$k5tP2POCOE?i_RNa#(=J,DpUe^bkN!W]U/d\U@Se[<n*`E3i*m4td6]Iq%KUm4`-g-db@0oS,B<-Ze<,&=b2%3Ck;hg>HiWA6M%o]uWq8;WCV7K>HmKb;rB@U>RT-I=!ac!^H5Fcf'-)UG;eab;,l&5tPtaes^^6[smgB)MP[8n,ROFJ29t(S_aDLY`ei[#dhAO(A83%cS(Sf$MX#DF:N!eTpu!@[f^DE[@'L[<qC%AjL5:u7V$+%2c[apLnh#(GQHnE=eh^8Ge5TpA6nu'<X<#G?&SMkY=?ADa9C#@Jf!gC%*1N1<Ee]ZK,S,ag2.+M:65l;5/5lJ?`"US8f4/'Co,-+O_FjF\1Y+%s\J:1-*bbucnH#U0KRL'$]VdP,;"b5:l@e(Q,on,`VAK$4%Ut+.M&j3u/R-OPljACc]1N%.?pg7G#$6A="49j5"oIaYf>>$,4S*^F+QgZ!=F$W_+JdT>*qA<][9!VWar#m4['p^F.033lV_r"1c%&Ak0kCBu;52/MHV,$NnAIU/*B!Tk\HptT.b8gVZ?W#^-b-'@7U+%msPL\(blJn%MSB=t/Xk'549qMP&AQeY-a&/ZMsfO-jSH;VG.%Y[E64-@\KMA;9^[aVOEi$V!`jn.ZK7PSTV-?:pc<$h)mWaa?$`SZt&joHkl<58/di\XXJX3UDl#RGcCD=`3Gi8.ENZ1fG^T`?KKA%g,JLFS\Uj/FZe>9E46lZ:at"EDqtgn4@f70!OYJ_bEOGg%<S#SHC@>GZmDFJ5S8rrBoP,=T>'\A22d\A6K^r-0BA.P)@28FPMRQP%V$h4Gi_*)*T=WMu84rt8";3fWSVii#0g)n,-$><@o-Bl!m\'$u3d:cKqbkMC9ET=j,k"hjk`WF.Q4E+Ei6;PiL<%P$-D\9tAK/f=%3A)257?#tYmQnu2fnQkR6sS,Lc,9$A*N"u_,IKa6W:3b(=7q*0.l(l!a$ISrKHub?/<JaT=EGB`VJ'D'MDtg\-nCnI1"3UDKVXq/%P8q`4Q?J_h=TV;CUi%Rj/E;mkC'bj5(>Mi$.RG2Or]FQN=M>2cI;;@,%RTa/R6V34AktgPKa+m]\;BkHoOsa)B0^]!(#R&P":QJ4%),QiV7UcAPk-qTR;Ao0[I2nFsYA[iBIfa8=+gMg>X7:>In,6>JQ=%TQ]nAm@meE)N^mR6)/pga<o$Gb_`W+:@6:q^"X'eEqE>g![%lA"?K/1H.q`>i?O-K%R)o($U6R'&)J#V,QAK5n4^+':&pB*NfO*%L[\V;,X>%<s.SeZb9GIL;a3&TFO9-cGb85NrX;4$9:8-`&;&%MuE)eU*m\\qF]JD;Gs8J$0F="9gm[A5R.GG)rh?)RPDc8O/\QbT-p?BH@U9T/Lh?X*(V#Pp[f^-MNHXX-[YF/5U3L>iGsT6i,6(,%i*.QAS&0Xb4EKXR_RU8aTnQI3]lVsXYXU`>L+d(qkVJ$L8kmY.ak*@Y0ILlE!.B@Hkp#]^"hkYeMDAJSJ<\"<<#cthr,8ls>\U$Z%,!mS$Q'cD+4^hZ-.V-U\aslFEJ5['1p68t``UH4JJKcGXl;]9*/0c]*IVJD0aJ)oOOYH"uqNrn1,93PHA`VkW4pth2@SA,hp*bgY%Ke7,\TGRds<'B_XGg20li4OXW`23Sf&k&RPIUdOA^WeZ`+N90ig!\@Oh<<TlN_`k#F/\_8=SE3(:N-Ep>2Ui3K4*K?FWYk4/60SE%acRjJ%n!BA+p+oN;,$i9__P)%4i^TpoW9*#`jg,!qhM.2LdXhK$9S[+Y(r)DPi_+ldueB=T0%=oVAI0O,VFe!Y5</V6-P.(<"&%@%8]QD>&WR:"HGj_6G`r&eNt[T+K2Ft>#>NXfo0Os7d_ADj,l?MkN/06JJLBiggR9:b,,3LOSKM+rY:<*=cgo$_@Y?L3+)l-hLINi,%+B!m$YggEsSk3SRBNZ:Y,S"gs-GQ%AeEX>.e]4@u#4c$_OKa-*4j_!I'%B3&J2M9g.p.EZ=+V_K1b398TcJ_EUZBdP&uD]O`%kn?%1U%_umt,O#pg$5clbU^i>:NmMUUVT81mTQKka[UlaVgmFYi$k:#6T7h?8$O=/FO"hV-u$9Tj^!\K\uHum1?AS69i&?n]Jq,PgFu*%bncJ\3D)dZGmd&HUGs#D)Y%*s;N&(2nF,$s'_5$bcV[HRl]-pK,"B\L$=`;KP2h[<XML<KK[$NTaIa8^?lG_pBF0Ns8UiH7qiH!9%j>_a=6UWsnjI3Cp2o?Zg0sY0N>;E$IBOuQc6n$8%50YU?rk=7Nc*A,K0jb-P?=4F%5B4WX$!*kTH4Og=n\k'2Uk"t]X>@$aZRPVP%YYX?7Qh4PVb.]N594[]c/3,qd)O&+uQ(C6qOkh4[Q$J@;@,at>?qS"P%.mI=iFU1<VSimg%A$ZbQYYJ0]6n9pP?,=]c@faaa-T1&%gC,o?YdQs28=)DD!ah@t"833!m3%uC@g^*PQX7#D1.k/j+F`bBOuCG]E25-;Tp7Msg;n<b,)#P!Doc&k<_K0L-!pTZjI0=\o&Q7A%-SZc%#htYgNTUZ3:9Jet(j9""nm6t,],nFmUeeqW6/mjXV7,\`S\gOF_Kbe;eRRndf*4@B$AEiXI&\lsDp.^1q-#WXH\>n]_4">R%+ZV&N=8VLmO(B!J<$<\R\Rm8WSm]Q_f,IB)d)pk[X96XZY#t_0_L1BJM5Kaj$4'&,7T,\^;+(Ob8fXhZanN7AW3Gap/]G1$`JuU'%!7rVUf%:%fSgRQSV,RkLV"g(F.B1Q/A($_'2KV=?)o>VaFp.X3966o!@=(#-_dMY]e0RFSqY!SoSIHb\dTR1VZqqr?3<!e7Je-V`%Co.cS@No9:OqN.8;b!0cUe47%VA!Z014>h>i`.M!>:C:S>/TqpfpX7"31p7CpFN0)D9KE7r&&,)6c?QiJ*HFLPWKI>q)7i?.G)Uc%4[nc=_Yk[)Y\rK*hM0Z7Tuf=a-&Kl)TsP*DMLI^M514&[<j6_=QI1n9G]s1L8@&F03&7e=$I9o`HQT!/9!@`7@M*p#Q`t94ecZ(,%'S>%G?fTO!cU8M6_Xa42;`3SiJFMhm</0lZUjXlI9&_@^nsdDJlUtJhHh[&,j11:0KSL/"=BX&VPH`0m]8XB,lQn<0`O%:A,5PW=%-R'o::*d(cK<5a3Hb<-Hm\gb6%sk1(7p6sBX%5k.E""IWrphP!^KqO@KQp8WVR-p5p=OED*NT905n$sT69Gs`');53<_WJe[)6m=%MI5,Iqh=,(=,@=dMqm&2U31LY#'VYW-kC)ZIl/`=?f=Ol1ks8bEX]Lu0DV!;(nOC/dsOgCP8l&pSr!AH6@9Eo.fg_m*#\RMI4LnJ%F7[[t`'@l57::&aAR$tZk2b67QlG,?YDg@Qh1bU$$_.mcP&mI4iV-B:FJBc&#@X1BdJ$IBcJML=X5XjiqCA6["bsB/A`Q*i$gB<G%ALr?p/Ko1Md2c@`/Nt4=J*2J$dbW>%d_h44n8=(jIuX)jr.r!4@k:JKa4)B:>fg&uX:D0[Lfs=jhq&M,#6#OHYi>R_QKN%kk`2X(%jWU_E5)m?T?66kCKYCg4.lq^)91H%;#Gh.)W!=os(qRKN_t.kc#?En)69U>eKO[asAX56>Wf]C[&2G$sc%(8q_Nt0as2@uQQ6L@)%MN#7RnI5eeN!`1<.Hna3ed/H=9M*&A",UUHhfGRs8<>@\8>Pb@ged&saG4^kRqE"=bjaY:^>6d)=jF%Oj4r#,">P4[*([amG.;Sj%6*)GPG[`6ld#o<qY1U5JmfJ[b,Mu\p8*]r\<Pjk%J+l"?.X-46GpseIBZSs2l<Oq5I9u1.C"\elYX"8hf#<;RJWW+Po?W`:e:;!+%bLd-)jNI"N'nLEthu8Z(+I3nr68Ap6`b[W\+uKHnUV%$jF-;$)rK'!K'dqcerUR'i\W.P8_iLgUMuhZ*.9[O5.7+i/^VSW^(S3Y*%RZsN4Td!Lq*\+^YLEd)+Dg_#nQSKPW;?NtY=qt:IQ0XC#^P>t#..]!7h(r.LQb0HS-KauE\JKfu'8+LMhP&qE0/'Pd&:RVuO6ZQ<%eE"c+`fN^Br;7R,>3u:Y9`!jk`Ih@eBajm(gnH5aibh;V7Rg2V%V88!q]j$#5!:CI,Z^_5:&D0Vm+8(&W)eL5igM4Y10=jE,@Cu)%^-lA8age*Afga%H1dc8s3nk.oURu0"4W:UrM.N!Sm-h0^*COZEN>%><q"#>g13L,X89L^Uane=[,<`VYFVem<V&J^Q'qVEAYrqqT%T&`K#k,\@k'O0;=m,\l2F=Aqs2$)r?1]GaninhP!V-''lZs2sPn\f`SaD^Y1%M3Kphq'9X:nVl8l;cdHHICO?,;ZbJP?`[&g*bN1%5i*PFdqTM&6m:*B?/rsJjGX8qA!DE("I_qP^*J,IVA&P6YN)hkp35]q\.7b1:$M`9QLI#ASr.WMYj8<bP[I:%OK7L7Y91CIBh`.*%q!s=&_0')qE9i7S@hI+jYs68):p)gaQP"0Lb9rNEVWV_8:$sN@0/i=1KT/oqCR>B_mb8i#]!$Bg*CR&DL@b$7rE-iWi>lBJAQGre%:_]ALN2^\@OK"$@,^A1^/i:<qUKlk3PJ&;SYM][6$Defd725O'Jj+F'$tiV`\%!ekPB/)J%VKa$gP(e;Z6]DBolrqS\$(WD`fJ?T%_`UlQm2kWD6X?Rggh'C.OZue;`2\i^k8YWS1b[rhlJ[1dbAYSE2a68L,!Yg&A3Ssj>k@-HP-m%D%P?3Jo=P;jU0@cOij0TT8cI#i%RO)E+!0utbOO>12@<]e@A45T/91nm./KTS]hl?'V4M7I?O2s<I[%H&rr6519:QCpXf,$XIK771p\"WL_$]j3om*cX2lL=$Q*c6)S%Y:nY4?gY^(jgKTn/:Qh?DP12'i;.ZhVDh_Lfl,[$s1A)GF5L`@i2:gKr;+cUQ5^>fZ^Iq@:Q8,Ua:I6@qC2FSI_42/ea>O)YB/sZ%V5E!C:X.JM\(>Mmp[@;=mHYEJXge:E5.+ad`CB1%ppJLp);N'e;kqn,'WG?G+)\Krh<HjZNQ9nn?cD3J'-UcXi@fG\!SGWDI^@LO%!Ar4T<$g7"<e\nq*$$n_pVdRAn@%Yl?"r+XiOlk4meUmVKAc$IgHN?fj'4XaNQu>6^A+P\Ie(*1IVJfYU%.dGd-<N]@U4fAkUh2H%^SmnpHD,K.@^PfP\+eU1$AlGr3kbR9StL7Q0,kEt\,T+tW&C6=*pu(KQhuQ-Ui(@oo3W$Q`8::f@ArUdkNhij6h`S`[SY(SUXOS"%H"nE#"7u/TeJdH/f0ej>#ag:?h]0LgP5DE8D>*tb"/,ueNLK:kHh>1[hl_5._E9BP(DjF>ps:\(qufg-lM^>(lkYn1>4$gIkXTX'%0QV6h"8UX6gjYkI0'tThS&L)uddb6H$fF;";2PS^7@Z:/#iCXLo&Qd@Jird".A$J?5<coMhb`sKU/B\r?@5h3[nqBo<5A+)c>F"_%,Y3h8$H4;&p@+CkKHUNg%34FP#\N!M!oi^\OELaEK%)CE*DCX$;b0.5$m,=PLn8nsoaa!/TOcrtTR?L-gPb"#DpVJD/X*4br.ld=%S,#9:0f0Rp9PI`3/!!;4oAaRWreB[X?Oo)?Jm"l?&-"iJgYHf*2A70].*hbhr7$>=M]`Ei&(e"u-7GhsXBOk1)ZS\O0o#Bh[;PCu%fQGO\^cGY=$1*?'.=UpgH"liuRJ3iOeR+;2pB*,!0shG1<M\neNMfi\(X'E>oif.i>YRK3NVrW[MOde[e]`T3VtSAFo/7+kABfi.%m's2?kZCA5a4Po%^gc3!5n"fA\Fu;eImcu/R@)&QreJMd;_nsC&"M2M0VdOPiL0^EXT#t+MCnjnHZ3(E5:QWYdGZhtC1-4tc3"j*%990&4Hi^JL(P2/W#;5ECqU^5%2Z=5n620X&k'suoQKKnS*And3ksPCscfG)sT9d1iWR:l<o62fbrD/JD29`Ag%NN^-*c??!Gm5ND%rYH!cENDI$\o0dfh<0p_Ia.o^\;Eoum<6L"Y1l+DGBTIjH@2*%StYhlo3\0g8a7>*?TU2@3n!skY5LXVrMMr+DY>!X?jr#%LH?\"%mqtSd+V/^L.V";Z.2]rF`F"!LH*^Fc^\46?>0UNcf4dHA65rn7fDN5s@uOO7QVOmAm/5Bb[f:)c?8/\5NUg4#XH*Uf?[_2%[9/VO%:Cf+tRl4HIIht2k45bP7k)=&@eZoh)b%##;H[U4'd@+"t%'%3DTb\@lT]0?YRnlh)r4N*]9WbhTmQCEZh:`3m-e6FU[0k\'bXHP8%n#>.2*;oZ`D2OdJC$I,Q6b.1^*W1"=8\D\mDB=*jJ")JaW#9Giq"1FdRVHB_h!?jDAa>e%fdTp8:cTZ[_1t;sfP1De@6/QMXAh%[%XQcOtE.kQ#s1@I#9h&DV6+EqXdQQHS+=UOV`X^b=&BOEjQ&fi%:LZl'XX\^hK;6$;gOQaFUshg!TmI;T5h3BDTE3(e'YY2(7oQoK%#[.59<2d(/EVaUD5'.mL+.cjYO*cjm1Cf$()Yllj%=W$+jQN553?<XWfB?6C<l!IlgZIDM6`3#=Vt_d_c'rlLd'rD2'%K%!V4g_F%@NnKCNb+-jb"Vn)^gePhC+G\VhU!09"j#W?7WO\\!)f%.N-$ts$U4V+[>/Y'dCSke72AsONLM8s)G;hf1_jREBMHiQn:Se9Ba3#_%Uf$f-RR2?b#*RZ`cm?fp-,6+l3;o\sC3h6OX#&]Dj>8>C1TROZ.'eLjeI5#k<KZ+XCkb[eQ^&BeJp5t?icX91+G$bbTb\08^%)>#%Rpu?iU"<]-7RoskrA>_O?W,Zr[-h6>GKo,UqZV0p:udl0kl*[7KkdCU=/-_%(Z@VMbaY$rL0GF^X^=m(ci4/uM\nY`7</K2T!WKh%co5;U6rsSH-6!6]9DaOa'Mj+gqr"fR.^1HW*:g9Ub1hI/UJ[+DjX>l9m;AcL]5BPg\$bA%`p6PO=>01N>l!s?ph-eXH'C'MeVj&3%UY:gRNS3$k'1-<<H+[gidV1Th6oopu2+)H_WH!h*nN*&':I$..nLe?$%'"ZF8D"5K<NoSDF4La#TEZs'<VMs<qr/48oY\F8S/-a(%Pkn*u[4$HRiWI[3+TVR%Bg!fLnme_Ko*Dcg5gkr44`dn&d-JLf1lIW#TZ[;HqqAXYhG9D.*9-el88Qj-#)!PcH\iTTKs9*EkqUu-%4Hs>`2kD)%0r"!J[,W4RF/(7a9D8N%09+^jhc6[m_jGae+1$5A-3'26FJ::J)*N63]`=e5k>Y/m3pKZ&o3S?BlFo*jkIgTqk3q9;%f_#I`RVoV0dWg<Lkrq5E4uIqp4s4f'mETS?[XWa`9De*_jDh-;j2PHN4^dgcnBW@Q`nea#S)D$ZYH<T7\4#bcenViCO@qet&lD:f%jCIN:meO*rADb%:s8#`Em5BMT2t3^Fc8H>BqYR*/<u*o2Od<Uje24:>[i6&DYt@:Od<ZrSLf_:1MqFKOm6.H4"ZPGdA@U2bkI->@%pJ^+KI%T74<pP=*PO]h&IorUqF46!c`VjpcSo4N6l/Q<Q]'/(:s2nL5IaAonGI"?p3hi1@WQ$D@6Et*_nCQ.,bC."on*F6Fc3$VO%`dm3C3b:N2EfIOJB%I4d!c%I+\7O"kepM@.G+.Y3cJcp\gXkOfT0eRi+93A:l\F?'jMB'?m9^CPK%70l?&R?E<eIm+m_`=G&11aj%3b8qM=_*&Jmb=GN8p[mpjf9/W94p's"Qa92YFV0[ig3F3i>MjfD=c@HlN--)H^:mu@$VcY=V*lq#JA!\bTUO`m'`Hj\J#<U3S@DZ%m?`28T>5l<Sqr\522jWG2:JRZOI%BJTunr+Q5SZp.e-hu>YNQ44c/GW0=U1O@l;ZA?S=pm:`%gV.@AIE0-Rqa42F"2!93k'C("ri%bifA7M5M]"eqfH[0JO/^lI/1^\cHLj:))8*S*%<0ajPZ@&#6mF@/=]e5ZM0A.N_j/g4O_>ZnoX)0G%*ZX<gdseq87`+F/chdf^X`%eP=?B)aG(d#JAl>kWS%&+s%k(FWd5RLY9Y;QNQM0>IY"!2G<n#%$86P>J#/5bE[[&mp8n/U)=Tn]QsM>0jVa`7:ZB_lnVLhmBk!(%-s#*\!o4XldK]1BFqmnc.Gt>t2HY//=6\L`]#2T1Wo%Ktg;2305@1=PN,N7[SQt]mFYf[_A1I13Gqi5XgPgXim?cSZ!>W1u>.A:E%cN[@aeY2=:_M"Y+Y0=UJc-RZ$R8WW/cF^ZN;R7%?R:=o<h`]["RT\ek=eRpUX]G%r&]?h1.U>931R66\k\i<XC-JIQnuL:kG@.P[%qua$@qt/>4eb7SqP@fZP"ajmXb#l5<)jO%Ji5nhZAFef[m;'0NFX,UWO=CZ+SYLK:l48?V&d2IE,2XfC?^q[8J=?/Kj5M[Dg4E6u%.:EqL9Fik6<t8^*[ZO+FW3b/kgnM,Bc#RVMeuW`.gZ:uHdO@[s2o8=51`AeJM"Tm`M<iF63lg1_m/Ca">Wo6Ie`3FGl>]ee?#$qt%`EjggKrnlRZ9fDXMO!Qm"@hR.WoTN_ZgXaLOA<"?`&WI@M=O3&</abX;%ZQ_AE,`WB!p@/7YB\fMm`qb:S/>4bSN/ESDU6B7UJ,*%Yr^UcIERW?8f\J?SSf*&c`hSsB(tiSjVk#]0tWkW1:P^c7ftsH?)@WiXb6EhWYcI8TA%nao+_m%@<+,U0_"&=hp&(:B'37e`g:1`%ZOeBF7?_Vn6VbWeRZu,*93<5f_3qDF=1>XZZdqMI@&rn"k"g>QmIY]r=dn5PQs[Jol1dt/5(6hhr<JtnDtMt?^@nD4;>]Hm5&S%q%>%uK8.Hdc2;f.!FaL\"2e[JR+(71nZ$DiUTe]3^aZhrY8M1tg3GkCT/H"-bqq06@Wn#SFPW9e6@d`V@oF`1#SB0R>@Xh+hReK0^X%K:f4@L8-i]2s^:oa2OZWg]"3'\%u!Sl`+)>PWGAcQ0ZT0bPnF4*OiZGCjl4bp=eD_dsC3JRo9.GSU^01.P!IC>fCT;?M(5Co@:gj%,Ns't8fKAnW3#I!;h2-e9"WnSk<ntOFL&-Q//cJjMu^/dj7Q0T+77,Cb3aP@H9MV'm<i!H+/*Q7FaeISi]Ra@k,%cR?KsS@L@aTG%Dtpm="E0paU7GV6^@,?V:@<5Qra@Ets!T7<qI=8i[nqs))g#gXlthuN48h,ne*3m/:3*7flD657/^FTk(.pm%h<BX,`KX-BqjGIr%Gs/]:j8;U@Pe"KG:+*_ZX&,7jO(S-M`i=8j^=H1C[GI/YO"6L&:4Fa_n%P=qS\eJqh/4jJ:N'U,cOph;q7C'l:(O8#A*DH-oU]s"%;kV+qH?;p.JWdc`TD#PEg&>,+?Pk;?eTpB.B_RY;O,mU^VrlIEA2!.'TOdK!dJ<=HFILXWG@S%X/NpAfDWSL%f'*rXXF5*F:*/`A%adMS(rP"KFC$5/e>+2!b]D.uIWT(J]eY#k),s&)*a/>I=adj@5h\GVWektEt-b\r'dc8d?EDi]gP-VXf\t:`YleQ[SDZ(\hU_?Cl%m`XQ'Fun61hTt'6R_:ni#G'R%Ki3<"]Cs7Tkk'7B-J#/=]_crrS^oG9]uWaZXXh""FYg#G6E*&WoquRi^AD_D\+*5fjuO$PSZY1`%<@]Mh?Han>bKVY^MDQ)9nBU%Tc>@WrQe:Qme_5f.:A6EN5&DQfMNZl,W%+^oB20Y&-[4I]*oC8\3f0E!m],[(:/<d72P6qs67H?E%43HfG^7Nd;g?e'bY<OOoSUOkVSkJ>_A28=TF]I[S9gS9FTmT*"17R(`rk[FZZeEI1`(n)Ab+GY3e1^c1I6O0NJ!SZbVd+ZLo.df)%KD!pC7AX4JFUGfY\+SX:<XOGLXbj7Yat@nlR-\ZZR:`SmqXq_@:?VMAk2>'NfcRED=2:*1moMR?Z2U7TRM)/T\oTT#o3U,)2lT_m%H?EgMg1e+H^&.F34'`7UKjKF_fI]m(^9]rcFM6EV$8:-dGIf\2?\kD"U>d1eF/RoBbF^!BSNWD@YdO$.H@]t#qF0A"\nLQHrsbNF%YOP@L%r8MGe)ep;kX`0X2G3F&;Q'BFamLd(MS8L]hd(?Kl\e-s<9Zd>^AEBMXS6uZ3n=)&F/O'73ghYc+-W=73$=F2:NeBU,sHfq%9RKgJ0B[[2:T%:E7ecCXdSlM6DdfBI0ic,h8J5Y$\n0ROP`!faaC]JYr^EimUo1>TIIM[.N'6iHJ#h1BeCAJ\o%Vpf-e8gBej$&p%m=!X?rq*@_r,bI)?7>3dc^V*ec`O8Hp!q[YPc$UX%[ZS3`Pe\"r\mhl;JdQXA%TmJ5F7<,:Ta@=NJmXJb0uD-Vq$i8f4.U)N9tN,%I@]XcCo"_W[;]-R^0E!Lh5be8=(_-YjJVlFTTO_JYNk^.cd.&)leNj=jluB/p>TT28Uc!brQmT?/FpCZ)#HL@iDXt#gK/l"V*%Fr%g,RP^-5UJO%:dYhIBPSTcqJocQh(*(qY0\oimZ?-caTf.'DlQ::HP,4X3ZK_^A`Ci#+q7ZT5,D##G3rHnS+U,l;XpX]+a)"CPbho%IkK'kPs.t@Uo/VXKBFbkF6d2r)St1/0=)a-I#m`MK[d$62>*H7Qa6;UYj/i4G*6VVp+.QQG!;i<$alb5'+:^&^otD^rA$*K1&Hjc%%ak<X:+Yg<JLu!;B_-#?/+#iWk'3Hn$[Q.5F'@&NNh3qIZU8'IYE+.An!5"qY%PSfS#h7SZP8[oSOm[Ej`"'V4&bON$=8.YU\Ol]%bg+N,eBqc.mt\M4AhVUpSb.@^VKSta)qI;IVq*s!P$7^;X.\3<Vrp9"3o-;[dlZC@m%!sDl=aIV\okI<rNTZ^AZ)"n;$;@ZGA8*n%L!fdCr@$1[mJHYHJki#+%o4SM6+8QO,IP31GA<Y?Vft2dh'ir=N-7k.6V=979nMhQS^qL"[8XHP2jNLSZ'%P=g*t`#-Y_dM#WcP_%,!+<BpT[k$(VnUpmcg4.M#Gr[>kJT`2.O:k;KMD:AKjXXcKj"j.3pKabeCI^q.VG#](#F1bksrB]?et;hl:AiD%gA(Apo]s4?*B^%mk'?V2'isNU%f2qQ,^[<R%FlGK6Wp#W!^$R7iMHlEdRIjk4VG1C'<@2/DW7#-2`#NG;'g@F,=Q@^iN@Ok;Id9=@q[&!jT5G=tbRn%5V`Q;[KpDt.NcD),HHXZqQUD.=nuTo9([\Q&90N0A-`)>C@eLXqGmlQ+hV`b*5^%rW4?6tW'B:.FJ-3"TOK#q4hP!*TF]$ia(qW=%J5i0spgS<0h:KJ6ViRUW:S'8S20EOjBmbV4G_G_:33+@M?nd*,g?Fs;61_Ri-g1a4+f)CB&H]<]k-C,7J,V?e>;2A:OHn5GBf`L8%8iasU5aLtVqTi;NapR@Ta&n_7g1k,4H>=qQVr<%QT]D4iJ)/AhHQ`c"1!t'Vd#*aQqIT=Ggjq]dW9>[p#0t5L\m#-jh=R2`P7b=8%o3N8FM-O2u4Qp@n6aD+@5;'f=f08!?d=^:I'&2YU3L`&dIHn_qmSH9/C,&3Njh&@-Ia:-@#)L]D>b)"m$I`*f<3u%-<68VAI,QBO%-3al,7DdP-CZUA*n_#T_k=Y?Mr'"krLSnj/oC<Ec`K)C]%5GV`B>13Vl-DQ@/;,Es5,5Atq'&==a\;ff7:NL%f318]GE'`#5<8Kk%S*Pln)kLCcAM+ea$iD118o5l<`O.mt1nA;/74/d6KG:4)FolM;-MQ"hg/tq)c`b:F,"c2@P6.0G8)*h$IS([B_T#9$'c*F)aBI$W%U[o+f&pX;LP::;=MOmPL`t##\'ZDoMArP*rm:K=tL=B+p2!"Qu3j6G*:W^6[^gBlJ,7DQ$1_:pV1.,+InDl:fTYLAJBcsMchTn99%W@"/IZ<+6YR5TP*"p^Q<q<+sAX"%CQngKLR:,hIkE"tuj)]Rj^AAK!`';rjuBR]_B#$0Os0G]q\,@W2Rd>#Z.LhmAadl,Ls(Sd#V%(:$P\Gj@>>Q/_]I:N(B+j9QX1a`?`c/(M9bPkkgTA6WImmYR"?Q$6HdpXbCq+WP'"c0_.FhHDADNUXlAa%h)m%r`b0b<G9/*^8`r%,G^90[2TC*1k*P$9j')T$kTk3&j[B\"nDX+[k6KjP<j"<!KfQ$=AlJ^.Ve#1ar&DOk9Whe`#[MunoL37acF<4m?q-r\.2Dg)V_pA%]/bQ>87<'K_^8;J.[5YhlAYk\Vm-fVrSATZ!.aUQ+4f=F*T,TAkIk\r(NL_5edH;J>k*c/,p/0?C#?Psl?J*l)"Kd'DIEF+*U?Dj%aa\4Z^XUBs*;!AN4G1%J?5?=ZH\@`=a>-7Nek9+Ur*8L*(`_Y)qWTkmf0)+)oI8)DBb?N0=9@-s;q]Nng@'G%&q+L4!sO=IiZ',p%:P&Hs.=(\B#rFB#2nX^)5?S;@l;PlE#]DhT;OZF^YD#kH9HrqU5/$*7d1ljRl1?G!O-(55WG%u3XuaJ=5gnXLJ=X&l9pCf.E\e>B%Lmlc%2-Gd)dQ;GI3f<i%.>KW0k$\#V]/S_Eg1(OeqO5nV9/qO8Q^t&ne>'b1:l95fo,.76-a!R/5j-=_-g3"_=2$O1Xfn:[oGdr_%A5i>"9^05^!5.Y`0/7nL2T0,2$Ocp50#a,Fm+B5?+lASsHRu2^AnU8$q_qn^B?/\QQd'YM8d6G$o(iInh\Td4mTUFN)m@,uQLaMQ%do^e+'cU(@Q-!$hA*^<CdONLFL<9n+nI9@`l:;Bc9s>s>m>T8?eB2>bAfm2X_mD4qh@'/V$&qAT#_u<POnD#gaN(Em98R6?>%+(H%jI!f0F5R419j@6]?fOd8,0mp`6tOI;/<l=qF'kZd,tPD,i?_Z2KEQO0$kf]>(gjDjDo!eXQG2Q-F_/i5,]$-nh,:8)Mf:d=.druT%8[LGGrlOXB/Lbj/m>N[F:<'X69'ol[/tK*pc/-PTO\[,XZ?6_HYRa@+#9?r.9X[fGgJWPW%1_mm>\m>?hMi%+p0=/ZVE30$QfMR9%PD$"ZJKIY26=[n==lTBZ0mimTr9f>"1]NpC@h_N[)^r5X?p:39);%^>O;eNF(lN3Cj=Lqm8tmWa^[aRmSTN.K29?M5'<&/ZUOH@W%E'_DpU>#,&./&(B82(")/f`-r6P!s_!qYO+?u61/j`)A@F^`4pJAt'=\Q!!lRT#tsZ*2'#ZkBe!f2:o381R"CNhjY.-JA,bXV=A0%gW?9$ZZVt+0TF1;D%ph(dtP:XHm-jjU6iU-05oR)KVLb)dY37T$u_^E[UGuc!W^i5<-L0N9&e"[L]ogI""_S7QEHIocr_oTb[Ka&%;s'aO6DgiD@]WSP4-M3I;a$k]S:$p9H4$a(nZhNBf+]YuGWT1NUgtf`9$Y7Z0u[*e:eTuNC+2$3S>qsZ],=@Ib0ID:J,_XFQTbkD%3LC1:nVslqCu6Z0QFA>#od?nG6Lut^l4#Z&b>#nW0pX2YS@10aSOoX<aS+B4`_oKhC3_7<o.<cAmSFWTZ'5?hXKZXJF86_W`..oA%JN&91oG9]\A`d[KSliN&I>jS6]+^+Ji`/k\?(j*H*4kJF]"X,s2s/IuB@*pX3dM9AFp;5Q[bri"FP.ORd;6Y.kKmdQckT15ae?o'%TSm@h^,^s$4+j\4)G^iKFp8uSmMJ;$?$8BRIMtQ`?$6EX3!qT:%UF5^SZp-=kKlXV,c>:B]d-b8R=!l@1P+-W$jBO4V"aA,B@+Zc%Q0XhXq,/B:DoA3SL[PK7#gFIU"[!e8Z^3e&NULgIIAbapGj<V\l/-25QSTLq5"?/1]#L)afYY_i,7A[6k$7oUPm?hPDPY;gEs@8]%T(t>g%$golJ'&a#7u'd,b9q)N(IDpYg"S;f!n@id6(%Dq2M:q+O(W<ipPpRI'+Hn-9[hhTFYb`)/\2U9\A4ce0;D!qA[5P2Z;'+I%)OTmbVQCt<BaKU;=P""oV?>WcCs((9@(ed8A'll1i3R=H7osN>Qqs<8q3Y)m2($YT[lB&2hEp93_nHHM;Nje08hh'+I!JX-#Q+4$%dTUh8*fGg!"pYY$qnj\gRn3oSDd0JmFOCj"PHqu;Y<ltFfL7IJS/<T60Djsbh#$GU2cFo;L\G$W6*'Y-[+4$eV\G4J9^/>Y491Y\%#Mu)a>k@,R%GCnK6lo\cqlG?m6fdbHb_\n=L.DfXB^E5d*m+gj5125cL1r3=<CXpZjT)Jq.#auUKa^+8+jo/(Z"W(Imdt@<lE,5>%p=L<)LqBd?$&jJd;ra/]q/UIhOk)c?E)JJ6^Sq&bJ@g/D;`UA8669dC0=75-m%p3aTl$;q^)s0X9Z'Kp>/K-30[hI1$)bqZEJF<k%7ac^VoG"dN]K[5Rkt?siZ;3nYkZig-kfC&7[^(rVnP;6gB1H^o]@Z/C*P"<]/!_uG137kSVGCupYXP1b,V>k:"M"Z7PF`AO1]q[%%`rMo5hQV]PO/:j82j9S6Zd\9<$Nkq%Ml6>":6YllL0ZDE(mGo)$;rDs):R8nMTB=YU^sBBZ81e;7:ZVi:=#%:QN:"^m#Esr;`>JS%dAPcd!Bse\Ls2=!1HG:a[8/e,1B&3L!4Uq_djPfrkZn;UcLg<f98LXl]0#S]Ta`*+8]VZhs1EK,E-SP^1/d"qT/TG3-7-ruL`*SK%5%emGi5Wo.an^*OXM=HTRP0/^(qacLO0SVg1QJ!D[1bEEa$:\9K;3BIisG"td#rRt7Q#4X1piP$iA\ltoZPEQY,r'6e&Pp%(XfSm%#NaJF\!JghL[%XkrHd.BFb,RrbS2,26%kEedLW;a;f]USHI28ql.EFe.%A?8Oi<3\0^sJ9ETG%-I[C.EnWEG%hK&VJnG.%F]:d38%%l_oHe_Kt>"*UW'.3FR\o#Me1-m()37*sH^JT&egMslC`bCAQsLJ'UN'H8!45$X+H!lg<4(Rg][QG,*:_^5(e.Eaah8U9V'>qB@,%b9in;HQlri%&_jGH1jZ"m?2]5n"5Q1?B7E$k>'*Lm:>SmcFq)QmDPOX@A*/X0kt@N*.)S"heu9H"$]n^SR_rCiqo8Mmq8q7_GVGP%Y[o3A7$u?9r?jVSCFg?##JJ"<#/+j>1nA\cjB*lNeh>A,OA6_#`W=t,@)MT&Z()"lm:<J154=cj)1`77XT0#pGh*>5PJ3W[I%"+$%2J[+[HGn%#e'Ps+opsZi,Fjh6Ycqr:.@oQsLGDcBN[#eAo$8./;PCAcAY`Z3)+-ln3baU!,IK8:[ufE<^5Q$)B-b#*aqr6DWlRG=%'&BHo1K*fd"!)QAPP=_^K4Gsj3p\1<4Afa:Atb7pQY-Lr7)$0s8;0^%@q/5e6[NY-Nh5GWhiJ232D=)bKc;IYR6).$35>$dWGo*u%Lorf=,H5X=;2)9Q_PP5lEr'FA5P'\_f_NW,M,2M.'#U7G+1K;9a*+*o-Ci3IEVA(<3<I:S=S*a,&T!j#DY0%Li>*6(g$$uW;Q_=9%N3*JTjjt<D$hof/\N'jl:5T<G7haC)L]Dkc>N6@<=dje]6)OVHig3sJk+*Qs0D.5Hl^]+J="@WmO(t@fh,sOG[J$d!l+"/[J,ElS%rH$hIDjuMYF1UY-?$a!6o]ftHD*eU(L>p=Q$-@)^CZ/ML9\?&(7%*E8me$E2*57<+J?:G*0@&%0h9Jp)cL>F02'^#!Y16;3e9Zn:%C4B#PFrQNOpS+R0MUuU@G)DW$hkfFDbsjMU@``MCVAAGRRK>r[:&CL$PMP_[bbqfV4(C/n_f!n<PZ'YD]Ub+=.@oIHHmN:;p+n;R%m4'X>D9>K>FS#+9DaC:Lp[OLY*qgLdSK;@8GCSd4[8W/sp%jL]S^f/QYX!XN\(SI?XXrS6VcT-c4m&)U:$(QnE[=56o?6N-4]%\'%k&VbbL^%26FFli]B'm,N\E,Vd_#dfbg#s>O/]S'nI&T7ZYu<ML\b%EL..P#7=6VtM#OEh_hWNjEY@G190'OFf`%tC_\k-e\-sYZ'%B5c(MC_o^dJ9/Z(qt`'$OW1O.DbQM=V2d4jhRB#%FU*LTn?.>t8C+Q+13/]7g[C3HcS+ZOkN+(.GKk=4h4R=-nC_o%NPc0k9paoG%"Au[KA^_sedNtLr1J0Q2;G8cq?Ui8:9?O(M+nK]0AaIp;p2A6RMkMGg><Sj"\tl2-Se*Z!2I2JET2-[BP>.CN:(u'@A'1ZAb,(#u%N/SpL/h,'Y4VquUflTfjp:u"q=#O@(3EK_7VG#(.Ms_T+7lFY9d\b\>CGoH28F_n'8'e&*R_M1'..]8c2I4c/-16L+.@[KTWI]7#%^EK(!h6n;92Vh1HHZM)NIoCTXg:4KRhMSSsZK[N7XMWVrl&lsXh!2.Vdj6kJ(je/HdV;A2*r(l(l&p)Oinj"bflTgMA'pR(EFdNE%jjM-@bNRW$8]Z_CQ8OtE\f@,CA&tN?b,*:kO)K+FE,DK'+U9]E^Y%?B'-h.AfL-/:$$UIO974l6/_IWOpO.0U+D"^mDn<,)e%3VU%Vh$e]7YoR7;ERa&4,77,Ns'42+@./.lT#i]IZST,Jm>e.%7O&a+S"l[m2YroH1@-+OWmH8ADjGTQ[9sF>Z$P1@I<md;cG%gCpVEC%b_<E+qF,TqjK'Y7Eu."&.\B9rr&&]_''<,Qp#3R8ggt#:j\)DmFXDA,ra^#rh1u10oElES27Y$R20X<iMP#X<mO'ldQuUMZSm8+,%ehqY,pMH:G^o:0SII1SE?.,*q3p5d>B5Di/CWi>k-,0rHU'*hfSf'PTk@H$m?4<K&J+%&k,2Ie8$3nuBNnDZBL.&V(H[cF61(;Vj%ETGA:6c<):fgN94)Z#@jEh45Y84N=9'-097._=]IU!hM=0O:gYL'naU]:k8*[i=UWS@bJTF7+c$Yd+#n3A9t5aF'KuGq"DM8NdQr%:`?L-\#I#rQUL5"b(8&79Qm=F$4l"H7?%aOXNe8+4e>dA+&O$;SD3cgfigH:WIWW'[5X>(QYuD)@p6%+i?@$BMTXi$\JQf;h"R7G%7%gqG)rEpjAarE^#'f.,H`0_p1>Oa(arB(EL8ZWCQEb_h:/,79LA/<@\Lnd=SGDqgDH(\Og4)`bRoZShS`0-";sppU4/2MPUPdrm%393Lj0a>`pA/K?@(N$@d^-m_?56E]?EjFXp2r"T4Q-"7*]nm3qDRb&j^"($UE0k!mdiEYmaF()6O6NOS!UQ$IVS'1p-)KF;2tX$]%O7r"b9?M>'jNoj@%CkkLTg+8hpkHDnVjcWmQ*DTXM<u5GhJ<,/g;`4(J6^_nrl!O1jE4qQ+GUUKaa>'q@dW9LV!Re`cai%YL5fdk%SIkniN$5GA>EKkqZ@0!omA-?^(Z&=/3YO8+NTob*q<\J.r=WBNrAhKW^kQJHa0e8.^82o&'/9T0,V`SI@_PlBM[`?ilH9IVkI-0.%-.R!")gO5?Lb$elKrOYh0jSp2^AH[`8kem$S&FCF.GQSd!2HIVJpAc^O>BeXH./.$)2?]4@a$OE?E3)f\g41^Gb/Xed_:WJF'LZL%mScnr83F5M:M<PK#TM\;j^#-"N5b7!Ht*-oRn=)a^;YikgV5I^E?Xpk_9oH5]^Cs*bE_`_=JD@!ShLo&HHsZQ%CfJBnu`alqNGW*%c"a/_VNs21n&q/J?7=@<H08OLhs-d*b*M_^;g"j_;lspgmGKnJitn\>8l&=R7!'l$&)54Ldm[.u>bQhmBbqX'h0iTn%$OR7+)_(q%bs>MGSp<P%qDck4bN*?R<dO1@GLF*/9'oUJ^2/0llEjCIHe?2<@e!3CAmKJek_;-XAr1ZAbOaOdllpo+ST/hfq]R9[DfR0^26HKH%;b]s&",mhD5CRheh)Q9E_i*?R(EMa/<p&;G(5]lIF8ss$^8,rKI^aTPS(;:0WDe*2S$W.j//>unIK*b4V,M"WEd;*+e'HNX80bko%eeA,22j&d(gc,,Poff2&'76imhj:sc=u9h%\XlW]]2jO2.2g`aIHnHA.5O`3SttbZ[S>'=l#O%5bhfi#mN9X#bnmeO\q64m6B[q'%oHu:_S,n`Qe50@XdLr$GNf@ageO;'4@oY>iRj4)<3$$n.Q=K3CDJ$GX%C`_p,69?Eo&SQ3dK]*c'`29Zd8N+rS8[6<;]B>ljrfb[%Um]"O\WNJ5QPRQ(ZVghQj2==U9?'/tFbZfDDerBXQ.p_FfB3O8q_F?k\akTX+8*:iQPhM[3]Cq-VoI8,p;`DWoV4U)<?<"2jll6>%+8%@YgB_klZt)>\\^k\X/B@LFf#Mb9/`m&qbnh>_[:!M/]<q.Ia'tN-Y-iF8CUPt.Rm#oH''<AE*LDhW,9340)!n*eRH)hN4P/1R%OL:F(fMthjN\HcAXULa/&_TFR3V_*X\36#?M;N2_.*(9Zadh5G4&^/IP5U3/EtHR`coG-ZN42>7<eAhns"_:99KhP]LG^+WWGeEW%#cW>OH(UJH)*@"24V_q3q2=<:9Wss=Nf=lNb;$[p;I`?[i/2-uAi)F8o&!k02Xl0fr.EM=M(sFK(c,&/lUr&^[giLhGtSo\hAj?+%Np\hOLuiS=jf'/49aj]WcBSKfZiB_M_"di(jT($YW4jD_0KY&bDdD^h=b&5)8bFe7pVE`OcmUj<0ui(="W3YjN#]XI*33%\N,k\"%a@C\H(190od9&tV]oq@=)cb+.)Z!@GTl+Cfo;-i^gTpgV0',``.ZFC*^;2b6NT3o#p5u8nK;[3lq.M'o\/XqoE%,-l'Q3i8nn$[=%4LRoYo%m_6_PMXBVud%.CL!_:F`<Ko2)s\u^N#bQL%kG'-'N+\B1%Z%Y?uBbn\h:`m']X$f.T38P`TDJVL/8N<#N<un#^4i`UEKC%NXDV/i^;SgQSLqf<kl#JTn^840,GpqI'6oNcB(l`C8?4TEb'3MiEeaoj@TgCqYFdAHi:7*epi22g[=aX^=D[H2h31/l^'c-j;k8<%hs6Ug:"cG5^YrM6llB^fB0f%mP;iFg2>JY2oo4's?ac](<Ltr#l^*%#hiK3^V;CO)mHUS8Jfabp^SG.6_6&/2ho@[1SG2sUqIR-&%ZTj1krN[5=69DbK]%8SsEAesbohG2W,ql4<>Q&$?1VENi^]&(hiEQ9A5,C39Vhf]uZ@uF)VRt]2Y@$9MNGh.fQSeQPIb>[CUD^%L%^Xk-%^X[P/?f*kFDnO[T)hIQL[ScMdbN-&EUuZONl^,:G4N)Yq,Fma*]oR+(]SGQPrJ&Y\8A<\/H\j_1\*\//qINn%SF\r@]meYD%qMcjQD:&9@6>8RVqIQiha*/-.oj5E">Q%%$O)KhK)Hlh)NI7+RJ#hI/mc,8M9BS:JU&SH6@BSUJ8XRonp$58ZLtq:YB+0cEYFeTs%M7<>p,qEhW1FJI-L:l+kbKRNp"9/:%me%MhhWs*HrUT'`Nd@n$hb)2+dGK,Nhf*qF'(5F>HSW6`X'aq:jRB1tcoFm)\,'[+E]2F\%IOT;2QiVV=m#Cc9AT)\UM^c@0?GEl>3+EN>o&i+ecfF-/Omhr^cEDW]]m^R0eT\(O.(]`%p\JH"6m63)GL4$PfnQ38OuVI7Ib>%4%JOU^J?GGi2r=\J%2r3edAH]7I1QHh\o%Gdmh<PlJanVueRG"u8h!:</*!Tqnk.]G#><)s^$(!-bIHk7ma8hY$6N<(,fXXoVPl%u/%H9W+tV,b`=G0\rh+&,suaY@;a.(X`r5/R"Lcf's%$"j3(&5!Ut.8Wc!fH&j8KGe231DdC$'8oN4HY%WWSW]7]]:Fu5X\?spFZqH1%QBpFo?h_d%C!Ckj\!PgPNTmRBj3Fc49RWD#f^@!Z<4o!&an$V*o$m3]GI>k/lZdWbH2k0P-s=U&J$/.YgYKL7a.N8'43_9eh7qbA%F*aq%m//oYs8;A.ZFR@:H?utZ4*,OESY,k/DZ2hE5+MZBlXg(MHEU7.Ssf"goVm\hG-ek];PrkHb^S<[3LtBWpL[J+9Khhgn!@4c%:1nG>E+884k2(d"EUYgbiPnu$4CrA0n\0DDPg+F>I:`"Xs1Zs-=Bk.)hQK[uV\f'1ESqKSdrP+WI=B/g^VD:dTX6YSIVN54\p'e'%+]f^A'*XPd(WnC:mIk;P]ZRCd;H^O:Y(5S["K+3X*$liq8MuOs:Stp&m]<n!rJ@`T47c$RjcR:V/5OO(0:a+Y3?OhN8r(HVT;I)Z%Dm(#Gq`S`O:C`(m\u[R=]C14O=j26K8T/rqU@[jp-lE[XO$L)mFJA\4%C=C,dShF"MWTSJ[r)=9$a`\H%r:l\!=5U*)>10PInnU^%H?6L:Q?@7&n!Z`fI&klNJ"7u,P]g9Aq>>;8f%\iRO_Piuo6"Y\>#e_]r&TJfB'*k:V,qSICO99fs&f8&-rh?-9.E\3X+'[8a&SGN%*Z)5bXkO"jWUXU5Fo2sALfhU)6"-q'+8*%*aYG_(Ac')REe]f)e!Qu(J?ec*r*5hkT6+hsd2sc=Vfnr2`T@5Me#,BYr97M3?L0)T%I]VG/J(U=U!8KYE5So[9:]J79pd)<0m6ACW_kBRJlE1)b*.Dk9o#lNUKH;[>D;WMAqm/+WF`Vc4iKqefj[+g)DuM0Bpl?1Xm;0Kf%.p05*<._Za@)C?u\n17QH0oD&p@XK0htH5YY&aK8i[Gn?(IS%1$A`6tmt^^Dk"7R5<PtF9*?23=C`UkudHo,e$^KK]Aa/!>?eRSj%eD]YY"a[2n>0B*5^6E1^b3Y@fBMZ[FqLUg+A,V%#3Y`u5R?#B1B$>U]H(E=K;QS9_Ga_W!c)OG*\f^*25'3mV'4\ddJ%qO_?Yi*!%rH::H./Ed-X$!k8]9Sqj?[i95VTlj35"[)J>mR<&X)4u3:&("<>cW;-<g`u'2[:[X"%o^ZSS4bip#64]]iLbB>`!CQSV^(.gr.aP%F_pSPRBfi"X!_lGl.rDl,LQ52fe]8g^1h!odscbUrTug)k3JpX><%r7crbaGSZ&99q1-L$+)O-*n)c*T2nsNO451Fh6-r)`7lscM%B\iR,)+7@VDs4%LmAB7Bq\!uJHgS`oB_D*A/kkf;ep-]Ml([&!F!V#bTi=%NIeiE^SgJA*7pdmHldq'\?NXM`Q$Upk#Ik;F^)gTU%e\eJBkIu:nZ&+23he*T1Va'G[$[ZMj'8t/Qe\q+'QSs4qgmM9Gkfnt[-Y!tcp#uSr^q18$J)5<EhUt4`_[$6<9CH"[$LZ_cYqlUt%EfMl/f:F&0@AO.MKdQ>G(QKt34FXCk=J@Yl=#g(]1W6fe%,k&c>BAR7*aGPl(,+f90!6aMF`#I@Vi,#N)O+:GkTuc+#2.do-^gF[%;Y&BIF'Cp\qQl!#aaf_`Ztdg8q0<JDh9=(uM1!goX33>Y),LLG(Bh%TYWImYBP3I(#tW79g8C!K"Y+k1T:<Qi8b]U^1thHZEYE)A%#RQ2t)>StU\@FeaCqiKL7go!ol&dlk(!9s+G=aNmGLhGg`9op%#&WB/]p-B7-JFJn<6>q+INH5%g5JshDj874NioIT?TG:H$?KnB%-=Slb>,IK3G1a!ol<<l([1O62</)bAm)^T'Q=<R1?EXn>JBd/f1?lOQVL8dh$%1Lr`5KeYSq_XB6TaiaP/!'dV/^r$DSg4:YpLgi%m>IWgj(Mmd$RRq)^i#jF2Qb4fDqIV<1SE7c']b'Q;:bLu-d!JXkAc!WkmO3>n;..`3G_nOX+:RW.*\lDSSO>cKOu#uemZ2j<bNqS%pcs[>pXh]qi!10fPJY+_3n["W-h5#uJ/7kRB&pVoh:hbs+Gi0+@f96*/gA:prtZHTdEA=sC*=+$?(^l;mKamP1*:&>otqf^_0a!G%ResXRNd`!R+<CQ$\P'1k!fre3[P],3+jFc5P2(I%i1t:tBE[a"Vd^Ro13n8h'>^U(^MP0NYP@6kVW@Q6g>1r5:#CC52[=]o:"1gt%kOQK?>a`qA?1#^-]Es>^`'OPc01.Z!!dAW4<(:e6Q_&7b'AoSXAcec@P2QgXej$\kX2SKEMRR"7,Tk_Aohls/Z/hUGR=O@_XkN<Q%hc211O$/EZJ0"Z3+QNC30B0!VPk1&o%/>%.$dGj!PPS>CWp0iJp39Y?;SO3[V$]D8!PN]d$K"VYO=?0qs#=.n]4]97mO?:PH&7!E%Nh6p@IQ)8ea4@=gn'cc*j`tWJr*5gr,kWd=mM_gN?RO#[10Cdt:uHnf"l8!U"e_piD"&Q0K%6.^d"B>;F[\Km/d;inNGg1[J_o9j%$EN_.G89r!Ja,Jp+c^Ho>aYuB_EDg<(IAX!4`>5).AF=+#:sgScT;&Pp\-1#3`;(t(VtlsJ=hV_6/,JJ"pSW[H%pB*X3D*:8Jl)\%-mD#B2cMe>6AifGnVsk>;c%G-dQ9QO98==pn+ZnZhgKm-:ZnF(1?c^Kh#K/oAM68ViiR-W[ACm`pWIc_knEMqh>#g(?_hi+RpASn%MqY<AJ@;K2c,LYRP]AT2is+$"lmLu&lYLn5e'0PRmG!m462'JSWhe]/>0+=DICa_0^6nDL)MX<+7[VQ*&'-/'&GEs5acc-?YKmpU%H?X]O^4D']2Y$GND:RGH?+G(5d,h`@K?!J"5tpk0&[f,>!D*!2[Ns^Y]MR[u*s(2'CX[(2Wrea1><VW:a+Smfgn)2D-%@J,cPC4k%IDaI'&'Z3&^T.$oGHgVu]Q6E:+55uoT]#nT+1t>^6kju\JYd]\P`0/%qk9sXlM:p:CT-gYD;\jZ#W&p`gZX:0m%&HDZ`>27e&BEl%n)n$!p#jg7dF`di#D&)(F-\=ATbWI@bXn/^pdJ.rr'?HchLT)P#gEd()co2[Q'fS@Zp,t+8.s1AhFC'],b!$5*6Q[+f-e:j3)$`m%5iQ/Jrq^V]l/A^FAuG0-@<nH'D@d]Y:Itq"qV(35:8&@h0KqN0Bs9<P7Pk;n9S0p`+T.65(!!T^rhk1U<W2_q\ICqD]WnM&0>^lE%;8^eJNB\1PpY>jr%!2FCn6E6AMO7`^>[5jIgjUDd`?GZ]ol'P<[MD"_A,"ME9PJ;08/FI*jo8R;fT*#!c(\^I)Z3`!H@9OO%QY,E%&$=hXiBq%QZE:,SXkU;9Bf<^_s6eFk2m:QP<j0#<>cJcF\$mBaf">_S2N*glDZ7"1p*)jRBNJ"$JB?-oW;U`q+1L)IXYae-Pk3G8%IlscMXe=9m"Khq']cSV6pV48s/jI.HT>/M^o<6?XkVLg;(6q%B#VS&1913WFZ_"p[>l<iomB=*A)iJ$s8mYf6Xt76PIp1`L];s6.%a00'XrQR=(G:pWZFD)d#G\R$O=!VtF[laM/?RjXFK'$&\(1u06'+7mN4/$tY'n$IlOs%7]33Lq=GK<qt'Nud7f9gluAAL(8EmF1c%>g4EI=qpD8H.g0/Ib51A:OJX?f`V6R>h&eODue-H'i`?j/h$TM0)=qd-*YtDL*V7Y-=eFt/j25e+n!2IYC*Pa]nFU\OGJnkot^,_%ecR6,=UCei2j_W%Rgo*#r]O89?H=)loaPefJ6"qn8V__BQ=66f$L72-Tt30Y1m2uiQ#p-!-Zq)\`SpNb^C_5_!h!$uGKWql3]QHB%cQ`Vl<>@]8n`LcK$iJF^4&299.aQ7&kr-fII+Z"j5:DFrL/TUBW>MS!o:r.Xp'RY*[s4X#\FO0A\QV"=s5@V`hVNOWI&XKeZI,mr%1%tbuR:DjJB7A@uMsce\cg^j=mk090"4hqQ7qFRdlBen]rmmH!AQ'b.LS7$-:#A9gInn^M^58i&^,+FP@(Z""Ul;1D$FAkkm`2'*%kn_1fjC:ObR/j/gr'cOa4$tKXDe:C[\p!(M%5tqt,8Qgl09aej+RsUKA!e0](JD+N!cV6'pfm^fdl`*f_;2`PWD"q`KV>Zb4`<L6%I[.KO$DmEVCM-+Jk=g.;gR4\@LrluaN_-G`)r$uT@Am2,<.+pAgH;OM]7$d``kHqK[oMm%I(V5,Y1MD#cM,d.c^d+2-E\Ecb>VmC%LrIc>B>Lo>8o0qQ-9i(sbkm1NU!!S)Ii3t"9LpT.E_P*dVTMXaI&qi.2XNM23,2,.)o=73T(sT>4EGq5cKRa#ko5=H:HR";Y_Cs>%DU_,7cFR@Ieh?t-l?e"hTrK_=h_1]!0H4==EdMI;mGJ1[$1`:K-\+QQd8H2ZO)-0pr32Za`?a>AM+Pl5nd2gG3:<tfT$0/.\7Af4%(d=F5#3pa;Z3YtUXipJi#YL8k@=O95--4-N8:'?)\:bln_9."UjEM\lI6alRZ<EZlQken7XaAb<Y11%hi?f<]lEM\uX&Eg,:fMSW%4kF1@e]Gq`[7q!E@4s.u\QE+E46_$eTF%GTBeIAn3'04'Cs'Q[_b>`Q^]NGU5GGf>q#U*q/p*be>$Je-52JapAYAcnb?XbSH_hC4%9-JE-MdTjZ.oITg0JAgpUm.Mq"nqXnIe4-7e(BU$e16j:G[@\.S`^A464BK$m%:%7FnDd6#]5S-L",s/9VDX5q0^"R3Y[?:SNjub%:-_i>U.I:RbKt:''T-Ve$n\AGW:G`&Q:@AMOU1$gO+1%00JBUo=1"WWRHpiIbHrVEO?*Z%i"2X9Kd8($JRL:@JO1eu'BN(fad_4R%PU9G<8660Za`&CERhpiG-a`(>T=r1ITVb*?&$f$SU6l*9k_eV0*!!]ONRV1$$\?gU590A;T1s2`BV"fK0?TCr4Et5S:qK&Is"aMd%OJ-iO&<4A7?cZ'U6F`@@ljF\G=%FLC01;;U\M%Kl>p7_@>P<d3gD(pVKgI5."%VL>OR*aHg5FW<K6Dm[EA'jBgll5,a;al*d'h6t%]0Y;`(Bj]Z+a/LNEA*.#&s7As8GZX(P`3H(3M_:AZ!%7t+U=6EV'C$5(66Jhj1Gf?r93\ic,8W$H[h$P.ijF$YJuDF"qX;kI/)\,%%.2rQ`%P=&JZj[6T#)'WglmVnN0MFW6pCXj!Li)>\h,3/]gj?`k`EF,5B5r,@F&]Q7=`%^^;/S0bK/4NIre"WE4o3c\NqIQGXE=#%knXlWPrTa+MlY2?N?;[jm>KdA+Jb<VO:n-Y;oDHiO$[\^>bCuEpA_[,peWAIW:R%G\daET$`+K#*&i5J03H''g1]>+[!!Dg1cklK%aT!^Y++Dp];:V22Asuhp@.EZ-@A\M0Cc..9CiQpa-s\E)3ka7b:%+e3C39G(/n<;^hX8L/XghWs\lV`&6ZE=G;6HQM4IX7Il4nho%<D\Pfq#B\fL"F2s.ssE,&--:ZL(Cum=AT,g;!B(snHlr-L8'.u7)ck!`HS/'M[^X@1sIYBQK&Yg9eG\2@MYS'AX66F%*O7M\F;r=%MMA0t>tp+E\P?:M1c6\l.Hn?K<`M4\9=LFsmHST9;G\S7KD/oEmV$1fL.;--FAjVmY+Z+!q'@s'+0)!"K\ULFIsa2/?\#6sN7'8H%\uA+g0$89+/Sh6G_T8EX9eYdd;mn55"G\D@@68$pGCqrfXcsjN<eFHNP45FK1(25UQo_u*_pur5WEWd^M\7!e6PNMj#9k,P*uYW8%mR342Xe6VFfi8ccTt"[O2,kF*DErh81h\:\feO!VOBP\-`T7`W,R>Cu4'*tXU,p7CbrUB2AS,(bTaY]cNX5m9T]0]c@&f(n-!JuD%*K+6FbCD;59n@1&CtpTm3].&rWes)Qi0^Z5F_oT:+u<[&.Nm>cbDq0"KdET'eQo6BW%,6O_L"2,fJ%clV#JlLA]%WS9J^Mg'09/.%Y%8K^7ITIfE%[G)Y/:.:AXlA+gTheXgpSMb>_bV5VTo)*/gEe<gDUP/b&#*`*#N8;iheTV[]$uaODJ0k#m"D>6m]XTC*Ek`ZD&3@%NE11<PAjtBM<"B%?j`hnPdqQMP)c@%&E5OsEX94UTej7p_f<U/(m`!4fd=B:,rT3697WV4`7.3(L'(Nn;l:im!)1RZR;u;t$7J`$%E=#6A`@!?!>M&X-#@8&\E+#9:2oj;P8Z(c.$0V_ZODD_k@(*R(7AhRg!F1>P<(r!]l)nbUJJ#=b_B6rF,%fXgapui;U=.JH!2.8!%/-Fi27I&YIP#@Rd92eQ&gZCOZ+r@/sF_T\@LG30=Na5`!AN;77B':jCPAXP.Pn<1hM5<1:@c6<$PXOG3-KYWu7E)6F2*d[@1>EX;%*%3P'S[^oS*mCf>#fSN[)BHW!ipq='A-U(`[M7e6,/lVJ5_hadJ.kg#*CPW7kZ$)T&tq,rjrKurR_k#bCG8W\^'t3X,&itSZIkiP%_dFTe7nf*UeEe;KW`F:ZgEj[L/,1%(&_BLp!@Wff!@bh`MN+:=$Bp2+ZNHl9Yt,nnH^_r"?i]du$WL`be6*n!Te-]kgJs[)8R,\\%@NmnF-u0Pr]LP=Sie7tCj//q7n`kjE;2L$BJ\&(-H4/rS'llQ@;!R%6.g?Y:0slZZ>-f)==#'M6'a1\_JjD=,8<V[fEL7&W.V]H4%[UEkq#W7ll<<N0G6ULn>d82VZ0QjhA,$][BBb!Z<TMu#tm&I'XDo%Mle:&mm.O#AV<](?IJ-psIBa?Va%%o2N`'P'R5WYi-Z-:`5%RtbBTHDJIZ/HNr3[LGm&`6i[[5R4qN%V*qkZ&T/NVU;,sUiEmq54Le#d]PrKWaVArbLY'5:gf_CZp::E#rLkH,(.XdEOr6B8;HFP%gIO82#rRCCK[bPV/k]eQ5mGCi.WR)U+-r9(]`l+'aE!r`Lu,B>7S^-)b_<"W$l:b`D?5SqZ)O2.e#QuJ/kK3\"=D/8#Y[fN3ZnMa%?]5I?&24=@!eu]%"%u*L9ac(p)@GD#eVV(-2hFRe4M`#!VUXR_lC_Td6-L7'!\?XnD.kW*aE71uatV`uTH!ZXgkJb)_k\.g9WO($%)VR)c`%TaQ]&ra"ko/8NJ-O'QpJARB?r\W_8oAIdZ#hIH^P$#D"-J6`*`AVJ0Mja/8;U)t_@dg!"2;f1+Sr@eFAPo75U-CYW+t'P%!<f0</2T(I_89#>BnDJBJEom?)Cf$[)Ang9+=TVp&1E&=!30]W_RMmRTb)fnC^\Vl;HVCBdSV.='F.JD)?j`r+=k:4*NitBQEV!D%SI0&Y:dBW:[Pb5KC8;Gq5f\Vp&g0b=VAMi@THllS)j7p;#4K0'bHYb4+@e:'?"a7@i]R_f:<7Fu7Fjsj=^uT4S84e+Z@rTs)V>J>%!_'m1+rd=$P^ud7jH(FjBJs/Id6SL-/,Yi1"$r[p,psUb-?]kY-=Sa;ZAQFBa]U%BDoe4iEs2m!<QLI/Wj##V$(;<>:_a_76*+Ks%Ctu#r,>)2hYS<6q0FnLoH$uQ*<ESlqQP:rA4(JCLC(5\3M,?^9Z<RGIoUeM+!%'0<b>;=>,FnoKlXJKl$kX3YR8cuja?q7_K^fs[%,"P<p;bXo<fL3$lZ)P!FUmij"i)%LJ6j(NWBM-*3@S=LGCCnZo;WMB<J\>H!2\oT0BOqd!%.nasFTfS`o,5]$[hZ'A+fcFaEjW^%%@@>1m3!GbD4Ob)oL&mc?Y4I"5OJp)T<BK!,+?/^`_7;Ldp+:/eZ)JAgJnRfn5W%IM_tCPIajL5rBn2u@g'V%%V?.u$9U-&MSJW:0%_Z[JD!G/4R2I,6X[&cuJdm22ZW@]-'aohdRFT,"Oe-,/K$HpHi]oV0t["TG!m5X;JJAhKk:7MM^9MV`^G,Z];+!;/\**@_t=?[)"%"R=#AP/T:8K1]+4D'*d[WHEG6jU[1gK"sW!6PCdcQ+/`7&!Wc1J45KQ[M'@RTSBs"1orr%K<.<AAg3GEKSM<*<&$Kj6o@e+/s:dB%rW[DTB!A\(BQ6j1F*B*"NlJ1gJePjY.%%7F%0a'('MG88+C??o!Yg1W)_"^I?a(hq:ha6dTJS9@`([_!,mVZdA!.:][59ml)Tf5T%!Yp8oiZd_#onT@Gr=QH3Z#a6-Q74^B2-\$CUMFYV<!eErS_:n<cj`rNFZLd@'bh5BXR&OKU%TUY#e_SU9lXWnoZ/0&/CZ?r"uXA[%fKZ$k1^up52A0-#.,mLqW2<",P[`QI</^,lnE=-ldNnK:f#Cg$C$>>l(/&!c;-f?%(2L#kZI2uHjgI_7@>X6[(747%\C>=IYgLs.%istk#%*H)u0nPR0WhnC/kRaT1/sfH)L<:L"hc)Hcd*k$DHWJ\,6PD%uZqGu5\3n5eT$_doq[ST#nJY:<l4l.,#VBHTC1oDuH=1jk%-&TV6)5&9(ZdGFY9:9l-fO/67@FI8AfXeF:*MR,)@MC4KnL^<)"rl!1d40:c#.1p/74uL0%!8sX%T+?Q!h-okE_M18D6bCsN+<Ot%hZspX%>c*I[5BeZ_;PI)PT9clE>Sp!aqh,`I[!K"6(*I^/!b`#(M*Rkf@(-R4Y1SpG4*H]_]Dh4Z,tC5AbuI]_4J:A1Ems<)5K#q%;^qmoTo5QG#R*]1V4mF0&I-b7Ld8jD_5sSo3,BXJ!"ETmF*5s-Gm4N%+>e^dU)-V)QH%Li-:,%"_EdQM$GU4g-C6]\7e&\J>ljS/%TSs31Z)-?N1-&a!@u6ik=k4"H?RFtk>_7?PcF"(?b7r\D[2:AmA"]/`#rCqnTjGRN.(Zjq.mb)/#2g]@)208VSnS2@7aUB_SWjrK%(olgM71=9].'^ubQ]b]U$1._NL0hPdi_-1p-D%"uKB+#C"VJUZU.`*K\ADkHQi^+F;AqI2cG<BuTLp@V8,E5+WiedQ*1'BCA7rm3%Ql*mE4!bZo<)nU.Cl<(k@nuK,KOe/_:lJtrXqV=%X]2/Y>Y@'6d#A3lQ<Q:RM^_u[8G[oAA>gK76h^oq"K##dZ%!$/S,!Ac,rcS%%l<4l]1>'>NQ0:p.2hb'G9I3TFWsEeK*'j-b?T.1?Q&&c_`jUU61C"pgQ%_2d=;Y4Mo_J_>7YTce"feQdU4u)?$@^q8N?^*:m07Kc%1@UrZJqoGJd21WTjTbo+LP$m&Zn697U.nAP(u(q`#$]R7&gAZ\3KXY&I!%dj%VD$GANIdXJ14&?@Ypu?H\r(i+VCIS;.\Ih\Mmg1%.7-jMPZU7\AL)O6MI78%Of:/uqMNi]I'HPE@0tSK-C%EG_T%rmH@rZN'TB`!!`BJ)7_F@n1Re_b5.J[qD,Xhtb;==sY`'bm=9?Xp%U(YF"&H\/m&<qd@-#]'kCn&Ua#O.^Mclg:?':!a:7&N"lUs-1XH.X5/+aa;oAI)7.Zjlkaha8J*ULO"[L]p;$7N[pEY0DbWD1Wb&%C#k@h1^GZ],10n>gE^]V(0#B!#U6WUDb(_5[_].Mgm`q[0#kd",/_3P'h_tE!Ne^U%'^:`9-hK>%WSY@`B[DTm(<[#7J`c'"3gi_%@knD;!O.AOL(d]A3mTb)UD.h5ON]\EVR-1f[P0,\k8/r)i_:Ro`hU>n#KPfB-Qi_Ug/07dQR\H9e%f%YaJk(.GGu#3T["-M[-9CW%:YI'1i'h7'$cD]]79+G)R!gh*R19ee\h8!+K>`T:L8%23&tO.Nb84#fJA%qfeODk692([AXGWs?Me`^3+fmh86'uKH:^K=]&q1A`%/fJ)%i`K+$(a>bNO[BrPEfGdNC[t]2q@'Yeq&Kj%+=a[%h%1D8'%\r\@0"b[&sarCO'Sa&^uaQ9?s/2Y7G!u?cIM_RN5]7M+IP&b%'T%nsBhg3%Fbuf8Kp7p+MQ5*/":59r2);g`M!/@57#*/l0XscL>Xp>>hGBT,Qab?.co$i$JlAZ^!>rUF*4Ib%^nA-T:u)RL2jrNb%S5AKB;h;m$Aq^SBQ5/IAIS5pa&cqP47R.]Tg!hcVISXB!!L89\C^t'X%PEIf\dUnEW;(L4U553o7=d/B:j]a1)3jNO!MkmZCkM><%!eQD!E_C7kC_RWd,Z_.f69e(p0,1%pVHdX['IQ^Hb9Aje)dNRIYV-f+%#cbWSULu.;#_f+1faob@ae5VN=-AnMTo09bb0Nf!!jaq%2O#UHH:'0QTRb\mV@YAcclU1.<?XIC*6+`d*=3TUa=u],*(NOtPE[j'64l4WBF5*l:l19n2hdo`j:Y![/-5.`lbb\<fJHeuB[!0f%MITT4"ER/oBIn(9%@o'Z)i(QS_E$j5#G!GU,n'&_?3*RPMTZVJ`We+L!n9qA1!RRC#anW$[]/eD!2W8Y!([h>l-7X1@)oZGjA?4l%N[+nL`N]gua!#=u%$udg;E<eEeVMb"$f%+B0T[^&r`EO&22Rp#AT1<C!EW7T&qdGoj8Z7K>]uo9P2lHCs#]kM!GXnDm[#5&+9;NI%8.,_:=$i\3)@Bls#X(N]H@$\0bi<57ASXeV6-SegR<;804j;,%4QV_S<kYb"L==i,bA=<SST`-bY#d3_a"W;1ojm4;X4.GZ#S\H$%;Wk=*qKm&IRS]3llM>kZIcNLCZprEXM7fR5.JPV*>>^E/s(_*^pmi+GlkmR:%ctE2R>5Gd6$Cl[J.9u>0]B1MjpZQahdD>UY6Xp^%+i05?]!3qh\s':C[;mL!;6DSn+JWm^<KaY+`L&-uHYo$aTZ!6G\a=/KOj)e$pkSJ\qF)t9F!raS+=8#V#O^*L#$`nX@*W][Mq@EV%W]>7ql:Uos'j9@*kFH(>%jg\^gZ:!(J'[^fRgnC\IrCYd'TSe`T+[A=rkpYh'`m_;R8=#WgeV<EZ3tJFloLjmk_'AF0+^rc-SjYL%/W7s%F=%j3ZI('881],RH9B"A[4?8S!.qqO2?SpLIQWP#f,8Cj(lik\LLh/X^Y\W[;qi18nee$?U.[tO^]NBs6OnE<?PEtRlm\==%LBjSp@[!L@2%`Hg'Z1?<-4l4jao\/Z)ES:0>'M!MdlIp,2bi0YF?u$Q[n5g>DG1q*:ba%B%YDpu.o[Ko_B.!!C'o[6Q!(OqT#pT+%"'9d//:uSIEM;K<Kjmk[K1S`]$"t%hLVi@KE[V>_:EXPs9V-^UEfK2Q?4ieW[a')4a.EaHB%<C^,G=]5I)Egb9`cgV#ri3!_?<>)%Z8)nT%mVR9d)hD<1_:5_3h7qQ/o^fgC)RM^=I-\F;J%3o@T4gjELJ!Si^'aC@M2O?g]mu'i.8&Y][T%1qQ.,QYp\.^=[]E43e5Su%=l+U_2gPGn5EH1cXiX9dVZ'*!T)%u5(9*iM&7Dma?FI#D[1a_T*pPt,E+9d=I,f!0>_ccupd9n/6Q]LSi.kupXW$5>B[p"jR/^CS%IcjY/21LJc`Usffa*PhfZi<kuPc_S:AE&ItVGK/jUEAb@`3MW)_*]OkHd85WBS#0X2Nu76qeP%IqOZg5\$^2@C&.Y.pRbc];RD]%%,H)>/k#W332=T,CVE(HKKZleWMBYO;oIr_'Q^3qHc@0Ng*o9&G[KAtB1oR7lr:F0>]+Iq9-]*]hmXBEBLQ+P>3V!ho+8SNumb9`I%?[juQ;7a`*</0KC8ZR&raP&fj_sZ;3r5OkDNee-X#XZi'"KTNhf0R.#Ie9Q_]N^4$?,'+rH*mXSU<'apH2ejJrH:p!:0V'%fSI:l%rPq>X(OsMoYI]5em<^c`:^;g]o-?s#3fT#8K\M-.]370O0:pcJ5@EkZ%Rgn4+H[dZ7o4e3cr)UelX-5/:ASVb"$/WSG%b:*Gnb<$%:d_(V87P7Ur`2G";!0$c=g=6EOYgcRKJJqHX"urW\FoSWAD$QSWtqb+i5??r*VS26%!.u[1nfWt6QU_t_VnlI*nFet<$%caZ.+nM%En1nl3rEJc(RP`b9CFI27iV=`RlRkYFN?(2Be`)8/L?+ZZ;7e6HCl_f:^Wt"@q-=_In7DE:lQ3.&gljX4)Fq#k12e89M6/MP(4s7%Dd(W;>>2W.DA!P.76jpJ0Tm\0<_0\G<(u;#H4A_)KY="kH:%KHTYpGS^_Tb:qGEBVT`C!\Tt&d`HR&a9*N#pI4:)Ld_)7$^Iq^YU%S.:)@M?mN0B>Ta`r\jjWgK?q@X'2us_;k-UGUB#QQ.>#b%M__7J$iKVU7%J6>Q@k41D]g(m<O";jZdse-VX[h:0-'k;"ReX-.u4(%3F?J+cE7DXkQ;iYoJfpf.YrKN56PWaCiNJg6D3$HF/42HO\!24XcLhBB`tljg;nrShh_EI)L<Mbb1bn18M#c2l\m0*Qk?cG$'%J[%=0n3M?*:I8,>(;H-7DCF(Mp2cLaii.8REd@F&0MoATYpI/7t%PVtk+i!8X=P.`GTV^BR<Z%:g$;/\"K9A3Wr^LTW3b5.%WqHLBU]%fmVpH=+J*YDV#"!&Y)mLhKC9QU0guS2c`l=1X0]:'#j_3R'n9BPd@]>?;1m4NBe_6Sse<!5\?i[gNsZ5MRJW?-50X3Wpi06F/(iA%?4laC*`WrJUScC58_DFr"[T-`L\csW3E`--X9_t6g_>Z*HE[<h"km8jUNE1.F/-TJB+OWY0*oX'>)in,3Xu=`G\Iq90?r+:@>;L)%\(D#pb"AY-Q15IF3:YG41jd?qA4idWAljj;^)\r*@N7e<W3WW9eM'K>m?Z5d-2:50e&&u#G$*U;Y5'i7W1A>7*H_K'A2Z]FT4TL?%:`&A@N<JL%?*5cKhn!9$K8UFI3D15UhMWbR<]S):+9catrH^T)2L;c=!H9=2-)T02pP/+:HYU5sFYIQX.V\D:+P<#F`TG03E&*7/%VgVg_(<OQ`Fg9Hm-!F6()%q_nD,*l[Z4Ru627M'IBE(X$-#Li)R/h$e#l^V)AL!9D10L8%<Z<@'3?.0\CIQ/iU(5Qcid1J:hGE'`%-@boCqb@PF'=ej(GO_@U,"8CLW?Z#a,&?gq"<CtKi8fGMO!!*T2mP/01TAU>RNgu3B8QtV,j[Q)9KojWS4sP_<X<*8!)cYKRa,%-%FHl-WkAKgS;PeBQ-do+qj2<I1k!\s/%jk/9BklJS&4),#%V:Ms$*r&2hGki#d5(=PcKdNO'g3r5)tIW1Y.rs%n?aCk)d?CDeAWR]%pCq;qni?uE[]HQ/.>#1o=f'Ej8O2`bXk;HZN\0hU)<3HTA"C)jFXt7k(=[2,*njUOK'.I2.!GYSZ?DYl4n6tJ%^?sI(5-4l#$[-`%nd:<n?,]i7@jZXs72p\p0kb<e4:17HML-sQH)&b@ZJPbXMZpH7"f0M5:U-06GoTcjh;=Fg1OFO]A;*Kc/e+^`]IVB(>mWgBXq+@)%C<5Xd-"_+q<`(;tHB:FsMm_o@Ue"9X$kZ$87+S=lQcDrG1!#&u9n1L2'Ko8coVQsPJNP\Hl%[S$lV6]LOr1U(Us.1Ehq&7],hF[p%KP.Bk9!n8GKdF!o)A[$996$bC_q0rn@451Mk'/<N<?^Ce>!!R1W7r;B=@Y$5LQa/=*JI`JNTiYc/H-AX0Wf3c<`maHPiuR9/FkRT%Fmlud*lqipKUWj[EC>MKWYDgZ$<#(2ZBab`#<'j4&uHLkM2qqLSdnq%1F[lcnRCfdO]$@%R?Fju+#\:aqp>rF3t-/["d+p<[&'="%)gh\5;X20jN`M8#UEUBu#Y!0.T"A/[7H?RTNH_q%ZS!n@="KUS!c)gbL*B!0>$1XLkMAoiDPg?)jOg*C:^:_RPFfE#6c.3;#h1R7%i'EkZ_P(Q+0=jU=gM=5dqq"DTa.aY%H>/SoV8GgKo1Rc[Ng&@4d9=cLK!_NK:ig`:mBRh?H&d/7@JB!:ioo:ER^qk2SJQ:C*M7WS%SOO0r,ujb2^1"s_e*+s*Lac@/qQF_l7?K)lkboK(V03Cn-*t`;!tOY+"OSFf1":\qe6Em2IAO^qJAhVN2pr^8@mgeqcj)tlq4>rs%]o?$*=$ac%r-26K?.k$D9iX0!;JQGn;.<jDTb,VNGo=':+mPND*k\.Q3P[CK!cnLo`7+3[,,"Ti]g<(]NE;)V]t$EhH&q5q:sIkE%%:'EA"NJ0!`!9[9%:,-G?Ocd%loOu"^<;obTqN\t9!-NM@*sUr@R280,roR*8lVp+"@Z_Z;6laJBYpIFH!)-e7h-a,H;n"f3kB+g%OQ$#%k(3H&@a`uGTN(5"ggBk)b@s$;##gGpB#%.5#>2lG:qA\a7j[KKXpK"*8\u7#HXP(ImBju=/dW_2JLq$i4Wl`%H_P!?%Ko^L%QR#mQ3e55g?RmhgU9I&6&oe<G@(W9$KPh#dXZJK_bI>KbllZ\$RLb=8TDGi83!20rckXN7?^>aMmh=nFUBKiI\1k981d9j@RQ39T%M%.jdeu?YN1RsTM%Y&"`=([<I/aEn[F.,fI;$iqeON+pM5c'E1LN4"l3n0lr1&fo.9-.\9i=8lqQ_/$n`\k7#er[I:/`(B=J-$k]%XH\c2(=*c(;^4o:R=hF>Uaq$t/5]-lOR@pEN9LWOcqR8P=D@"D.(^Eoj^)<.,&D38eS"JB#Ih&jC.QPdHJgHiiM8l,T2tji`[`JU%_8T,gC!*c9h@p_6'hmh1PsrD&:\n"rRa:e@6sD,rBD)0kD#3e;/&*K\"ZFl/1=gJCL\Kk,@XU0SQugc,l0fK1^Jcqu<K=bl"UE'$%+@JIB'$l3sg&s:a%`j%Yi'^Rt\@S;?Uhk1r2-^#Peb,i!3!S$qHQ7EfT0O5D&Z5B&efFO4'Hnko<P]>ig._=@cWuVmqIA#H*ME7i%&[b0.fS)(0@NEuQM9\UhbZA@#b9'ms1!I(&$h-;Nq5#G-X'A$`b'@JaVT'5_J,!e<[BNnOH&=atW.LNr!$WNiag=Yc)b<13rsj<V%**#1m1JgDr5%DQM$T/Vgb0hXcY+rYnkD[@?>T0&?7!l:+BMt&5K#hb?HE'NDoYs=oeO.@?>dq4b2O\/YMb%B6P&3`inbCHmY=in<%R:*pf1+Mi@25?%#8O$e*&tjS=-QUf:/[cJl63f5QK,I=jVM5EG,JB$b`JGQa3B>3(c-pC:QPo^56\5:8A,l1&s6cfbqHmKo6[b;9%oe[aT6)BNu.6$)p"r,sWohrg8C;!68_3ktToh/@iiX]=AJSTB>JMj4t'@:[-oI>\6RAWq)bY:Mf\Wd*m^fdg9,lu@RK>82bQ]u<8%J4;CgYKDm3J]_[2l#^h4rADmAW`EiT\qK=X4R9p,(_S\XVj%>fknHtjHP;PX?qeTaTuW[d"_LL.D8s*D6;XGi#$;3t>"@%frW`\*%/K*dDqi;ea*$o8CrC7lC9N2"RA_2^PF<"m)s5K2&_=KoRS/npbY.K1::*!.hq\TV2GWJ@XQkhg)H&rZmQD[O'fF"376iDtY=!dT"%mLIR*/Jm?-1qFAeO@97D,%dbbr`ggUW]&CZ-C:_p&fU/M(5K3]8Q6`0!Ql:&5"2==7L#hg!@1h]1R*9IC&(S]NuCun+Y,b<0n[-Y%)A1FXqB*s0J&+<$btWMbBgbl%'+A;<`E>Et3@2@RWYJVOnA%+?PCNGXFVl$@_3O(1m"i&ofIO75Y$9p+#/%<A'Z(/22GR9.=-E!N%#4ujrpU;8jN)TIKrLpW"7(s)$\'Pj,T22VS@Qo7Pe.*I*%5s)0oVO7=l'q;J5R?nn)&8Jfis!jl^BN[,R&gdt;);:K*EJ&`n#'pn%r`VO^:Pg<m5%EBIL_nk:4_(9+2'S+rnL7P%iPIcTgS."T2cg<B([)RW4c9cah-rih[?@Cb%<sJq/VjfOGjA3VQ+_Cj[4kOX_7fD4%_b-"/f`RuiP7pY'R(r6W07=CIqDIq_Z=5>8V9S*u0uMXprA\Ok;n5)Mb0,5V?%Jn<7>3P+,PmAK1Q"jHG5*)Ib4JW`?CY0oHZ=#V%WMQ*.*,-6_(omhRC"Z+m]d*/CBc2(@jfYKhP;HWRs,@H)?]*JCe/@gf#@-,`s-T-I60e%oC\>jWN(:W6k_LZ?CsEPO%&*gXeTAn3%D0M9`_AW8M[XVR#r]_Sc_MA>Z]itP<W*E$%LX8kJ$k:"+\!@/q`'U8eNms*U'q\Bn.'ga-!"?^$F,=5/Sr5kiDFsTjQUnLX*L!%H%hU=\qr7oc080QT;<A4S+H.020_[bQ9]j;5mLH/G4%Bb>_MVo5EQ5%.9BN:K%-Id$6,[cc&(N\<paPXqop^otpEnp;S"BI&LV4U8=%;NQ*#(o*EHYUo]ZUi,eV..]I)Sbdg5p_'nK9-qn?ZrlOs7H:X"jCB]u^P;:g_[J(;@.onejKiq/7%c+g?`Y$O:!JRJ33Gfu;tqFt%]7$j=LA,+24uk`eQ6HZ7@@M$TL'J[ds7i0h?I]OgV?#YM=U0_;G"UhM=/X)WMappQ/s.FXqELHYCdS7Ls0kY@>l_[lqDuS7'Ycqh%M94_t?MhXN!s*+.2Z/(:G?)Mfn@:&S8#epW::;%=Ef@S`VlWKNb%iSmLMafL19@>\Us]M+pmN\I>s3A-gk?;!Xm<-qf<S!hg58KN%g:MJD1G4;o%m-+.H(*d:gIccmm/b[qiM#2t<ZHiM%ctcThb#CK>ftbFMApc"VMtN!<^/fk5rMFA9n*;,3ZkllY'K*3j^!6Lm/o,J%QmY9:TY)Y_HHlQpQV*0Ce>_u1M<,B$?7[(d=1=)<=m,3f%Rj2oppkU@/j#n-`Uu;Q58BnVhH,m!FbW0YqQdYJ=.I\>&'(/=r&dFZ%.>gr#Jq'gs>\APGe*3l6V7\tXA6N<eQ"agu0cXa>a`c!ml>:ePKYpQmpsVTcNNo%c'T%^R,<\Y<fR*D7]PDD^J1SX.]6aZ[OSM8p%^!:o"q#=eb32QEg/&6-)7VPo+S/8GCFdXn[?*61!%als(TA#roi/grtPIi:eC0:ogU8S(e;EWl>Gc>8t(Sm7uC\jhI<H[lD-um\$%hTJ7#"GS-h6SCo/h0J]tQIUP120D,]a)Tn,[Wc+0%>3CH1_C=bf+==CR`o`_cj:C,HuH$GUR4K/g8lp@Z>&5fa[9-3eeoer2(_Ub%X(?`JKltmU89L;5`H>qi_Abiqc>H3N#TPslD<sE3#3H]'J*jBQ=+'6Vod`^eD8r<7UIG]SQ@c+O?t`UJpU`k*ilgXNP"&+[KkKOn%FpXgg[1u40e85nu:/36nP5>)"XLhS99Q=!!Tq'm"J('Z/_hLa?6-M?4m5P]A4OFMtkT*FlC.WLY/:i6)-'%%T;G/igYM4@4kB"nu%9l0@drX[!R$!UT!r!*8?=WDS'4>EJp;Cq/M_cAR*^i(m.FcR_tU@=1^]@Ys=A2Mq/-Jd2q_Ig8%-qei`1/Ile\mV5>ftW5/7FPZ5%CA3>q_\%lr(-`Lj;.d,/=]):D]M?_jp"7>_$\R+A_@`8_WOm4&Uju"W]('6mFV^++fD@ah`"Y%tNH$fMr*`HC#hpaEiW6ss/G_#R%SJ!-]Q:%+#O-@.@gWR40K5.]4*jON_%=[u>Hdu\K'T?lVK?s[!^h+t&A:bmULYL!B&.742jchsR90/91IV[WmK+do;]12.p6P[+l%CW(*B>X5kB9@YpNe:XiS)HIg1^M6=C,/:M8@h?c6DKrWU2ZCgs7'F_M@'p1Df5:Pr?+F<<M*O"8r>,AF4Z%gqDrC@J\rgI1QGEe7%,frB]p/#O=/^F=.p!+1he)?IPW@nKQ/Oa)T.R%U/_6[T[CNM[E?=30U+JS.F)XnmbrA<h$Os(oGgXJu@\#8J/BuX"hk@kG5/&YT-%Uc+T]hYTdIOQ@1jS['tZ1+o<7lfn>(D-q^)Ps?-MT_:9QNtOdrgNDIUT]!DCj4o\9<,d1$@-HZ)gYm@>&&C!!Nj:T#V3\YpRfknZ%j2bF4knM&7g045)>/CRI]!u(rCjE@PLjlTC^$*lSOY*XpDM6Mt)hDtAV?$9(MJq_un6rR+4GA5A$;=<;\S]hAea3c=W(q.ZqT$e2%#hq--TrW<<j$p<BfCg8YL8gm?@R5?dZgT,PRL,,U,UGMTYNB"ITr$AB[j;:&Jl(?2rNck>S.b!]Zf+`Hf^$Xget+IB1W^u'iSioB%8r/jHJEZ5XZZ2]tZ\e*TN-57-7UBu?1:h,IP_pTD%H>h*M%IH:;@K7Edk5WQ`DL*<;Go>13o`3^#=XESSLkA"M1PH[e\ATDA,ImU%ZN/MXXH1N=j%kH"ekPlgOsQ[iaWc9#ZhN`U67.G-B_gRumj%qJH[2>Z)`+J_\p9hfE@b(U#a)#,B64dM(YjEB7i]O!hcPB544[1R%QM9h6<t@P:h<XBT)ak<::Fh=%WA?\S&4<%)gR]d\Tin-cNnKH&X866"7Q\n74p6"XBE%da=>>Z6&W;CF`X=aaj.iE=!B42D`crYM%48(sL-;/&%0Ti@JjYr51"JrF:8>f/HAih2]>Ptkh;TAIX@tsb]G$XQ4[[W/6Bk;\K+c*:U$GJCJ4bPXgF8T=$C-JaE&olUmdQf*.%X]Yqt;I[<QqQq.Fa4@b`\mrr4Yqg>EcFJ';^Y'LYd>D#a!?X3Ik3DO/>C]$?6&+#Xq*iYiD&mC"K/J1<,=\biON^$cbC4lOY9SiY%"'DW_D5.#DHJ)VQ=Op>%J/>3mE@A"PB%U&sKr@B2UWu9Kl#k'lL[AV0Oj#kg'4S/BY677gUXJCf`ZAdo]5</!"^8aOmT=V#`,275%V#BW<(MJYg2K\i"9r!i:Bh#eVoHsT5bSn2b2;<ph<%6'GGS<oojD,.4k*Mr+6V.6r,'o)T-b@AU*e0nm+"d+"i>GXY3bORZ`b0<q%4!Xh2@V&S3Ol:0Sg&rsLo<hLD9@DPCd[jkIRnnI>Xe]D5/5H!2WU2=C16VlSbogoC[%;SrJk:)L'nS)WpMC%)fO/baZ`R8oA+68i%+W+M7cl2Lm7:C-BJq7+!j;MA3JS007?/m&_&/]qblDlaW`*=50Jm=#"ApnCW;_3KAZ%^>a)Q+(e3=uq)L^DO&j;i3S.Ykn/7T*Cs%2tT!a*=dFWE/!YPpTt*QQ^?S\&L0O-@9"IJ#h_/fOmP\)Sm1J$5<8)QoG@QOT9Q(<JlV1RQ7ghX@IeXo(1_1'DUb^#,Su1OR_"9A%9b1^0Wsg`eKOC&Sc.'1i*7$95,&/f5gBluCd7#c&Xte$^YK.!spU#fL^X[=CPdZptTpK_lH[3AE6\p>kiJS](%L%ooVGoX<[a;)d%?,0eZQ3nFZ<Mq?`:jm(IOJSi^40<Mq6r\ThSk&P?EDTs>;,R3@A`u"/*Q8\Do6'$cKCM=Oea7>_Z6Tq9j'[5^&CKVs`+%@95heBE%\a9K&(h"W@<c$Fej?Y?>Y^j;_Z<aWU&Cj<[rmun9#>e!#$nGfg=8H*%TLDgD![n%AW*+C,N%U?SfE68Ch_5<"@t'aZ>BSU,J$mVl%fFf@`V],liJe,jc*2<93E"0ua>c-aA7\VYih7hAe@b)O5SI@TMR_s_6qVqD,]a.#DYYk*:PltD9Kt)h4@MJ**`M.E=a4IbOFX)E;%"Ik:[+6RQFT\9L@LNB=\S1C]#D8Sih"Or,Oru6Ft)3@NbUsq(68MSco0ujhMnmh/.6H&"A!(U=e,1J_p+%(`A(b/4VhL@*rWFXn%%0jX"[T2uI^/`</HNu=QV\+T_^/Thlllfo-0Ud/0"?,i3Jb8QLJmE3JP9;I4GhgqhT=A8mG,OCYXcAg^KgFZtU\q(QiMm.ZH>$8Y4%;IR\:%H5>FpF28C5G[HZecq-;i2ZW=rHj77,p9b5j\"s97amtO\G#9f@%g^r\37+o\66@DJWiH^2K:5VQTVphjgPY)hCC$[<ja3&%g6a5Uj)R3ZVJVoF(i^OI;iMeamoel_m(,P.Y7+>A>Xp6$@Q[X`bZY]YHl+o:&6Rc!X%!p]3#j^tH-kMEh\cF#C0qn1&A0["@sXfE%34eUie7uo'l7,*uN+3!nrLOTEiC/jSPi*E&Ub!"I!R+6i+("2mAsin3)m6q465WthF9:t2g;`kP+4Q/P'9<db98F)l3PZ^Q!"^kW%)m5G\KM!):Rk)rQ9-X^aL`1C\F5`A>GWHc_<5LDqY.,CT7Ene8jo_\j&S-(9QuI3ALSe;+PucGEb<,i'BOM,QZY/#6X]SI(b))RM%5g)GOa5g@rfRoLD7bG1Y\*@uKORj)dn:]MJFUA^XMGgdYVX;Fql!+%77qt[*6u>M@pHWJABKjtkP)t;pX*=s`]M'7OI+WVQh=9?p%R0/2qC[JiA$3nEQPUp;jgt[eo0WC2h%[INN810gi6PhN&+i0-l'r-4H..E`r.h@mfd5$n6LN(VF2F`*g@t8fbRVK58O<GiA)rh:;%Y^t(Al-Lorh2H"s'N9lsCe78Olac*decPnU\qf8CG8g9341;JU]9qsVCWtG&+ql#;Sct_WE2+Eai%NOpRm=0M%EGo<O4q?6YKPK"%O+FrlYk'W#0,h;mN"k\*[C?psG`fYE(0<gZ$ShUWD=@8L%$urhXb^>iOk#<L*Ofm6$'?\d_XWUO+``>ZW\C(ZGM!FqWdn2$BjZ+m%Bt$W1LkKp>bW_hSk)7r=$b*7JUgQr&C@:e4ek<aN_Y6X-_\9X_9#Uje8,X_6%6sA#h?kYg[:t8a@gX>\YE+4_Y>ij#etsp(<[B9!%jQM>g]*g8g9SPpdA:\hgUS[j^676pP;<#TG23GP"3J^P^.+VQ\Br_K`e[)PPg#<k3hs>-0oQnY5XbOd.=W,0a!,gQ3Q93g/[CFb;%CiXOEI;9(0#Nc&o;`Xd1.LoaFP_3fLd_ZLsU[I/$C,o#"cf\F)jX!<,<(L=E8ashZ5h6LchEJ'm]f,U&Xf7-DV?KC5&U@>D69<&u%&T/SZKVPH-p-:DTKW\PT7h`%>>S4P>Xb-s$k]pUCFs6uPRsdUFYsSjNDD8>c=EC[Id)GUfh8ZQ6(.S,$rg7MD9<i$U0]F'!nA4DQ%NNuK__5C?'.FGZE_SatXpl;Z'2]OZ,<6Zig#]'sVKFTSak;f[Qc1^9ZHb!>/JfOmWH+Oi6!V5@T1\V_^fY6X38SGNL00\(KQA\U\%P]k#ZSR/JoBpJc7?+,#<0iLS'.b8UPfl=_m4"fc3ppKi1J95MFoE2JW#?RK_d:hSOO1/&u-(o5FDNfG\Vj?ZPJ\O6ps)K'Y`f%dR%oFXom55"n:D1#+j&IuAnikE=ko/Thq0=YAs`dL.17&)VOS=>#)@P7j(O6g1;m%AmV&0CIXKKV]rECg;4$6OrBk.9pND\\[d]+:CS%>Jhb"$*KKP4n30g6.4d<&([JuHYW>l7n!,c5%Im9\nQ,P2(-<#<%([p7m:+OE;Tg)6a-Sc^BJ8TcCRq@3d/!]8dl$VQ)mmtkaT2U%58ERTI+Qe^075,ZNYJNGZb7.A+bCkl3eXQQ!9])re22hJ#5P7T*MOl9`sikfD,Ao@pe>-B$_->bDI^J!b/Vu;]sZJ3E[_#g,ACdR%N\D.i-:apJr-,[p2;:0J#BA]4Q;!HVDk:`t<tD/J(^tI5Q&LB.Z6ZNV%#A_%q=sLb&^Y?kJI"!&956/nV.=?[31fBC!NtC7"Angk%43d\j-=L)[QNrQHI#^WBc>-j;".5\OPK^(=oCeJqR6os]U329E[\<k%37[J/.%RD[XS!N;!@$/tX"I!t:N`3uMr,4Aj<qSY[3`;*%kYo\Y]mC(b@$S76/gB\K&NsUrnNC69TdTU/Wo1N-<b<e9,0c,kZkY>fi%=\5%S<J:+KFk>8RodmE84@4<=3pPh`KHaDYQtl*.aV&%hP`8)--A(TU1No6fHL;"Hl0!APN<Auk!^U5.ttSY*"*mk@+==R0(eE9i;72i@j]fFh3MV+Y?WD!0/qWb$WZF<!_?FGMrj(.25G*6%.(maZX#<!^a+?epXeTYOG'LEn;m,f;SghBlV$.2)!H;u>ZtIu!R`s7?/G.Y=N$XjGhOK\\>(q&9b]*8CmsT'7H^a0_(-Z#-k8SdD%,M"&+V.;K25YcZ*:RB4EMcAL"/'C]=`+GK5\.NoU[SJ(-$6=!<"uJPP`kXV<D.AY(E4+r\q[5cc"lS0a&!>]T56g*(#mr%2;di4/%Zqj)qrImIb4N3J[3Z.2T5jgGT[1p$VGX:?3.R.P:b;ANuoQjd%^m)kinbA%&e!K>K1A!.K@Y<,"NJc,t-"M?U^$qR&3d_lc2d$'!%lVU%a%X'T4@Regu]o/$ME@TS6H16^UAA\<[6a(\]=qBeihS%3`Qnq3Qfl>VZ&6QA&C%?gPftnsXVJ>P:25?_il;j6)@B?0XDK4]e%@qMlJA?kklUJ04GmA^iH2h22/pt_9(b@6#4EfJ:6ET]nWUkA18\@#E+(?83ph8NLRgA(X/+cf3T>QIK:EBWMQ2%dR%.;hLQ`'q]k%L`XD.'0N=i"5H'-*J9.&#FF>a*al\`c)80WntB9CBn.4*8jLk6i"PTjI70Ci<VcF['Uq:s6dh!>b\J6RB)*4W?*0@bF+SmUMV.)W%ej5(QUA.(u5P5n_s"bXjilY.7@'0eO(l>_\Au+S5CMSA@krT<c7\&X*M,CZN/;j\Q;6->qqZ-@qD?upi:&(q[:!p%?,>hjP5'F\@%%oFNoG`46'c#)1D(Ot_@heIqjiWSK_k/48c5i$I?5rbid(-4KTBOotRP<B^kHCP]PFc,sG3fMt*.4LV0Np\IpNUN"91l63P$h=3X%X`]\.Hi`nV@O[bh5gO"Q%G`]Qr$sD5PIIQX$LFlL)R?ueLYoOX<\`K.od.J7(1/8sBCOsWHhCA;n$n3PU^qY`jg_dhbPC]`j,$V!%S9AdZ(g[0@,o[J"fCG3*[&1<"^tHoQWY!FOlJ#.M[`T!Bp%VlAPF(9`>j1G'q%JCj_6[LkJeVeMe>Wh.AqGkbR$O$Do#E+D357/?%JG7aQK`DM%%X<I]>B9MqSIp]$mLI=aT-MCBj>dED$AaXNN%>l$).<++p[3?JSG]]6Rtl//'3W%<40%uN\Yi[YkPaZ&P2n31[N;\k%/JKHR'V2=%H>n3BAG;W76)<Ji.qR9;H6L?%g=XdLDCof!_qs<VRF^GBW;Tb#@BHVlaQ]hm\aGhep_LAJC7=*j7.R_2!*;#5&au"A%W(tS9<m(4@CVs1gD;ri/T_[AQVW'S4(sMn>`f[^=70JOPOU=]dm&MXXNoK$ABH?"IMO>K4pl]pcRSV7U,%d>rm(P],O5&]5q`9mY%\JDo_[=0.V-`0&PV$&A@`c_/)geSOpHQ$i(oGuC1A'L'R)p0/C\V!k[>q;gHf39DI&B[\hd3?DmFC-]f_jR#mHl4o-*"A,,!KC3(%RrI734-qk[F6?$2i&Te]a/>/K2\#o0\GV@L&#L"=eYCCo4]6\8DT!-$PK)Hi`@QChp9kFe)U@<"D?hJM=tP\g*g,g2U+(4oh"RYW%LUt[i\aX&Qen;AOn0]suX?0lAXr/g]J*u0XdLStIV9`X'<3t>^N&m':V7[FbTXte[5`r)5FW$MFk,n"H`iGMiiGoC>clf_Pb+F$#%d8H]OO8Dp\h"h0$)est5IC4l"Ht.9u;2P`WWn1Te8iJ/p_T?-s/k>d<']D<NEeskm.6MVY?]c=jiJ[T5NJ7;Dg9RncJ9\2)PUr2X%>O4gaDp(!Gc#j:Ah==R/k;koI$IunD/a0qfX8_W`Ttig?cO'if_%E(fKHe)^8hQOgb)4k(Wc'/Z1/mN$,P'@KGO,Mo_uU=F2i.&H%A*cVCT^9$4@U(OK,)PQ9KeX5B#oLVc88k:k^=ZFSD3V85$s:VQ3$dH_fMBLdkICuWp[,8-gYp\<pVHfPcSONJ5+i$?>L*2HIU$M'%m+RcnaE+,H(ffDa>ZfZW/Qlhe;m7edOQ0nL0pWPSlB.pKV'l*g4Y7[QC!>:cDq0'N\cL?>fq.K6a_mTGrbHGX5+XoUZBi(mCF6,2%m-`h\c:#jV*D(<=)b=R-!a;j7%,4KF\1&l@`>NedZ&lC.T28$>QBhIs.<)UL$ndj9#c*2h4Qd&]7*Mi^P`f`,-U-?]PErD:ae@dk%Lo]1gq>4@o:7Z&rGppP<iq256D("Xo[lHfS+^;En:6IA?@^2oL5W''mM14.f?_W28F1[&X1Z/HXOkeq/93^pK^;O2(%0k%u+p\?s%n!BrhqbiZmP8p-Il3tM0IAg^-'ug,#/tu;R5R<9Hq@=Wr>6/PKj=Ie>0&%MOEEuJ4SW9dVod[NJk\Xu4AL6:#;q\p'>6WP*&XhZm%gOUB00!BXbTmX.HCi9,cBr,tQn2F/t,(cJ(\7Oem5Mo'mI^1gBlL@O2om)5W?i'Uq4K@\83<@;:ZKAs<D1t)^.5m9Ks,1?g7`C7W%Zj%PP21mZkGlTh^?V5lMZKf5Z9Ba%C$9\RsfTc%WP(lPa0+[/[<MhF]eZdtVr+VTqB<"G'?PH/pi)$r\,jM&*d9ha[R7nL$*T+I:%M-'IDkkq`uKd*Pnk&V02`5SRW_Kq*QTsMKu(Jd+f\UcAZ\IP>WU.HrFJZR=tFWaf5/*7d^o`ZrOd]mX>/(a!&bMPCJqahs;[YHkB%e2r/DlP//p8d1XS!cp19OT'WW/0=N-+_Mi[U0u&Q791>#K'f6\'3!@#Ea>5:7!Y2O<6.$h#?^2&77-A/HakQ+dS\rpji+0hK.O=S%OUPQ$O-tKDI4ChrWW#'`=Bu5`7?Z,A2Fm`,RO@&s.IQ<%&qut<XMWd@r'BXaAWgp0;$qG\q@UQ`R53H.W/$==J[Da<ZRZp?DYNOd%r1MT)RVA89GjVctC."nti167E/d_J,$%.RWj),@/!kj8LMM`5d0&remXHpjnh#C,#k7OMWk*2G=bo*ab.WJdeMl0Q49aUrEOjOtF%DK(;0N>jS/M(P$Y3ho6M/Q^+G6Koj[)hh'So'JuH&eeNF\:V^f5SZG!XPe)@!80hT(#\A:Q\Y-q:@E%eHOCemj>8[aZ+;P?f(Ppd%TqYCX&U&Nc365''Ik!9r<N&He;6A`EgQH"5='J_?Oj*;'HalV1B7>7Y5HBs(@N-Rf7t+LNCLD2m+\<*9Y\GJ'Lho5!?O=BaSe0:0%8!.l1@pR.,]ieY&VetO_Q,'(DZD5^rC9EodnqbP&k-5<Y/kXQBX5U$Vit>3hHe;Y5>*I@nJkDTQ:mroo\h1^-+(qB^YdV(>HiHiQ%'1JY<eZMl2m2`>V3oIY5OrndJE5^:jSQnFdo#gjrC&qB-*n)")MpmJFTm\50V=qKU0=<GepBaHUPO!ii^1V4t>?&"2arGOk>4YTV%!JEY?:Z\uA/0MLj>:oBel"=EaYI[3@5FdPJ?/nGCS\oO5lOJR9CW+B?-1b4E=.G0Z@6(WKbatQBR\Ah(ADi4kT^j,bb3E?*8Pf3D%qhPZA[5`GZ).KMP$^.=E-lGbgGLZjn(RA.>q0!;uQI*OXbXcY$PgQtor12gScnS!I2cOC=#0SV?8FD+8W9@T*Oarch84JJ0AC.$i%c`he)r@T[o2D>UPOggPAE;4-/>ia3Aq;5O`j(iGDs6Yl>s5kF"J,?iBrqH.orpR&*rUjOtq"a+Qprab.rD13,nj!0MfAD&TiQo::%mpCS@jc=ohdpIS"bHLs3qCb)3iO<1or0KYHp?PM(rhi!Z+%<?9S<*^JoABM%^]3j(!2.l#L&~>%AI9_PrivateDataEnd