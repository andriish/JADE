*******************************************************************
*
* PMF 09/11/99:
* This file is a collection of (non-standard !?)
* vertex chamber routines used by the grafix library.
*
* THIS IS STILL A PRELIMINARY TEST VERSION !!!!!!!
*
*******************************************************************

*******************************************************************
*
* PMF 09/11/99: VTXCRV from file "jvtxc.s.seq"
*
*******************************************************************

C   24/10/85 609181828  MEMBER NAME  VTXCRV   (S)           FORTRAN
C
C   THIS SUBROUTINE RETURNS FOR A GIVEN RUNNUMBER 'NRUN'
C   THE WITH THE VERTEXCHAMBER CALCULATED RUNVERTEX '(RVX,RVY)'
C   AND ERRORS (RVDX,RVDY)
C   ( IN DETECTOR-COORDINATES )
C
      SUBROUTINE VTXCRV( NRUN, RVX, RVY ,RVDX, RVDY)
C
      DIMENSION VSTORE(5,37), VS1(5,19), VS2(5,18)
C
      EQUIVALENCE (VSTORE(1,1),VS1(1,1)), (VSTORE(1,20),VS2(1,1))
C
      DATA RLAST  / 24187. /, IPER / 1 /, NCALL / 0 /
C
      DATA VS1 /
     &    20275.,  1.177    ,  .9093E-01,  1.722    ,  .5080E-01,
     &    20366., -1.971    ,  .2840    ,  1.267    ,  .1860    ,
     &    20370.,  1.847    ,  .4167    ,  1.455    ,  .1442    ,
     &    20385., -.4718    ,  .1308    ,  1.868    ,  .6758E-01,
     &    20980.,  .7311    ,  .1489    ,  1.984    ,  .5378E-01,
     &    21008., -.4295    ,  .1269    ,  1.949    ,  .7287E-01,
     &    21211.,  .2094    ,  .8336E-01,  2.052    ,  .4016E-01,
     &    21310., -1.267    ,  .7253E-01,  1.975    ,  .3805E-01,
     &    21329., -.2575    ,  .3390E-01,  1.976    ,  .1680E-01,
     &    21808., -.6072E-01,  .5099E-01,  1.592    ,  .3412E-01,
     &    22026., -.5669    ,  .4785E-01,  1.665    ,  .2744E-01,
     &    22162.,  .4993    ,  .6722E-01,  1.862    ,  .3471E-01,
     &    22214., -.1608E-01,  .6566E-01,  1.937    ,  .3577E-01,
     &    22367.,  .6297    ,  .6978E-01,  1.855    ,  .4481E-01,
     &    22416., -.3393    ,  .6317E-01,  1.910    ,  .2997E-01,
     &    22559., -1.412    ,  .4251E-01,  1.925    ,  .2345E-01,
     &    22854., -.4245    ,  .1020    ,  1.908    ,  .5556E-01,
     &    22897.,  .9606    ,  .1222    ,  1.858    ,  .8161E-01,
     &    22901.,  .2585    ,  .1539    ,  2.215    ,  .8853E-01/
      DATA VS2 /
     &    22915., -.4097    ,  .1003    ,  1.963    ,  .4599E-01,
     &    22976.,  .1262    ,  .1114    ,  1.735    ,  .6050E-01,
     &    23044., -.7860    ,  .2345    ,  2.029    ,  .1177    ,
     &    23054.,  .2327    ,  .8883E-01,  1.830    ,  .5139E-01,
     &    23096.,  .8635    ,  .5580E-01,  1.764    ,  .2453E-01,
     &    23211.,  .3967E-01,  .6786E-01,  1.631    ,  .3873E-01,
     &    23326.,  .6146    ,  .5488E-01,  1.684    ,  .3087E-01,
     &    23418.,  1.595    ,  .2312E-01,  1.730    ,  .1193E-01,
     &    23838., -.3356    ,  .3926E-01,  1.736    ,  .2447E-01,
     &    23993.,  .9898    ,  .1815    ,  1.437    ,  .9115E-01,
     &    24008.,  .3999    ,  .9235E-01,  1.608    ,  .7332E-01,
     &    24016.,  1.018    ,  .9523E-01,  1.683    ,  .4518E-01,
     &    24034.,  1.135    ,  .1226    ,  1.432    ,  .7125E-01,
     &    24050.,  1.041    ,  .1383    ,  1.775    ,  .7137E-01,
     &    24057.,  .3728    ,  .7962E-01,  1.614    ,  .3897E-01,
     &    24094., -.8727    ,  .5520E-01,  1.648    ,  .2776E-01,
     &    24143.,  .6927    ,  .7144E-01,  1.630    ,  .3140E-01,
     &    99999.,  0.000    ,  0.000    ,  0.000    ,  0.000        /
C
      IF (NCALL.EQ.0) WRITE(6,9000)
 9000 FORMAT(/
     &' *** WARNING : RUNVERTICES ARE PRELEMINARY (18.4.86 C.K.) ***'/)
      NCALL = NCALL + 1
C
      RVX  = 0.
      RVDX = 0.
      RVY  = 0.
      RVDY = 0.
C
      RUN = FLOAT(NRUN)
C
      IF ((RUN.LT.VSTORE(1,1)).OR.(RUN.GT.RLAST)) GOTO 999
C
      IF (RUN.LT.VSTORE(1,IPER)) GOTO 300
C
  200 CONTINUE
      IF (RUN.LT.VSTORE(1,IPER+1)) GOTO 400
      IPER = IPER + 1
      GOTO 200
C
  300 CONTINUE
      IPER = IPER - 1
      IF (RUN.LT.VSTORE(1,IPER)) GOTO 300
C
  400 CONTINUE
C
      RVX  = VSTORE(2,IPER)
      RVDX = VSTORE(3,IPER)
      RVY  = VSTORE(4,IPER)
      RVDY = VSTORE(5,IPER)
C
  999 CONTINUE
C
      RETURN
      END

************************************************************************
*
* PMF 09/11/99:
* SETTAX version from file "vertex.s.seq". This version
* differs from version in file "jvtxc.s.seq" 
* here:  %MACRO MVERTEX2
*        COMMON /CVTX2/ MODE,TAXIS(12),SVR,HVTXST(120)
* there: COMMON / CVAXIS / MODE,TAXIS(12),SVR  
*
************************************************************************

***HEADER*** MEMBER  SETTAX         SAVED BY F22KLE  ON 86/06/11  AT 13:13      
C   21/05/86 605291112  MEMBER NAME  SETTAX   (S)           FORTRAN     
C                                                                       
C     FILL TAXIS FOR TAU'S                                              
C                                                                       
C     * BEAMSIZE ( 0.400, 0.010 ) ASSUMED                               
C     * ERROR OF DIRECTION ACCORDING TO MC-RESULTS ( FROM 17.3 GEV !! ) 
C     * RUNVERTEX Z-COORDINATE, Z-WIDTH FIXED TO 0., 20.                
C                                                                       
      SUBROUTINE SETTAX(RVX, RVY, RVDX, RVDY, XUNIT, YUNIT, ZUNIT)      
C                                                                       
C     RVX,RVY,RVDX,RVDY : RPHI-POSTION AND -ERROR OF RUNVERTEX          
C     XUNIT,YUNIT,ZUNIT : TAU FLIGHT DIRECTION                          
C                                                                       
CAV  The CVTX2 block is used with IMPLICIT INTEGER*2 (H)
      IMPLICIT INTEGER*2 (H)
#include "mvertex2.for"
C                                                                       
C     ERROR**2 IN PHI   : DPHI2 = ( 3 DEGREE ) **2           21.05.86   
C     ERROR**2 IN THETA : DTH2  = ( 3 DEGREE ) **2           21.05.86   
C                                                                       
      DATA DPHI2 / 2.74E-3 /, DTH2 / 2.74E-3 /                          
C                                                                       
      MODE = 1                                                          
      CSCTH2 = 1. / ( XUNIT**2 + YUNIT**2 )                             
      CSCTH  = SQRT( CSCTH2 )                                           
      TAXIS( 1) = RVX                                                   
      TAXIS( 2) = RVY                                                   
      TAXIS( 3) = 0.                                                    
      TAXIS( 4) = RVDX**2 + 0.16                                        
      TAXIS( 5) = RVDY**2 + 0.0001                                      
      TAXIS( 6) = 400.                                                  
      TAXIS( 7) = XUNIT*CSCTH                                           
      TAXIS( 8) = YUNIT*CSCTH                                           
      TAXIS( 9) = ZUNIT*CSCTH                                           
      TAXIS(10) = DPHI2 * TAXIS(8)**2                                   
      TAXIS(11) = DPHI2 * TAXIS(7)**2                                   
      TAXIS(12) = DTH2  * CSCTH2**2                                     
C                                                                       
      RETURN                                                            
      END                                                               

**********************************************************************
*
* PMF 09/11/99: VTXIMP from file "vertex.s.seq" (newer version)
*
**********************************************************************
***HEADER*** MEMBER  VTXPNT         SAVED BY F22HAG  ON 88/08/02  AT 10:
C   11/12/79 808021030  MEMBER NAME  VTXPNTC  (S)           FORTRAN
      SUBROUTINE VTXXXX(J,XP,YP,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT,ST)
C*800623*DITTMANN************************************************
C*                                                              *
C*     S U P P O R T   F O R   X Y Z   V E R T E X   F I T      *
C*                                                              *
C*860611*KLEINWORT***********************************************
C*                                                              *
C*  REWRITTEN FOR PROPER ERRORS AND USE WITH 'COMFIT'ED TRACKS  *
C*                                                              *
C*  - AS NEW PARAMETER DPHIT THE ERROR OF PHI IS CALCULATED     *
C*    ( WITHOUT MULTIPLE SCATTERING ! )                         *
C*    ( THIS IS DONE BY VTXDPM ! )                              *
C*                                                              *
C*    C.K. 870719 : DZ2 CORRECTED --> CI4                       *
C*    J.H. 880802 : ENTRY VTXIMC ADDED
C*                                                              *
C*       COMMON CWORK1 MUST BE FILLED PROPERLY                  *
C*                                                              *
C*       ENTRY: VTXS                                            *
C****************************************************************
#include "mvertex1.for"
CAV  The CVTX2 block is used with IMPLICIT INTEGER*2 (H)
      INTEGER*2 HVTXST
#include "mvertex2.for"
C
      REAL*8 XM,YM,RR,PHI,SPHI,CPHI,SR
C        ENTRY VTXPNT
C****    CALCULATE POINT XT,YT,ZT ON HELIX J WHICH IS NEAREST
C****    TO POINT XP,YP IN X-Y PROJECTION
      IMPACT = 0
      GOTO 10
C****
      ENTRY VTXIMC(J,XS,YS,ZS,PHIS,RELSTR,XP,YP,
     &             XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT,ST,EX,EY,AIMP)
      IMPACT = 1
      FACSTR = 1.0/EXP(-RELSTR/ABS(T(J+24)))
      RR = DBLE(T(J+2))*FACSTR
      XM = DBLE(XS) - RR*DSIN(DBLE(PHIS))
      YM = DBLE(YS) + RR*DCOS(DBLE(PHIS))
      PHIAC = PHIS
      ZAC   = ZS
      SAC   = T(J+18)
      GOTO 20
C
      ENTRY VTXIMP(J,XP,YP,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT,ST,
     &      EX,EY,AIMP)
      IMPACT = 1
   10 CONTINUE
      RR = DBLE(T(J+2))
      XM = DBLE(T(J+5)) - RR*DBLE(T(J+21))
      YM = DBLE(T(J+6)) + RR*DBLE(T(J+22))
      PHIAC = T(J+3)
      ZAC   = T(J+7)
      SAC   = 0.0
   20 CONTINUE
      SR = DBLE(SIGN(1.,T(J+2)))
      PHI = DATAN2(-SR*(XM-DBLE(XP)),SR*(YM-DBLE(YP)))
      SPHI = DSIN(PHI)
      CPHI = DCOS(PHI)
      PHIT = SNGL(PHI)
      PHI = PHI - DBLE(PHIAC)
      IF (DABS(PHI).GT.3.141593D0) PHI=PHI-DSIGN(1.D0,PHI)*6.283185D0
      ST = SNGL(RR*PHI)
      XT = SNGL(XM + RR*SPHI)
      YT = SNGL(YM - RR*CPHI)
      ZT = ZAC + ST*T(J+23)
      SSPACE = ST + SAC
      IF (IMPACT.NE.1) GOTO 100
      AIMP = SIGN( SQRT( (XT-XP)**2+(YT-YP)**2 )
     &           , (XT-XP)*EX+(YT-YP)*EY )
      GOTO 100
C
C
c         ENTRY VTXS(J,SJ,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT)
cC****    CALCULATE POINT XT,YT,ZT ON HELIX J FOR A GIVEN
cC****    PROJECTED ARC LENGTH SJ
c      RR = DBLE(T(J+2))
c      PHI = DBLE(SJ) / RR + DBLE(T(J+3))
c      PHIT = SNGL(PHI)
c      SPHI = DSIN(PHI)
c      CPHI = DCOS(PHI)
c      XT = SNGL(DBLE(T(J+5)) + RR*(SPHI-DBLE(T(J+21))))
c      YT = SNGL(DBLE(T(J+6)) - RR*(CPHI-DBLE(T(J+22))))
c      ZT = T(J+7) + SJ*T(J+23)
c      SSPACE = SJ
cC
cC *** CALCULATION OF RPHI-ERRORS
C
  100 CONTINUE
C
      SSCOUL = SSPACE - T(J+18)
      IF ((SSCOUL.GT.0.).OR.(T(J+18).GT.0.)) SSCOUL=0.
      SSCVXC = SSPACE - T(J+19)
      IF(SSCVXC.GT.0.) SSCVXC=0.
C
      X = SSPACE - 0.5*T(J+20)
C                                      ERROR IN XY (SQUARED)
C
C                                      MULTIPLE SCATTERRING ( TANKWALL )
      DXY = ( T(J+16) * SSCOUL )**2 +
C                                      MULTIPLE SCATTERRING ( BEAMPIPE )
     &      ( T(J+17) * SSCVXC )**2 +
C                                      PARABOLA FIT
     &      ((( T(J+32)   *X + T(J+33) ) *X +
     &          T(J+34) ) *X + T(J+35) ) *X + T(J+36)
C
C                                      ERROR IN PHI (NOT SQUARED)
C
C                                      NO MULTIPLE SCATTERRING
C                                      PARABOLA FIT
      XX = 2.0 * X
      DPHIT = ( T(J+32) *XX + T(J+33) ) *XX + T(J+40)
CCC   IF (DPHIT.GE.0.) DPHIT = SQRT( DPHIT )
      DPHIT = SQRT( DPHIT )
C
      DXYLIM = 1. / (2.*ABS(T(J+2))*SQRT(ABS(DXY)))
      DXT2 = SNGL(SPHI**2) / DXY
      DYT2 = SNGL(CPHI**2) / DXY
      IF(ABS(DXT2).LT.DXYLIM) DXT2=DXYLIM
      IF(ABS(DYT2).LT.DXYLIM) DYT2=DXYLIM
      DXT2 = 1. / DXT2
      DYT2 = 1. / DYT2
C
C *** CALCULATION OF ZS-ERRORS
C
      SSCOUL = SSPACE - T(J+18)
      IF(SSCOUL.GT.0.) SSCOUL=0.
      SSCVXC = SSPACE - T(J+19)
      IF(SSCVXC.GT.0.) SSCVXC=0.
C
      SSPACE = SSPACE + T(J+39)
C
      X = SSPACE/T(J+38) - 0.5
C                                      1/COS(TH)**4
      CI4 = ( 1.0 + T(JT+23)**2 )**2
C                                      MULTIPLE SCATTERRING
      DZT2 = ( ( T(J+16) * SSCOUL )**2 + ( T(J+17) * SSCVXC )**2 ) * CI4
C                                      LINE FIT (WITH TRIPLETS)
     &       + T(J+37) * ( 1.5 + 18.*X**2 )
C
      RETURN
C
      END


************************************************************************
*
*  PMF 09/11/99: CRVT9, T9CORR from file jvtxc.s.seq
*
************************************************************************


***HEADER*** MEMBER  CRVT9          SAVED BY F22RAM  ON 86/09/18  AT 18:
C   28/08/86 609181808  MEMBER NAME  CRVT9    (S)           FORTRAN
      FUNCTION CRVT9(IC1,IC2)
C-------------------------------------------------
C     VERSION OF 28.8.86           R.RAMCKE
C     FUNCTION FOR CORRECTION OF VTXC 9 TIMING
C     INPUT IC1,IC2   CHANNAL 1,2
C-------------------------------------------------
C
      COMMON  / CTIMG /  A(32,32),B(32,32)
C
      IC11 = IC1/4 + 1
      IC22 = IC2/4 + 1
      IF(IC11 .GT. 0 .AND. IC22 .GT. 0) GOTO 10
         CRVT9 = 0.0
         RETURN
 10   CONTINUE
C
      IC11 = MIN0(IC11,32)
      IC22 = MIN0(IC22,32)
      CRVT9 = A(IC22,IC11)
C
      RETURN
      END

***HEADER*** MEMBER  T9CORR         SAVED BY F22RAM  ON 86/12/11  AT 17:
C   20/08/86 612111726  MEMBER NAME  T9CORR   (S)           FORTRAN
C
C   AUTOMATICALLY-GENERATED PROGRAM FOR CORRECTING
C   FADC-TIMING             R.RAMCKE
C   VERSION FROM 07.12.86 (DEC07C)  - WITHOUT SUMDST CORREC. -
C
       SUBROUTINE T9CORR
       RETURN
       END
       BLOCKDATA BT9CORR
C
       COMMON  / CTIMG /  A(32,32),B(32,32)                                     
C
C
       REAL*4 A0(128),A1(128),A2(128),A3(128)
       REAL*4 A4(128),A5(128),A6(128),A7(128)
       REAL*4 B0(128),B1(128),B2(128),B3(128)
       REAL*4 B4(128),B5(128),B6(128),B7(128)
       EQUIVALENCE (A(1,1),A0(1)),(A(1,5),A1(1))
       EQUIVALENCE (A(1,9),A2(1)),(A(1,13),A3(1))
       EQUIVALENCE (A(1,17),A4(1)),(A(1,21),A5(1))
       EQUIVALENCE (A(1,25),A6(1)),(A(1,29),A7(1))
       EQUIVALENCE (B(1,1),B0(1)),(B(1,5),B1(1))
       EQUIVALENCE (B(1,9),B2(1)),(B(1,13),B3(1))
       EQUIVALENCE (B(1,17),B4(1)),(B(1,21),B5(1))
       EQUIVALENCE (B(1,25),B6(1)),(B(1,29),B7(1))
C                                                                                
      DATA A0 /
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
                                                                                
     *  0.269,  0.210,  0.126,  0.056, -0.003, -0.054, -0.097, -0.115,          
     * -0.137, -0.164, -0.182, -0.199, -0.197, -0.210, -0.225, -0.215,          
     * -0.247, -0.271, -0.282, -0.286, -0.286, -0.300, -0.282, -0.342,          
     * -0.291, -0.321, -0.302, -0.266, -0.294, -0.330, -0.359,  0.0  ,          
                                                                                
     *  0.256,  0.264,  0.230,  0.160,  0.091,  0.036, -0.000, -0.048,          
     * -0.073, -0.092, -0.111, -0.127, -0.146, -0.157, -0.186, -0.190,          
     * -0.208, -0.200, -0.211, -0.248, -0.217, -0.240, -0.264, -0.213,          
     * -0.218, -0.224, -0.264, -0.324, -0.292, -0.312, -0.340,  0.0  ,          
                                                                                
     *  0.0  ,  0.259,  0.227,  0.209,  0.166,  0.114,  0.072,  0.020,          
     * -0.000, -0.029, -0.044, -0.067, -0.100, -0.113, -0.119, -0.136,          
     * -0.134, -0.154, -0.159, -0.187, -0.181, -0.194, -0.213, -0.188,          
     * -0.237, -0.271, -0.214, -0.259, -0.220, -0.269, -0.323,  0.0  /          
       DATA A1 /                                                                
     *  0.0  ,  0.0  ,  0.197,  0.184,  0.165,  0.150,  0.123,  0.091,          
     *  0.052,  0.035,  0.003, -0.012, -0.036, -0.063, -0.063, -0.087,          
     * -0.103, -0.100, -0.112, -0.121, -0.157, -0.154, -0.122, -0.154,          
     * -0.177, -0.175, -0.170, -0.219, -0.226, -0.213, -0.083,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.126,  0.166,  0.169,  0.164,  0.156,  0.128,          
     *  0.108,  0.079,  0.054,  0.034,  0.010,  0.004, -0.034, -0.050,          
     * -0.054, -0.074, -0.081, -0.080, -0.127, -0.123, -0.139, -0.121,          
     * -0.161, -0.155, -0.140, -0.219, -0.264, -0.170, -0.128,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.197,  0.144,  0.147,  0.150,  0.138,          
     *  0.114,  0.112,  0.078,  0.067,  0.057,  0.032,  0.012,  0.004,          
     * -0.010, -0.033, -0.048, -0.047, -0.072, -0.078, -0.104, -0.121,          
     * -0.134, -0.129, -0.138, -0.125, -0.160, -0.155, -0.101,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.140,  0.120,  0.137,  0.146,          
     *  0.107,  0.127,  0.098,  0.100,  0.060,  0.058,  0.048,  0.030,          
     *  0.023,  0.005, -0.017, -0.020, -0.037, -0.061, -0.040, -0.066,          
     * -0.111, -0.108, -0.103, -0.138, -0.074, -0.058, -0.167,  0.0  /          
       DATA A2 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.062,  0.132,  0.143,          
     *  0.093,  0.125,  0.131,  0.091,  0.081,  0.065,  0.047,  0.041,          
     *  0.039,  0.027, -0.006,  0.012, -0.013, -0.024, -0.026, -0.039,          
     * -0.029, -0.084, -0.092, -0.098, -0.110, -0.191, -0.205,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.093,  0.143,          
     *  0.138,  0.130,  0.093,  0.105,  0.083,  0.098,  0.075,  0.067,          
     *  0.075,  0.044,  0.040,  0.012,  0.028, -0.015, -0.029, -0.011,          
     * -0.046, -0.039, -0.037, -0.088, -0.094, -0.060,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.182,  0.134,  0.127,  0.113,  0.100,  0.081,  0.072,  0.054,          
     *  0.082,  0.037,  0.053,  0.026,  0.037,  0.033,  0.014,  0.017,          
     * -0.037, -0.038, -0.061, -0.056, -0.088, -0.051, -0.224,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.082,  0.203,  0.117,  0.114,  0.078,  0.125,  0.086,  0.064,          
     *  0.053,  0.078,  0.054,  0.055,  0.057,  0.020,  0.015,  0.019,          
     * -0.000, -0.030, -0.026, -0.051, -0.051, -0.063,  0.0  ,  0.0  /          
       DATA A3 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.164,  0.104,  0.096,  0.090,  0.083,  0.099,          
     *  0.068,  0.088,  0.038,  0.033,  0.023,  0.064,  0.030,  0.053,          
     * -0.000,  0.007, -0.005, -0.068, -0.043, -0.095,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.100,  0.148,  0.070,  0.126,          
     *  0.103,  0.077,  0.074,  0.105,  0.073,  0.039,  0.050,  0.065,          
     *  0.033, -0.032, -0.009, -0.039, -0.028, -0.036,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.034,  0.120,          
     *  0.025,  0.115,  0.020,  0.018, -0.080, -0.067,  0.029,  0.005,          
     *  0.010, -0.028, -0.018, -0.023, -0.285, -0.250,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.117,  0.0  ,  0.0  , -0.014,  0.056, -0.068, -0.215, -0.114,          
     * -0.131, -0.032, -0.096, -0.077, -0.275, -0.247, -0.287,  0.0  /          
       DATA A4 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.220,  0.0  ,  0.173,  0.057, -0.083, -0.195,          
     * -0.162, -0.152, -0.119, -0.183, -0.214, -0.352, -0.345,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  , -0.036, -0.116,          
     * -0.080, -0.169, -0.130, -0.196, -0.220, -0.239, -0.260,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  , -0.055,          
     * -0.040, -0.071, -0.116, -0.151, -0.160, -0.178, -0.304,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.021,  0.007, -0.047, -0.126, -0.150, -0.192, -0.159,  0.0  /          
       DATA A5 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.043,  0.017, -0.062, -0.059, -0.117, -0.141, -0.121,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     * -0.058,  0.010,  0.002,  0.018, -0.069, -0.133, -0.170,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.011, -0.042, -0.098,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  , -0.052, -0.159,  0.0  ,  0.0  /          
       DATA A6 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  , -0.071, -0.038,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  , -0.106, -0.147,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  , -0.096,  0.0  ,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  , -0.353,  0.0  ,  0.0  ,  0.0  ,  0.0  /          
       DATA A7 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  , -0.242,  0.0  ,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  , -0.236,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  , -0.243,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  /          
                                                                                
      DATA B0 /                                                                 
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
                                                                                
     *  0.013,  0.008,  0.007,  0.005,  0.004,  0.004,  0.003,  0.003,          
     *  0.003,  0.004,  0.004,  0.004,  0.004,  0.005,  0.006,  0.008,          
     *  0.009,  0.010,  0.012,  0.012,  0.013,  0.012,  0.014,  0.017,          
     *  0.019,  0.017,  0.041,  0.038,  0.021,  0.020,  0.042,  0.0  ,          
                                                                                
     *  0.035,  0.013,  0.006,  0.005,  0.004,  0.004,  0.004,  0.004,          
     *  0.004,  0.004,  0.004,  0.004,  0.005,  0.005,  0.006,  0.007,          
     *  0.007,  0.009,  0.011,  0.012,  0.012,  0.014,  0.015,  0.018,          
     *  0.020,  0.024,  0.037,  0.043,  0.020,  0.021,  0.063,  0.0  ,          
                                                                                
     *  0.0  ,  0.022,  0.008,  0.006,  0.005,  0.004,  0.004,  0.004,          
     *  0.004,  0.004,  0.004,  0.004,  0.005,  0.005,  0.006,  0.006,          
     *  0.008,  0.008,  0.009,  0.010,  0.012,  0.012,  0.012,  0.014,          
     *  0.015,  0.013,  0.023,  0.041,  0.024,  0.016,  0.027,  0.0  /          
       DATA B1 /                                                                
     *  0.0  ,  0.0  ,  0.017,  0.008,  0.006,  0.005,  0.005,  0.004,          
     *  0.004,  0.004,  0.005,  0.005,  0.005,  0.005,  0.005,  0.006,          
     *  0.006,  0.008,  0.009,  0.009,  0.009,  0.013,  0.012,  0.012,          
     *  0.015,  0.016,  0.014,  0.027,  0.021,  0.021,  0.047,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.028,  0.014,  0.009,  0.007,  0.006,  0.005,          
     *  0.005,  0.005,  0.005,  0.005,  0.005,  0.005,  0.006,  0.006,          
     *  0.007,  0.007,  0.009,  0.011,  0.010,  0.011,  0.010,  0.011,          
     *  0.014,  0.016,  0.017,  0.021,  0.018,  0.024,  0.054,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.028,  0.016,  0.011,  0.008,  0.006,          
     *  0.006,  0.006,  0.005,  0.006,  0.006,  0.006,  0.007,  0.007,          
     *  0.007,  0.008,  0.008,  0.009,  0.010,  0.011,  0.011,  0.011,          
     *  0.013,  0.015,  0.022,  0.021,  0.026,  0.019,  0.038,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.042,  0.016,  0.013,  0.011,          
     *  0.008,  0.007,  0.006,  0.006,  0.006,  0.006,  0.007,  0.007,          
     *  0.007,  0.008,  0.009,  0.010,  0.011,  0.011,  0.011,  0.012,          
     *  0.014,  0.016,  0.017,  0.022,  0.018,  0.020,  0.036,  0.0  /          
       DATA B2 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.032,  0.024,  0.016,          
     *  0.012,  0.010,  0.010,  0.007,  0.008,  0.007,  0.007,  0.008,          
     *  0.008,  0.009,  0.008,  0.010,  0.010,  0.012,  0.010,  0.012,          
     *  0.015,  0.015,  0.018,  0.020,  0.022,  0.028,  0.083,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.030,  0.023,          
     *  0.022,  0.015,  0.012,  0.012,  0.009,  0.009,  0.008,  0.008,          
     *  0.008,  0.009,  0.010,  0.011,  0.011,  0.010,  0.014,  0.012,          
     *  0.012,  0.015,  0.018,  0.025,  0.024,  0.023,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.028,  0.022,  0.022,  0.016,  0.013,  0.013,  0.011,  0.009,          
     *  0.010,  0.010,  0.010,  0.013,  0.011,  0.013,  0.011,  0.012,          
     *  0.010,  0.013,  0.019,  0.018,  0.021,  0.028,  0.083,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.035,  0.040,  0.037,  0.024,  0.019,  0.019,  0.014,  0.015,          
     *  0.015,  0.013,  0.012,  0.012,  0.012,  0.013,  0.013,  0.014,          
     *  0.013,  0.015,  0.016,  0.017,  0.022,  0.028,  0.0  ,  0.0  /          
       DATA B3 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.037,  0.055,  0.038,  0.024,  0.025,  0.024,          
     *  0.015,  0.020,  0.018,  0.013,  0.018,  0.017,  0.014,  0.017,          
     *  0.016,  0.018,  0.021,  0.013,  0.019,  0.029,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.094,  0.059,  0.033,  0.029,          
     *  0.028,  0.026,  0.020,  0.014,  0.023,  0.020,  0.019,  0.017,          
     *  0.018,  0.019,  0.018,  0.025,  0.026,  0.025,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.046,  0.039,          
     *  0.038,  0.044,  0.013,  0.025,  0.040,  0.027,  0.021,  0.021,          
     *  0.020,  0.021,  0.019,  0.021,  0.023,  0.032,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.043,  0.0  ,  0.0  ,  0.036,  0.039,  0.023,  0.038,  0.026,          
     *  0.034,  0.026,  0.036,  0.036,  0.027,  0.031,  0.057,  0.0  /          
       DATA B4 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.017,  0.0  ,  0.045,  0.024,  0.038,  0.040,          
     *  0.023,  0.029,  0.021,  0.032,  0.018,  0.023,  0.048,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.048,  0.028,          
     *  0.017,  0.019,  0.021,  0.026,  0.014,  0.017,  0.054,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.046,          
     *  0.033,  0.025,  0.019,  0.022,  0.019,  0.014,  0.027,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.041,  0.034,  0.029,  0.019,  0.017,  0.016,  0.023,  0.0  /          
       DATA B5 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.064,  0.042,  0.040,  0.023,  0.017,  0.016,  0.033,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.026,  0.034,  0.035,  0.031,  0.019,  0.019,  0.038,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.043,  0.022,  0.022,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.040,  0.021,  0.0  ,  0.0  /          
       DATA B6 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.039,  0.027,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.054,  0.061,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.086,  0.0  ,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.038,  0.0  ,  0.0  ,  0.0  ,  0.0  /          
       DATA B7 /                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.014,  0.0  ,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.012,  0.0  ,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.020,  0.0  ,          
                                                                                
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,          
     *  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  ,  0.0  /          
C                                                                               
       END                                                                      


************************************************************************
*
*  PMF 09/11/99: VHITLD from file jvtxc.s.seq
*                LOGICAL TBIT introduced
*                SHFTR replaced by ISHFTR
*
************************************************************************

***HEADER*** MEMBER  VHITLD         SAVED BY F22KLE  ON 86/08/30  AT 16:56      
C   08/07/86 608301655  MEMBER NAME  VHITLD   (S)           FORTRAN    
C                                                                      
C        DECODING OF BIT-MAPPED INFO FROM COMFIT'S PATR                
C                                                                      
C* 860714 C.K. *********************************************************
C                                                                       
C  THE 64 BITS IN I1,I2 ARE DIVIDED INTO 8 BYTES :                      
C                                                                       
C  BYTE 0     : HITMASK                                                 
C               BIT 'I' IS ON, IF HIT 'I' EXISTS ( I = 1, 7 )           
C                                                                       
C  BYTE 1 - 7 : HITINFO                                                 
C               BIT 0 IS ON, IF HIT WAS USED IN COMFIT                  
C               BIT 1 IS ON, IF DISTANCE ( FIT - HIT ) IS NEGATIVE      
C               BITS 2 - 7 : UNSIGNED 6-BIT INTEGER REPRESENTATION      
C                            OF DISTANCE ( 20 MIKRON UNITS )            
C                                                                       
C***********************************************************************
C                                                                       
      SUBROUTINE VHITLD(I1,I2)                                          
C                                                                       
      IMPLICIT INTEGER*2(H)                                             
C                                                                       
#include "mvtrce.for"
C
      LOGICAL TBIT ! PMF 09/11/99
C                                                                       
      DIMENSION ICODE(7)                                                
C                                                                       
      DATA IBYTE / Z'FF' /                                                
C                                                                       
      ICODE(1) = LAND( ISHFTR(I1,16), IBYTE ) ! PMF 09/11/99 SHFTR->ISHFTR 
      ICODE(2) = LAND( ISHFTR(I1, 8), IBYTE )                            
      ICODE(3) = LAND(       I1    , IBYTE )                            
      ICODE(4) = LAND( ISHFTR(I2,24), IBYTE )                           
      ICODE(5) = LAND( ISHFTR(I2,16), IBYTE )                           
      ICODE(6) = LAND( ISHFTR(I2, 8), IBYTE )                           
      ICODE(7) = LAND(       I2    , IBYTE )                            
C                                                                       
      DO 100 I = 1, 7                                                   
C                                                                       
         HVMSK(I) = 0                                                   
         VRES(I) = 0                                                    
C                                                                       
  100 CONTINUE                                                          
C                                                                       
      IF (TBIT(I1,1)) HVMSK(1) = -2                                     
      IF (TBIT(I1,2)) HVMSK(2) = -2                                     
      IF (TBIT(I1,3)) HVMSK(3) = -2                                     
      IF (TBIT(I1,4)) HVMSK(4) = -2                                     
      IF (TBIT(I1,5)) HVMSK(5) = -2                                     
      IF (TBIT(I1,6)) HVMSK(6) = -2                                     
      IF (TBIT(I1,7)) HVMSK(7) = -2                                     
C                                                                       
      DO 200 I = 1, 7                                                   
C                                                                       
         IF (HVMSK(I).EQ.0) GOTO 200                                    
C                                                                       
         IC = ICODE(I)                                                  
         IS = 1                                                         
         IF (TBIT(IC,24)) HVMSK(I) = 2                                  
         IF (TBIT(IC,25)) IS = -1                                       
         IDIST = IS * ( LAND( IC, 63 ) * 2 + 1 )                        
         VRES(I) = FLOAT(IDIST) * 0.010                                 
C                                                                       
  200 CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               

**********************************************************************
*
* 11/09/99  VTXDAV, DXYZ2, DXYZ2D, DXYZ2S, CHI2
*     from file "vertex.s.seq"
*
*     This code was manually translated from MORTRAN to FORTRAN
*
**********************************************************************


***HEADER*** MEMBER  VTXDAV         SAVED BY F22HAG  ON 87/11/19  AT 17:53      
C"   05/01/87 711191753  MEMBER NAME  VTXDAV   (S)           MORTRA34 "          
C%MACRO 'F22KLE.JVTXC.S(MORTMAC)'                                                
C"                                                                               
**870106*KLEINWORT***************************************************           
*                                                                   *           
*   VERTEX FIT WITH DAVIDON'S VARIANCE ALGORITHM                    *           
*                                                                   *           
*   IRET >  0 : NUMBER OF ITERATIONS                                *           
*        = -1 : NV < 1 OR NV > 20                                   *           
*        = -2 : NT < 1                                              *           
*        = -3 : NO CONVERGENCE                                      *           
*        = -4 : DIAGONAL ELEMENT OF COVARIANCE MATRIX .LE. 0.       *           
*        = -5 : NDF = N*(IDIM-1) - IDIM < 1                         *           
*                                                                   *           
*    BIT 28 ON IN MODE --> NO FIT IN Z ( IDIM = 2 )                 *   00011000
*    BIT 24 ON IN MODE --> PENALTY FOR                              *   00011000
*       ST < S(ORIGIN) - SP0 OR ST > S(FIRST HIT) + SP0             *           
*                                                                   *           
*********************************************************************           
C
      SUBROUTINE VTXDAV(IRET)
C
      IMPLICIT INTEGER*2 (H)
      LOGICAL TBIT
C
#include "mvertex0.for"
#include "mvertex1.for"
#include "mvertex2.for"
C
      LOGICAL DONE
      REAL*4 LAM
      REAL*8 XMD(20),YMD(20),RD(20),RR,DR,XD,YD,DIST
C
      DIMENSION S0(20), EX0(20), EY0(20)
C
      EQUIVALENCE (A(1),XMD(1)), (A(21),YMD(1)), (A(41),RD(1)),
     +     (A(61),S0(1)), (A(71),EX0(1)), (A(81),EY0(1))
C
      DATA NCALL / 0 /
                                                                                
      DATA
     +   ALFA  / 1.0E-3/,
     +   BETA  / 10.0/,
     +   AH    /  1.0E-3/,
     +   AL    / -1.0E-3/,
     +   BH    / -0.9091/,
     +   BL    / -1.1111/,
     +   EPS   / 1.0E-6/,
     +   MXITER  / 30 /
                                                                                
C
      IF( NV.LE.0 .OR. NV.GT.20 ) THEN
         IRET=-1
         RETURN
      ENDIF
C
      NCALL=NCALL+1
      IF( NCALL.EQ.1 )
     +THEN
         IF(.NOT.( (ITDLEN.GE.30).AND.(IVDLEN.GE.10) ))
     +   THEN
            WRITE(*,9001)
 9001       FORMAT(/,' ??? INVALID ITDLEN, IVDLEN ??? ',/)
            STOP
         ENDIF
         WRITE(*,9002)
 9002    FORMAT(/,' === VERTEX FIT IS DONE BY THE DAVIDON',
     +     ' VARIANCE ALGORITHM === ',/)
         WRITE(*,9003)
 9003    FORMAT
     +   (/,' === 19.11.87 : IT(JT+1) IS SET TO 3 FOR EACH TRACK AFTER',         
     +     ' SUCCESSFUL VERTEX FIT === ',/)
         IF( TBIT(MODE,24) ) WRITE(*,9004)
 9004    FORMAT(' === PENALTY FUNCTION WILL BE USED === ',/)
      ENDIF
C
      LV = (NV-1)*IVDLEN
      IV(LV+1) = 0
      IF( NT.LE.0 ) THEN
         IRET=-2
         RETURN
      ENDIF
C
      IVFLG = 1
      N = 0
      J = -ITDLEN
      DO I = 1, NT
         J = J + ITDLEN
         IF (IT(J+1).LE.1) GOTO 8001
         N=N+1
         IF( N.LE.20 ) THEN
            K = N
         ELSE
            MINPT = 55
            DO K = 1, 20
               L = NTIND(K)
               IF (IT(L+13).GE.MINPT) GOTO 8001
               IMIN = K
               MINPT = IT(L+13)
            ENDDO
            IF (IT(J+13).LE.MINPT) GOTO 8001
            K = IMIN
         ENDIF
         NTIND(K) = J
         S(K) = T(J+15)
 8001    CONTINUE
      ENDDO
      IF(N.GT.20) N = 20
C
      IF( TBIT(MODE,28) ) THEN
         IDIM = 2
      ELSE
         IDIM = 3
      ENDIF
      NDF = N*(IDIM-1) - IDIM
C
      IF( NDF.LT.1 ) THEN
         IRET=-5
         RETURN
      ENDIF
C
      SXX=0.0
      SXY=0.0
      SYY=0.0
      SZZ=0.0
      DO I = 1, N
         J = NTIND(I)
         RR = DBLE( T(J+2) )
         RD(I) = DABS(RR)
         XD = DBLE(T(J+5)) - RR*DBLE(T(J+21))
         YD = DBLE(T(J+6)) + RR*DBLE(T(J+22))
         XMD(I) = XD
         YMD(I) = YD
         DR = DBLE(SIGN(1.,T(J+2)))
         PHI = SNGL( DATAN2(-DR*(XD-DBLE(XB)),DR*(YD-DBLE(YB))) )
         CS = COS(PHI)
         SN = SIN(PHI)
         EX0(I) = CS
         EY0(I) = SN
         PHI = PHI - T(J+3)
         IF (ABS(PHI).GT.3.141593) PHI = PHI - SIGN(1.0,PHI)*6.283185
         ST = SNGL(RR)*PHI
         S0(I) = ST
C
         PHI0 = SNGL( DATAN2(-DR*XD,DR*YD) )
         PHI0 = PHI0 - T(J+3)
         IF (ABS(PHI0).GT.3.141593)                                             
     +        PHI0 = PHI0 - SIGN(1.0,PHI0)*6.283185
         T(J+25) = SNGL(RR)*PHI0
C
         CALL DXYZ2( J, ST, DXY2, DZ2 )
         SXX = SXX + CS*CS / DXY2
         SXY = SXY + CS*SN / DXY2
         SYY = SYY + SN*SN / DXY2
         SZZ = SZZ +  1.0  / DZ2
C
      ENDDO
C                                    INITIAL COVARIANCES
      D12 = SXX*SYY
      DET = D12 - SXY**2
      IF( ABS(DET/D12).LT.1.0E-4)
     +THEN
C                                    COLLINEARITY
         IVFLG = 2
         VXX = 1.0
         VXY = 0.0
         VYY = 1.0
      ELSE
         VXX = SXX / DET
         VXY = SXY / DET
         VYY = SYY / DET
      ENDIF
      VXZ = 0.0
      VYZ = 0.0
      VZZ = 1.0 / SZZ
C                                    INITIAL VERTEX
      XV = XB
      YV = YB
      ZV = ZB
C
      ITER = 0
      DONE = .FALSE.
      F = CHI2( N, XV, YV, ZV, GRADX, GRADY, GRADZ )

 7000 CONTINUE
         ITER = ITER + 1
C X* = X - 0.5 V G
         XV9 = XV - 0.5 * ( VXX*GRADX + VXY*GRADY + VXZ*GRADZ )
         YV9 = YV - 0.5 * ( VXY*GRADX + VYY*GRADY + VYZ*GRADZ )
         ZV9 = ZV - 0.5 * ( VXZ*GRADX + VYZ*GRADY + VZZ*GRADZ )
         F9 = CHI2( N, XV9, YV9, ZV9, GRAD9X, GRAD9Y, GRAD9Z )
C R =  V G*
         RX = VXX * GRAD9X + VXY * GRAD9Y + VXZ * GRAD9Z
         RY = VXY * GRAD9X + VYY * GRAD9Y + VYZ * GRAD9Z
         RZ = VXZ * GRAD9X + VYZ * GRAD9Y + VZZ * GRAD9Z
C RHO = G* R
         RHO = RX * GRAD9X + RY * GRAD9Y + RZ * GRAD9Z

         IF( RHO .LT. EPS ) THEN
            DONE = .TRUE.
         ELSE
C GAM = -G R / RHO
            GAM = - GRADX * RX - GRADY * RY - GRADZ * RZ
            GAM = GAM / RHO
C DEFINE LAM
            IF( ( AL .LE. GAM ) .AND. ( GAM .LT. AH ) ) THEN
               LAM = ALFA
            ELSEIF( ( BH .LE. GAM ) .AND. ( GAM .LT. AL ) ) THEN
               LAM = -GAM / ( GAM + 1.0 )
            ELSEIF( ( BL .LE. GAM ) .AND. ( GAM .LT. BH ) ) THEN
               LAM = BETA
            ELSE
               LAM = GAM / ( GAM + 1.0 )
            ENDIF
C UPDATE V
            LAM = ( LAM - 1.0 ) / RHO
            VXX = VXX + LAM * RX * RX
            VXY = VXY + LAM * RX * RY
            VYY = VYY + LAM * RY * RY
            VXZ = VXZ + LAM * RX * RZ
            VYZ = VYZ + LAM * RY * RZ
            VZZ = VZZ + LAM * RZ * RZ
C IMPROVEMENT  ?
            IF( F9 .LT. F )
     +      THEN
               F = F9
               XV = XV9
               YV = YV9
               ZV = ZV9
               GRADX = GRAD9X
               GRADY = GRAD9Y
               GRADZ = GRAD9Z
            ENDIF
         ENDIF
      IF( .NOT.( ( ITER .GE. MXITER ) .OR. DONE )) GOTO 7000
C
      IF( .NOT. DONE ) THEN
         IRET=-3
         RETURN
      ENDIF
      IF( (VXX.LE.0.).OR.(VYY.LE.0.).OR.(VZZ.LE.0.) ) THEN
         IRET=-4
         RETURN
      ENDIF
C
      DO I = 1, N
         J = NTIND(I)
         IT(J+1) = 3
      ENDDO
C
      IRET = ITER
      PR = PROB( F9, NDF )
      IV(LV+1) = IVFLG
      IF ((PR.GT.PRCUT).AND.(IVFLG.EQ.1)) IV(LV+1) = 3
      V(LV+2) = XV9
      V(LV+3) = YV9
      V(LV+4) = ZV9
      V(LV+5) = SQRT(VXX)
      V(LV+6) = SQRT(VYY)
      V(LV+7) = SQRT(VZZ)
      IV(LV+8) = N
      V(LV+9) = F9
      IV(LV+10) = N
      V(LV+11) = VXY
      V(LV+12) = VXZ
      V(LV+13) = VYZ
C
      RETURN
      END
C
C
      SUBROUTINE DXYZ2( J, ST, DXY2, DZ2 )
CAV  The CVTX2 block is used with IMPLICIT INTEGER*2 (H)
      INTEGER*2 HVTXST
C
#include "mvertex0.for"
#include "mvertex1.for"
#include "mvertex2.for"
      LOGICAL TBIT
C
      DATA SFR2 / 1.0 / !  ADDITIONAL SIGFAC**2
      DATA NDUMP / 0 /
C                                                                                
      IDERIV = 0
      GOTO 1000
C
      ENTRY DXYZ2D( J, ST, DXY2, DZ2 , DXY2DS, DZ2DS )
C
      IDERIV = 1

 1000 CONTINUE

      SSPACE = ST
      SSCOUL = SSPACE - T(J+18)
      IF ((SSCOUL.GT.0.).OR.(T(J+18).GT.0.)) SSCOUL=0.
      SSCVXC = SSPACE - T(J+19)
      IF(SSCVXC.GT.0.) SSCVXC=0.
C
      X = SSPACE - 0.5*T(J+20)
C                                     ERROR IN XY (SQUARED)

C                                      MULTIPLE SCATTERRING ( TANKWALL )
      DXY2 = (( T(J+16) * SSCOUL )**2 +
C                                     MULTIPLE SCATTERRING ( BEAMPIPE )
     +        ( T(J+17) * SSCVXC )**2 +
C                                     PARABOLA FIT
     +        ((( T(J+32)   *X + T(J+33) ) *X +
     +           T(J+34) ) *X + T(J+35) ) *X + T(J+36)) * SFR2
C                                     DERIVATION OF DXY2 WITH S
      IF (IDERIV.EQ.1)
     +  DXY2DS = ( 2.0 * ( T(J+16)**2 * SSCOUL + T(J+17)**2 * SSCVXC ) +
     +        (( 4.0*T(J+32)   *X + 3.0*T(J+33) ) *X +
     +           2.0*T(J+34) ) *X +     T(J+35)) * SFR2
C
C   PENALTY
C
      IF (TBIT(MODE,24)) THEN
         IF( ST.GT.SP0 ) THEN
            SP = ST - SP0
            DXY2   = DXY2 + (SP/SP1)**2
            DXY2DS = DXY2DS + 2.0*SP/SP1**2
            IF( NDUMP.LT.10 ) THEN
               WRITE(*,9001) J, ST, SP, SP0, SP1
 9001          FORMAT(' VTXDAV : PENALTY AT ',I4,4G13.4 )
            ENDIF
         ELSEIF( ST.LT.(T(J+25)-SP0) ) THEN
            SP = ST - T(J+25) + SP0
            DXY2   = DXY2 + (SP/SP1)**2
            DXY2DS = DXY2DS + 2.0*SP/SP1**2
            IF( NDUMP.LT.10 ) THEN
               WRITE(*,9002) J, ST, SP, SP0, SP1
 9002          FORMAT(' VTXDAV : PENALTY AT ',I4,4G13.4 )
            ENDIF
         ENDIF
      ENDIF
C
C  *** CALCULATION OF ZS-ERRORS
C
      SSCOUL = SSPACE - T(J+18)
      IF (SSCOUL.GT.0.) SSCOUL=0.
      SSCVXC = SSPACE - T(J+19)
      IF (SSCVXC.GT.0.) SSCVXC=0.
C
      SSPACE = SSPACE + T(J+39)
C
      X = SSPACE/T(J+38) - 0.5
C                                      MULTIPLE SCATTERRING
      DZ2 = ( ( T(J+16) * SSCOUL )**2 + ( T(J+17) * SSCVXC )**2 +               
C                                      LINE FIT (WITH TRIPLETS)
     +        T(J+37) * ( 1.5 + 18.*X**2 ) ) * SFR2
C                                     DERIVATION OF DZ2 WITH S
      IF (IDERIV.EQ.1)                                                          
     +   DZ2DS = ( 2.0 * ( T(J+16)**2 * SSCOUL + T(J+17)**2 * SSCVXC ) +         
     +             36.0*T(J+37) * X / T(J+38) ) * SFR2
C
      RETURN
C
      ENTRY DXYZ2S( SFR )
      SFR2 = SFR**2
      RETURN
      END
                                                                                
      FUNCTION CHI2( N, X ,Y, Z, GRX, GRY, GRZ )

#include "mvertex1.for"
CAV  The CVTX2 block is used with IMPLICIT INTEGER*2 (H)
      INTEGER*2 HVTXST
#include "mvertex2.for"
C
      LOGICAL TBIT    ! PMF 09/11/99
C
      REAL*8 XMD(20),YMD(20),RD(20),RR,DR,XD,YD,DIST
C
      DIMENSION S0(20), EX0(20), EY0(20)
C
      EQUIVALENCE (A(1),XMD(1)), (A(21),YMD(1)), (A(41),RD(1)),
     +            (A(61),S0(1)), (A(71),EX0(1)), (A(81),EY0(1))

      CSUM=0.
      GX=0.
      GY=0.
      GZ=0.
C
      DO I = 1 , N                                                              
         J = NTIND(I)
         XD = DBLE(X) - XMD(I)
         YD = DBLE(Y) - YMD(I)
         DIST = DSQRT( XD**2 + YD**2 )
         RR = RD(I)
         DR = DIST - RR

C APPROX. PROJ. EXTRAPOLATION LENGTH
         ST    = SNGL( ( DBLE(EX0(I)) * XD + DBLE(EY0(I)) * YD )
     +         * RR / DIST )
         SPERP = SNGL( ( DBLE(EX0(I)) * YD - DBLE(EY0(I)) * XD )
     +         * RR / DIST )

         ST = ST + S0(I)
         S(I) = ST

C EXTRAPOLATION ERROR SQUARED DXY2(S)
C DERIVATION  D(DXY2)/DS
C EXTRAPOLATION ERROR SQUARED DZ2(S)
C DERIVATION  D(DZ2)/DS
         CALL DXYZ2D( J, ST, DXY2, DZ2, DXY2DS, DZ2DS )
C
C  DISTANCE IN Z
C
         IF( TBIT(MODE,28)) THEN
            ZDIFF = 0.0
         ELSE
            ZDIFF = Z - T(J+7) - ST * T(J+23)
         ENDIF

         F1 = SNGL( DR / DIST ) / DXY2
         F2 = F1*F1 * SPERP * DXY2DS
         F3 = ZDIFF / DZ2
         F4 = F3 * SPERP / SNGL( DIST**2 )

         CHITR(I) = SNGL( DR*DR ) / DXY2 + F3*F3*DZ2
         CSUM = CSUM + CHITR(I)
         GX = GX + F1 * SNGL( 2.0D0 * XD ) -                                    
     +           ( F2 + F4 * ( F3*DZ2DS + 2.0*T(J+23) ) ) * SNGL( YD )
         GY = GY + F1 * SNGL( 2.0D0 * YD ) +
     +           ( F2 + F4 * ( F3*DZ2DS + 2.0*T(J+23) ) ) * SNGL( XD )
         GZ = GZ + 2.0 * F3
      ENDDO
      CHI2 = CSUM
      GRX = GX
      GRY = GY
      GRZ = GZ
      RETURN
      END
