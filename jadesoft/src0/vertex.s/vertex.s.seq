***HEADER*** MEMBER  #START         SAVED BY F22KLE  ON 86/06/11  AT 13:13      
DCL FILE                                                                00000100
SET FILE = DSN('CLIST')                                                 00000200
IF SUBSTR(FILE,1,1) = ' ' GOTO NOFREE                                   00000300
IF SUBSTR(FILE,8,8) = 'CLISTLIB' GOTO NOALC                             00000400
SHOW ' --- FREE CLIST --- '                                             00000500
FREE F(CLIST)                                                           00000600
LABEL NOFREE                                                            00000700
SHOW ' --- ALLOC CLIST --- '                                            00000800
ALLOC F(CLIST) DA(CLISTLIB,JVTXC.CL) SHR                                00000900
LABEL NOALC                                                             00001000
SET FILE = DSN('MACRO')                                                 00001100
IF SUBSTR(FILE,1,1) = ' ' GOTO NOFRE2                                   00001200
IF SUBSTR(FILE,1,6) = 'F11GOD' GOTO NOALC2                              00001300
SHOW ' --- FREE MACRO --- '                                             00001400
FREE F(MACRO)                                                           00001500
LABEL NOFRE2                                                            00001600
SHOW ' --- ALLOC MACRO --- '                                            00001700
ALLOC F(MACRO) DA('F11GOD.PATRECSR') SHR                                00001800
LABEL NOALC2                                                            00001900
SET ESCAPE='%'                                                          00002000
RESHOW OFF                                                              00002100
SHOW TIME                                                               00002200
./ DIR                                                                  00002300
***HEADER*** MEMBER  @DUMPT         SAVED BY F22KLE  ON 86/06/16  AT 16:05      
//F22KLE JOB CLASS=E,NOTIFY=F22KLE,MSGLEVEL=(0,0),TIME=(0,07)           00000100
//*MAIN RELPRI=MED                                                      00000200
// EXEC FCLG,PARM.FORT=XL,REGION.GO=990K                                00000300
%MACRO DUMPT                                                            00000400
//MACRO DD DSN=F11GOD.PATRECSR,DISP=SHR,UNIT=FAST                       00000500
//LKED.SYSLIB DD                                                        00000600
//            DD                                                        00000700
//            DD DISP=SHR,DSN=F22KLE.VERTEX.L                           00000800
//            DD DISP=SHR,DSN=F22KLE.JVTXC.L                            00000900
//            DD DISP=SHR,DSN=F22KLE.CALIB.L                            00001000
//            DD DISP=SHR,DSN=F11LHO.JADEGL                             00001100
//            DD DISP=SHR,DSN=F11GOD.PATRECLD                           00001200
//            DD DISP=SHR,DSN=JADELG.LOAD                               00001300
//            DD DISP=SHR,DSN=F22ALL.JADEMUL                            00001400
//            DD DISP=SHR,DSN=R01UTL.HBOOK321.L                         00001500
//            DD DISP=SHR,DSN=R01UTL.CERN.KERNLIB4                      00001600
//            DD DISP=SHR,DSN=F1EBLO.BOSLIB.L                           00001700
//*-------------------------------------------------------------------- 00001800
//*                     I N P U T                                       00001900
//*-------------------------------------------------------------------- 00002000
//*                                                   FROM MSS, DISK    00002100
//*O.FT02F001 DD DISP=SHR,DSN=F22KLE.FAST.FLTCF.SPRR.TAU13RED           00002200
//GO.FT02F001 DD DSN=F22HAG.MSS.PHOTP,DISP=SHR,DCB=R01DCB.VBS,          00002300
//            MSVGP=VTMP,UNIT=3330V                                     00002400
//*O.FT02F001 DD DSN=F22KLE.MSS.TAU85V13,DISP=SHR,DCB=R01DCB.VBS,       00002500
//*           MSVGP=VJAD,UNIT=3330V                                     00002600
//*                                                   FROM TAPE         00002700
//*O.FT02F001 DD UNIT=TAPE,DISP=OLD,                                    00002800
//*DSN=F22KLE.TAPE.TAU85                                                00002900
//*                                                                     00003000
//*-------------------------------------------------------------------- 00003100
//*                   O U T P U T                                       00003200
//*-------------------------------------------------------------------- 00003300
//*O.FT03F001 DD DUMMY,DCB=R01DCB.VBS                                   00003400
//*                                                                     00003500
***HEADER*** MEMBER  @EE            SAVED BY F22KLE  ON 86/10/06  AT 17:58      
//F22KLE JOB CLASS=A,NOTIFY=F22KLE,MSGLEVEL=(0,0),TIME=(0,30)                   
//*MAIN RELPRI=MED                                                              
// EXEC GEP,GOREGN=1000K,                                                       
//*DN='F22KLE.GEP.EEFAKE.OCT0'                                                  
// DN=NULLFILE                                                                  
%MACRO ERRTST                                                                   
//LKED.SYSLIB DD                                                                
//            DD                                                                
//            DD                                                                
//            DD                                                                
//            DD                                                                
//            DD DISP=SHR,DSN=F22KLE.VERTEX.L                                   
//            DD DISP=SHR,DSN=F22KLE.MYLIB.L                                    
//            DD DISP=SHR,DSN=F22KLE.JVTXC.L                                    
//            DD DISP=SHR,DSN=F22KLE.TT.L                                       
//            DD DISP=SHR,DSN=F22KLE.CALIB.L                                    
//            DD DISP=SHR,DSN=F11GOD.PATRECLD                                   
//            DD DISP=SHR,DSN=F11LHO.JADEGL                                     
//            DD DISP=SHR,DSN=JADELG.LOAD                                       
//            DD DISP=SHR,DSN=F22ALL.JADEMUL                                    
//            DD DISP=SHR,DSN=R01UTL.HBOOK321.L                                 
//            DD DISP=SHR,DSN=R01UTL.CERN.KERNLIB4                              
//            DD DISP=SHR,DSN=F1EBLO.BOSLIB.L                                   
//*--------------------------------------------------------------------         
//*                     I N P U T                                               
//*--------------------------------------------------------------------         
//*                                                   FROM MSS, DISK            
//*O.FT02F001 DD DISP=SHR,DSN=F22KLE.FAST.FLTCF.SPRR.TAU13RED                   
//*O.FT02F001 DD DSN=F22KLE.MSS.MCMUHA,DISP=SHR,DCB=R01DCB.VBS,                 
//*           MSVGP=VTMP,UNIT=3330V                                             
//*O.FT02F001 DD DSN=F22KLE.MSS.TAU85V13,DISP=SHR,DCB=R01DCB.VBS,               
//*           MSVGP=VJAD,UNIT=3330V                                             
//*                                                   FROM TAPE                 
//GO.FT02F001 DD UNIT=TAPE,DISP=SHR,                                            
// DSN=F22KLE.TAPE.SPRR.TAU13CF9                                                
//*                                                                             
//*--------------------------------------------------------------------         
//*                   O U T P U T                                               
//*--------------------------------------------------------------------         
//*O.FT03F001 DD DUMMY,DCB=R01DCB.VBS                                           
//*                                                                             
//*O.FT03F001 DD DSN=F22RAM.MSS.QED.ALL,DISP=SHR,                               
//*           DCB=R01DCB.VBS,MSVGP=VJAD,UNIT=3330V                              
//*                                                                             
//*O.FT03F001 DD UNIT=FAST,DISP=(NEW,CATLG,CATLG),                              
//*       DCB=R01DCB.VBS,SPACE=(TRK,(60,10),RLSE),                              
//*       DSN=F22KLE.FAST.QED.NEW                                               
//*                                                                             
//*O.FT03F001 DD UNIT=TAPE,DISP=(NEW,CATLG,CATLG),VOL=(,RETAIN),                
//*      DCB=(RECFM=VBS,LRECL=6236,BLKSIZE=24948),                              
//*      DSN=F22RAM.TAPE.REDUCV.G0144V00                                        
//*--------------------------------------------------------------------         
//*              INPUT FROM, OUTPUT TO NEWLIBMEMBER                             
//*--------------------------------------------------------------------         
//*O.FT10F001 DD DSN=F22KLE.JVTXC.DATA(TAUDATW),DISP=SHR,UNIT=FAST              
//*O.FT15F001 DD DSN=F22KLE.JVTXC.DATA(RVFULLG),DISP=SHR,UNIT=FAST              
//*--------------------------------------------------------------------         
//*              C  A  L  I  B  R  A  T  I  O  N                                
//*--------------------------------------------------------------------         
//*O.FT21F001 DD DISP=SHR,DSN=F11LHO.AUPDAT0                                    
//GO.FT22F001 DD DISP=SHR,DSN=F11LHO.AUPDAT1                                    
//*O.FT11F001 DD DSN=F22KLE.VCALB.S(CALB03),DISP=SHR,UNIT=FAST                  
//*                                                                             
***HEADER*** MEMBER  DRPIPE         SAVED BY F22KLE  ON 86/06/12  AT 12:49      
C   28/11/85 606111914  MEMBER NAME  DRPIPE   (S)           FORTRAN     00000000
C                                                                       00000100
C-----------------------------------------------------------------------00000200
      FUNCTION DRPIPE(DUMMY)                                            00000300
C-----------------------------------------------------------------------00000400
C                                                                       00000500
C                                                                       00000600
C     RETURNS THE BEAMPIPE THICKNESS(MM), BASED ON DATE IN HEAD BANK    00000700
C     MC-DATA: NEW GEOMETRY IS FORCED IF FLAG LVTXC IS TRUE             00000800
C     ARGUMENT DUMMY IS IGNORED.                                        00000900
C                                                                       00001000
C-----------------------------------------------------------------------00001100
C                                                                       00001200
      IMPLICIT INTEGER*2 (H)                                            00001300
C                                                                       00001400
      LOGICAL NEWDET,LVTXC,LNHARD                                       00001500
C                                                                       00001600
      %MACRO 'F11GOD.PATRECSR(CADMIN)'                                  00001700
      %MACRO 'F11GOD.PATRECSR(CDATA)'                                   00001800
      %MACRO 'F11GOD.PATRECSR(CGEO1)'                                   00001900
      %MACRO 'F11GOD.PATRECSR(CGEOV)'                                   00002000
C                                                                       00002100
      COMMON / CVCEX  / LVTXC                                           00002200
C                                                                       00002300
C------------------  C O D E  ------------------------------------------00002400
C                                                                       00002500
      IH2    = 2*IDATA( IBLN( 'HEAD' ) )                                00002600
C                                                                       00002700
      IMONTH = HDATA(IH2+7)                                             00002800
      IYEAR  = HDATA(IH2+8)                                             00002900
C                                                                       00003000
C                            OLD GEOMETRY (PRIOR TO MAY 1984)           00003100
C                                                                       00003200
      DRPIPE = DRPIP                                                    00003300
C                            NEW DETECTOR HARDWARE IN MONTE-CARLO DATA? 00003400
C                            THEN LVTXC IS TRUE (FLAG IS CHECKED AND    00003500
C                                                SET IN RDMTCO)         00003600
C                                                                       00003700
      LNHARD = (IMONTH .GE. 5  .AND.  IYEAR .EQ. 1984)                  00003800
     +                          .OR.  IYEAR .GE. 1985                   00003900
      NEWDET = LVTXC .OR. (IEVTP.EQ.0 .AND. LNHARD)                     00004000
C                                                                       00004100
      IF( .NOT. NEWDET ) RETURN                                         00004200
C                                                                       00004300
C                            NEW GEOMETRY                               00004400
C                                                                       00004500
      DRPIPE = DRPIPV                                                   00004600
C                                                                       00004700
      RETURN                                                            00004800
      END                                                               00004900
***HEADER*** MEMBER  DUMPT          SAVED BY F22KLE  ON 86/06/16  AT 16:43      
C   13/09/85 606161643  MEMBER NAME  DUMPT    (S)           FORTRAN     00000000
C-----------------------------------------------------------------      00000100
C     VERSION OF 16.06.86                                               00000200
C     DUMP T-ARRAY ( FROM VTXPRE )                                      00000300
C-----------------------------------------------------------------      00000400
C                                                                       00000500
      IMPLICIT INTEGER*2 (H)                                            00000600
      LOGICAL*1 LPRINT                                                  00000700
C                                                                       00000800
%MACRO CDATA                                                            00000900
%MACRO CGEOV                                                            00001000
C                                                                       00001100
%MACRO 'F22KLE.JVTXC.S(MVCCAL)'                                         00001200
C                                                                       00001300
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001400
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00001500
C                                                                       00001600
      COMMON /CVTXC/ XB,YB,ZB,RTANK,DTANK,X0INN,SIGX0,SIGZ0,PNTMIN,     00001700
     *               DISTB,COLL2,MITER,DSCONV,PRCUT,IREJTR,EEDPMN,      00001800
     *               EEDPMX,EEDTMX,EEDRMX,SEMAX,SIMAX,SIGFAC,EEXYMN,    00001900
     *               EEXYMX,PHEMAX,SIG1,SIG2,SIG3,CSECV                 00002000
C                                                                       00002100
      EXTERNAL JADEBD                                                   00002200
      EXTERNAL BDVTXC                                                   00002300
C                                                                       00002400
      DATA  IUNIT  / 2 /                                                00002500
C                                                                       00002600
      DATA  IFEV / 100 /                                                00002700
      DATA  MXEV /  10 /                                                00002800
C                                                                       00002900
      CALL BINT(40000,20000,500,500)                                    00003000
C     CALL BWRO( IWUNIT, 1558, 2 )                                      00003100
C                                                                       00003200
      VROTG = VROT*F57                                                  00003300
C                                                                       00003400
      CALL VTXINI                                                       00003500
      MODE = 512                                                        00003600
C                                                                       00003700
      MAXEVT = MXEV + IFEV - 1                                          00003800
      NPR = 0                                                           00003900
C                                       LOOP OVER EVENTS                00004000
      DO 900 IEV = 1, MAXEVT                                            00004100
         IF(JUHR(2) .EQ. 2) GOTO 4010                                   00004200
C                                                                       00004300
         LPRINT = .FALSE.                                               00004400
C                                                                       00004500
         CALL EVREAD(IUNIT,IRET)                                        00004600
         IF (IRET .EQ. 2) GOTO 4030                                     00004700
C                                                                       00004800
         IPHEAD = IDATA( IBLN('HEAD') )                                 00004900
         IF (IPHEAD .LE. 0) GOTO 899                                    00005000
C                                                                       00005100
         NRUN  = HDATA( 2*IPHEAD+ 10 )                                  00005200
         NREC  = HDATA( 2*IPHEAD+ 11 )                                  00005300
         NEVT = NEVT + 1                                                00005400
         IF (IEV.LT.IFEV) GOTO 899                                      00005500
C ***                                                                   00005600
CCC      HDATA( 2*IPHEAD + 18 ) = -1                                    00005700
C ***                                                                   00005800
         CALL CLOC(IPAT,'PATR',IPNR)                                    00005900
         IF (IPAT.GT.0) GOTO 60                                         00006000
            IPAT = IDATA(IBLN('PATR'))                                  00006100
            IF (IPAT.LE.0) GOTO 60                                      00006200
               IPNR = IDATA(IPAT-2)                                     00006300
               IF (IEV.GT.0) GOTO 60                                    00006400
                  WRITE(6,9642) IPNR                                    00006500
9642              FORMAT(/' **** #PATR = ',I2,' ****'/)                 00006600
  60     CONTINUE                                                       00006700
         IF (IPAT.LE.0) GOTO  899                                       00006800
C                                                                       00006900
         CALL VTXPRE(IPHEAD,IPAT)                                       00007000
C                                                                       00007100
         IF (NPR.GE.MXEV) GOTO 505                                      00007200
            NPR = NPR + 1                                               00007300
            WRITE(6,9324) NRUN,NREC,IEV,NT                              00007400
 9324       FORMAT(/' ===== NRUN,NREC,IEV,NT : ',4I5)                   00007500
            IF (NT.LE.0) GOTO 505                                       00007600
            WRITE(6,9325) ((T(J*40+K-40),K=1,40),J=1,NT)                00007700
 9325       FORMAT((I13,9G13.4/2G13.4,I13,7G13.4/10G13.4/I13,9G13.4))   00007800
  505    CONTINUE                                                       00007900
C                                                                       00008000
         CALL VTXEE                                                     00008100
C                                                                       00008200
  899    CONTINUE                                                       00008300
C        CALL BSLW                                                      00008400
C        CALL BWRITE(IWUNIT)                                            00008500
C                                      NEXT EVENT                       00008600
         CALL BSLT                                                      00008700
         CALL BDLG                                                      00008800
  900 CONTINUE                                                          00008900
C                                                                       00009000
      WRITE(6,4002) NEVT                                                00009100
 4002 FORMAT(/,' ======= NORMAL END AFTER ',I5,' EVENTS =====',/)       00009200
C                                                                       00009300
 1000 CONTINUE                                                          00009400
C                                                                       00009500
      GOTO 5000                                                         00009600
C                                                                       00009700
C *** ABNORMAL TERMINATIONS                                             00009800
C                                                                       00009900
 4010 WRITE(6,4011) NEVT                                                00010000
 4011 FORMAT(/,' ======= TIME OUT AFTER: ',I5, ' EVENTS =========',/    00010100
     &)                                                                 00010200
      GOTO 1000                                                         00010300
 4020 WRITE(6,4021) NRUN,NREC,NEVT                                      00010400
 4021 FORMAT(/,' ======= BREAD ERROR IN RUN, EVT,#EVT: ',3I6,' =====',/)00010500
      GOTO 5000                                                         00010600
 4030 WRITE(6,4031) NRUN,NREC,NEVT                                      00010700
 4031 FORMAT(/,' ======= END OF FILE IN RUN, EVT,#EVT: ',3I6,' =====',/ 00010800
     &)                                                                 00010900
      GOTO 1000                                                         00011000
C                                                                       00011100
C *** END                                                               00011200
C                                                                       00011300
 5000 CONTINUE                                                          00011400
C     CALL BMLT( 0, DUMMY )                                             00011500
C     CALL BWRITE(IWUNIT)                                               00011600
      CALL BSTA                                                         00011700
      CALL PALL                                                         00011800
      CALL VTXSTA                                                       00011900
C                                                                       00012000
      STOP                                                              00012100
      END                                                               00012200
***HEADER*** MEMBER  EE             SAVED BY F22KLE  ON 86/06/20  AT 13:14      
C   13/09/85 606201314  MEMBER NAME  EE       (S)           FORTRAN     00000000
C-----------------------------------------------------------------      00000100
C     VERSION OF 16.06.86                                               00000200
C     STUDIES WITH VTXEE                                                00000300
C-----------------------------------------------------------------      00000400
C                                                                       00000500
      IMPLICIT INTEGER*2 (H)                                            00000600
      LOGICAL*1 LPRINT                                                  00000700
C                                                                       00000800
%MACRO CDATA                                                            00000900
%MACRO CGEOV                                                            00001000
C                                                                       00001100
%MACRO 'F22KLE.JVTXC.S(MVCCAL)'                                         00001200
C                                                                       00001300
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001400
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00001500
C                                                                       00001600
      COMMON /CVTXC/ XB,YB,ZB,RTANK,DTANK,X0INN,SIGX0,SIGZ0,PNTMIN,     00001700
     *               DISTB,COLL2,MITER,DSCONV,PRCUT,IREJTR,EEDPMN,      00001800
     *               EEDPMX,EEDTMX,EEDRMX,SEMAX,SIMAX,SIGFAC,EEXYMN,    00001900
     *               EEXYMX,PHEMAX,SIG1,SIG2,SIG3,CSECV                 00002000
C                                                                       00002100
      DIMENSION ITEE(50)                                                00002200
C                                                                       00002300
      EXTERNAL JADEBD                                                   00002400
      EXTERNAL BDVTXC                                                   00002500
C                                                                       00002600
      DATA  IUNIT  / 2 /                                                00002700
C                                                                       00002800
      DATA  IFEV /    1 /                                               00002900
      DATA  MXEV / 2000 /                                               00003000
C                                                                       00003100
      CALL BINT(40000,20000,500,500)                                    00003200
C     CALL BWRO( IWUNIT, 1558, 2 )                                      00003300
C                                                                       00003400
      VROTG = VROT*F57                                                  00003500
C                                                                       00003600
      CALL GEPI                                                         00003700
      CALL BINS0(90,80,'0 1 40;')                                       00003800
      CALL BINS0(91,80,'-3.5 1 7;')                                     00003900
      CALL BINS0(92,80,'0 1 60;')                                       00004000
      CALL BINS0(93,80,'0 8 100;')                                      00004100
      CALL BINS0(94,80,'-50 1 100;')                                    00004200
      CALL DST1(1,90,1,80,' NV;')                                       00004300
      CALL DST1(2,91,1,80,' EG;')                                       00004400
      CALL DST1(3,91,1,80,' EG,REC;')                                   00004500
      CALL DST1(10,93,4,80,' REE;')                                     00004600
      CALL DST2(20,92,91,4,80,' LD E /IP*10+IT;')                       00004700
      CALL DST1(11,94,4,80,' RHO;')                                     00004800
C                                                                       00004900
      DO 1 I = 1, 7                                                     00005000
C                                                                       00005100
         CALL DST1(100+I,93,1,80,' REE;')                               00005200
         CALL DST1(110+I,94,1,80,' RHO;')                               00005300
         CALL DST0(120+I,1,80,' DXY;')                                  00005400
         CALL DST0(130+I,1,80,' SDXY;')                                 00005500
C                                                                       00005600
    1 CONTINUE                                                          00005700
C                                                                       00005800
      CALL VTXINI                                                       00005900
      MODE = 1024                                                       00006000
C                                                                       00006100
      MAXEVT = MXEV + IFEV - 1                                          00006200
      NPR = 10                                                          00006300
      ALN2 = ALOG(2.)                                                   00006400
C                                       LOOP OVER EVENTS                00006500
      DO 900 IEV = 1, MAXEVT                                            00006600
         IF(JUHR(2) .EQ. 2) GOTO 4010                                   00006700
C                                                                       00006800
         LPRINT = .FALSE.                                               00006900
C                                                                       00007000
         CALL EVREAD(IUNIT,IRET)                                        00007100
         IF (IRET .EQ. 2) GOTO 4030                                     00007200
C                                                                       00007300
         IPHEAD = IDATA( IBLN('HEAD') )                                 00007400
         IF (IPHEAD .LE. 0) GOTO 899                                    00007500
C                                                                       00007600
         NRUN  = HDATA( 2*IPHEAD+ 10 )                                  00007700
         NREC  = HDATA( 2*IPHEAD+ 11 )                                  00007800
         NEVT = NEVT + 1                                                00007900
         IF (IEV.LT.IFEV) GOTO 899                                      00008000
C                                                                       00008100
         MEV   = HDATA( 2*IPHEAD + 29 )                                 00008200
         EPHOT = FLOAT(MEV) * 0.001                                     00008300
         EG    = ALOG(EPHOT)/ALN2                                       00008400
         IEG   = IFIX(EG + 4.5)                                         00008500
C ***                                                                   00008600
CCC      HDATA( 2*IPHEAD + 18 ) = -1                                    00008700
C ***                                                                   00008800
         CALL CLOC(IPAT,'PATR',IPNR)                                    00008900
         IF (IPAT.GT.0) GOTO 60                                         00009000
            IPAT = IDATA(IBLN('PATR'))                                  00009100
            IF (IPAT.LE.0) GOTO 60                                      00009200
               IPNR = IDATA(IPAT-2)                                     00009300
               IF (IEV.GT.0) GOTO 60                                    00009400
                  WRITE(6,9642) IPNR                                    00009500
9642              FORMAT(/' **** #PATR = ',I2,' ****'/)                 00009600
  60     CONTINUE                                                       00009700
         IF (IPAT.LE.0) GOTO  899                                       00009800
C                                                                       00009900
         CALL VTXPRE(IPHEAD,IPAT)                                       00010000
C                                                                       00010100
         NV = 0                                                         00010200
         NTEE = 0                                                       00010300
         CALL VTXEE                                                     00010400
C                                                                       00010500
         DO 200 I = 1, NT                                               00010600
C                                                                       00010700
            JT = (I-1)*40                                               00010800
            IF (IT(JT+1).NE.3) GOTO 200                                 00010900
C                                                                       00011000
            NTEE = NTEE + 1                                             00011100
            ITEE(NTEE) = I                                              00011200
C                                                                       00011300
  200    CONTINUE                                                       00011400
C                                                                       00011500
         IF (((NTEE.EQ.0).OR.(NPR.LE.0)).AND.(NTEE.LT.4)) GOTO 210      00011600
             WRITE(6,9033) NRUN,NREC,EPHOT,(ITEE(K),K=1,NTEE)           00011700
 9033        FORMAT(' EE : ',2I6,F7.3,(25I3/))                          00011800
             NV6 = NV*6                                                 00011900
             WRITE(6,9034)                                              00012000
     &          ((IVTXST((K-1)*6+J),J=1,3),                             00012100
     &           (AVTXST((K-1)*6+J),J=4,6),K=1,NV)                      00012200
 9034        FORMAT((3I5,3G13.4,4X))                                    00012300
             NPR = NPR - 1                                              00012400
  210    CONTINUE                                                       00012500
C                                                                       00012600
         CALL HIST(1,FLOAT(NV))                                         00012700
         CALL HIST(2,EG)                                                00012800
C                                                                       00012900
         NV1 = NV + 1                                                   00013000
         DO 700 I = 1, NV1                                              00013100
C                                                                       00013200
            IF (I.GT.NV) GOTO 500                                       00013300
C                                                                       00013400
            JV = (I-1)*10                                               00013500
            IF (IV(JV+1).NE.4) GOTO 700                                 00013600
            CALL HIST(3,EG)                                             00013700
C                                                                       00013800
            REE = SQRT( V(JV+2)**2 + V(JV+3)**2 )                       00013900
C                                                                       00014000
            CALL HIST(10,REE)                                           00014100
            CALL HIST(100+IEG,REE)                                      00014200
C                                                                       00014300
  500       CONTINUE                                                    00014400
C                                                                       00014500
            J = (I-1)*6                                                 00014600
C                                                                       00014700
            CALL DPLOT(20,FLOAT(IVTXST(J+1)),EG)                        00014800
            CALL DPLOT(20,FLOAT(IVTXST(J+2)),EG)                        00014900
            CALL DPLOT(20,FLOAT(IVTXST(J+3)),EG)                        00015000
C                                                                       00015100
            CALL HIST(11,AVTXST(J+4))                                   00015200
            CALL HIST(110+IEG,AVTXST(J+4))                              00015300
C                                                                       00015400
            CALL HIST(120+IEG,AVTXST(J+5))                              00015500
            CALL HIST(130+IEG,AVTXST(J+6))                              00015600
C                                                                       00015700
  700    CONTINUE                                                       00015800
C                                                                       00015900
  899    CONTINUE                                                       00016000
C        CALL BSLW                                                      00016100
C        CALL BWRITE(IWUNIT)                                            00016200
C                                      NEXT EVENT                       00016300
         CALL BSLT                                                      00016400
         CALL BDLG                                                      00016500
  900 CONTINUE                                                          00016600
C                                                                       00016700
      WRITE(6,4002) NEVT                                                00016800
 4002 FORMAT(/,' ======= NORMAL END AFTER ',I5,' EVENTS =====',/)       00016900
C                                                                       00017000
 1000 CONTINUE                                                          00017100
C                                                                       00017200
      GOTO 5000                                                         00017300
C                                                                       00017400
C *** ABNORMAL TERMINATIONS                                             00017500
C                                                                       00017600
 4010 WRITE(6,4011) NEVT                                                00017700
 4011 FORMAT(/,' ======= TIME OUT AFTER: ',I5, ' EVENTS =========',/    00017800
     &)                                                                 00017900
      GOTO 1000                                                         00018000
 4020 WRITE(6,4021) NRUN,NREC,NEVT                                      00018100
 4021 FORMAT(/,' ======= BREAD ERROR IN RUN, EVT,#EVT: ',3I6,' =====',/)00018200
      GOTO 5000                                                         00018300
 4030 WRITE(6,4031) NRUN,NREC,NEVT                                      00018400
 4031 FORMAT(/,' ======= END OF FILE IN RUN, EVT,#EVT: ',3I6,' =====',/ 00018500
     &)                                                                 00018600
      GOTO 1000                                                         00018700
C                                                                       00018800
C *** END                                                               00018900
C                                                                       00019000
 5000 CONTINUE                                                          00019100
C     CALL BMLT( 0, DUMMY )                                             00019200
C     CALL BWRITE(IWUNIT)                                               00019300
      CALL BSTA                                                         00019400
      CALL PALL                                                         00019500
      CALL VTXSTA                                                       00019600
      CALL GEPW                                                         00019700
C                                                                       00019800
      STOP                                                              00019900
      END                                                               00020000
***HEADER*** MEMBER  EEFAKE         SAVED BY F22KLE  ON 86/10/02  AT 14:12      
C   13/09/85 610021352  MEMBER NAME  EEFAKE   (S)           FORTRAN     00000000
C-----------------------------------------------------------------      00000100
C     VERSION OF 16.06.86                                               00000200
C     STUDIES WITH VTXEE                                                00000300
C-----------------------------------------------------------------      00000400
C                                                                       00000500
      IMPLICIT INTEGER*2 (H)                                            00000600
      LOGICAL*1 LPRINT                                                  00000700
C                                                                       00000800
%MACRO CDATA                                                            00000900
%MACRO CGEOV                                                            00001000
C                                                                       00001100
%MACRO 'F22KLE.JVTXC.S(MVCCAL)'                                         00001200
C                                                                       00001300
C     COMMON /CWORK1/ NT,T(1500),NV,V(200),XXXXX(151),                  00001310
C    *                JTGOD(50),JTBAD(50),VSAVE(10),V2(20,7)            00001320
C     DIMENSION IT(2),IV(2),IV2(20,7)                                   00001330
C     EQUIVALENCE (T(1),IT(1)),(V(1),IV(1)),(V2(1,1),IV2(1,1))          00001340
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001400
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00001500
C                                                                       00001600
      COMMON /CVTXC/ XB,YB,ZB,RTANK,DTANK,X0INN,SIGX0,SIGZ0,PNTMIN,     00001700
     *               DISTB,COLL2,MITER,DSCONV,PRCUT,IREJTR,EEDPMN,      00001800
     *               EEDPMX,EEDTMX,EEDRMX,SEMAX,SIMAX,SIGFAC,EEXYMN,    00001900
     *               EEXYMX,PHEMAX,SIG1,SIG2,SIG3,CSECV                 00002000
C                                                                       00002100
      DIMENSION ITEE(50),IT1V(20),IT2V(20)                              00002200
C                                                                       00002300
      EXTERNAL JADEBD                                                   00002400
C                                                                       00002500
      DATA  IUNIT  / 2 /                                                00002600
C                                                                       00002700
      DATA  IPNR  / 10 /                                                00002800
C                                                                       00002900
      DATA  IFEV /    1 /                                               00003000
      DATA  MXEV / 2000 /                                               00003100
      DATA  NPR1 /    0 /                                               00003200
      DATA  NPR3 /    5 /                                               00003210
      DATA  NPR2 /   10 /                                               00003300
      DATA  ITLEN /  40 /                                               00003400
C                                                                       00003500
      CALL BINT(40000,20000,500,500)                                    00003600
C     CALL BWRO( IWUNIT, 1558, 2 )                                      00003700
C                                                                       00003800
      CALL GEPI                                                         00003900
      CALL BINS0(90,80,'0 1 40;')                                       00004000
      CALL BINS0(91,80,'-5.5 1 11;')                                    00004100
      CALL BINS0(92,80,'0 1 60;')                                       00004200
      CALL BINS0(93,80,'0 8 100;')                                      00004300
      CALL BINS0(94,80,'0 .5  100;')                                    00004400
      CALL BINS0(94,80,'-30 1 40;')                                     00004500
      CALL DST1(1,90,1,80,' NV;')                                       00004600
      CALL DST1(2,91,4,80,' EG;')                                       00004700
      CALL DST1(3,91,4,80,' EG,REC;')                                   00004800
      CALL DST1(5,95,1,80,' IERR;')                                     00004900
      CALL DST1(10,93,4,80,' REE,ALL;')                                 00005000
      CALL DST1(11,93,4,80,' REE,CONV;')                                00005100
      CALL DST1(20,94,4,80,' DXY,ALL;')                                 00005200
      CALL DST1(21,94,4,80,' DXY,CONV;')                                00005300
C                                                                       00005400
      CALL VTXINI                                                       00005500
C                                                                       00005501
      SIGX0 = SIGX0 / SIGFAC                                            00005502
      SIGZ0 = SIGZ0 / SIGFAC                                            00005503
      SIGFAC = 2.0                                                      00005510
      SIGX0 = SIGX0 * SIGFAC                                            00005511
      SIGZ0 = SIGZ0 * SIGFAC                                            00005512
      WRITE(6,9099) ITLEN,SIGFAC                                        00005520
9099  FORMAT(/' *** ITLEN,SIGFAC : ',I5,G12.4,' ***'/)                  00005530
      MODE = 0                                                          00005600
C                                                                       00005700
      MAXEVT = MXEV + IFEV - 1                                          00005800
      NPR = 10                                                          00005900
      ALN2 = ALOG(2.)                                                   00006000
C                                       LOOP OVER EVENTS                00006100
      DO 900 IEV = 1, MAXEVT                                            00006200
         IF(JUHR(2) .EQ. 2) GOTO 4010                                   00006300
C                                                                       00006400
         LPRINT = .FALSE.                                               00006500
C                                                                       00006600
         CALL EVREAD(IUNIT,IRET)                                        00006700
         IF (IRET .EQ. 2) GOTO 4030                                     00006800
C                                                                       00006900
         IPHEAD = IDATA( IBLN('HEAD') )                                 00007000
         IF (IPHEAD .LE. 0) GOTO 899                                    00007100
C                                                                       00007200
         NRUN  = HDATA( 2*IPHEAD+ 10 )                                  00007300
         NREC  = HDATA( 2*IPHEAD+ 11 )                                  00007400
         NEVT = NEVT + 1                                                00007500
         IF (IEV.LT.IFEV) GOTO 899                                      00007600
C ***                                                                   00007700
CCC      HDATA( 2*IPHEAD + 18 ) = -1                                    00007800
C ***                                                                   00007900
         CALL CLOC(IPAT,'PATR',IPNR)                                    00008000
         IF (IPAT.GT.0) GOTO 60                                         00008100
            IPAT = IDATA(IBLN('PATR'))                                  00008200
            IF (IPAT.LE.0) GOTO 60                                      00008300
               IPNR = IDATA(IPAT-2)                                     00008400
               IF (IEV.GT.1) GOTO 60                                    00008500
                  WRITE(6,9642) IPNR                                    00008600
9642              FORMAT(/' **** #PATR = ',I2,' ****'/)                 00008700
  60     CONTINUE                                                       00008800
         IF (IPAT.LE.0) GOTO  899                                       00008900
C                                                                       00009000
         CALL CLOC(IVECT0,'VECT',0)                                     00009100
C                                                                       00009200
         IF (IVECT0.LE.0) GOTO  899                                     00009300
C                                                                       00009400
         NPV0  = IDATA(IVECT0+4)                                        00009500
         IHLV0 = IDATA(IVECT0+1)                                        00009600
         IPLV0 = IDATA(IVECT0+2)                                        00009700
C                                                                       00009800
         IP = IVECT0 + IHLV0                                            00009900
         DO 100 I = 1, NPV0                                             00010000
C                                                                       00010100
            IF (IDATA(IP+7).EQ.-1) CALL HIST(2,ALOG(ADATA(IP+4))/ALN2)  00010200
            IP = IP + IPLV0                                             00010300
C                                                                       00010400
  100    CONTINUE                                                       00010500
C                                                                       00010600
         CALL VTXPRE(IPHEAD,IPAT)                                       00010700
C                                                                       00010800
         IF (NPR3.LE.0) GOTO 101                                        00010801
C                                                                       00010802
            NPR3 = NPR3 - 1                                             00010810
            WRITE(6,9324) NRUN,NREC,IEV,NT,IDATA(IPAT+3),IDATA(IPAT+4)  00010820
 9324       FORMAT(/' ===== NRUN,NREC,IEV,NT : ',4I5,2X,2I6)            00010830
            IF (NT.LE.0) GOTO 101                                       00010840
            WRITE(6,9325) ((T(J*40+K-40),K=1,40),J=1,NT)                00010850
 9325       FORMAT((I13,9G13.4/2G13.4,I13,7G13.4/10G13.4/I13,9G13.4))   00010860
C                                                                       00010861
  101    CONTINUE                                                       00010870
C                                                                       00010880
         NV = 0                                                         00010900
         NTEE = 0                                                       00011000
         CALL VTXEE                                                     00011100
C                                                                       00011200
         IF ((NV.LE.0).OR.(NPR1.LE.0)) GOTO 102                         00011300
                                                                        00011400
             NPR1 = NPR1 - 1                                            00011500
             WRITE(6,9077) NT,(K,IT(K*40-39),IT(K*40-26),K=1,NT)        00011600
 9077        FORMAT(' T: ',I3,10(I4,2I3))                               00011700
             WRITE(6,9078) NV,(IV(K*10-9),IV(K*10-1),IV(K*10),K=1,NV)   00011800
 9078        FORMAT(' V: ',I3,10(I4,2I3))                               00011900
C                                                                       00012000
  102    CONTINUE                                                       00012100
C                                                                       00012200
         DO 200 I = 1, 20                                               00012300
C                                                                       00012400
            IT1V(I) = 0                                                 00012500
            IT2V(I) = 0                                                 00012600
C                                                                       00012700
  200    CONTINUE                                                       00012800
C                                                                       00012900
         DO 201 I = 1, NT                                               00013000
C                                                                       00013100
            JT = (I-1)*ITLEN                                            00013200
            IF (IT(JT+1).NE.3) GOTO 201                                 00013300
C                                                                       00013400
            NTEE = NTEE + 1                                             00013500
            ITEE(NTEE) = I                                              00013600
C                                                                       00013700
            JV = IT(JT+14)                                              00013800
            IT1V(JV) = IT2V(JV)                                         00013900
            IT2V(JV) = I                                                00014000
C                                                                       00014100
C           IF (IEV.EQ.11) WRITE(6,9065) I,JV,(IT1V(K),IT2V(K),K=1,NV)  00014200
C9065       FORMAT(' ITV : ',2I3,10(2X,2I3))                            00014300
C                                                                       00014400
  201    CONTINUE                                                       00014500
C                                                                       00014600
         IF (((NTEE.EQ.0).OR.(NPR.LE.0)).AND.(NTEE.LT.4)) GOTO 210      00014700
             WRITE(6,9033) NRUN,NREC                                    00014800
     &                    ,(IT1V(K),IT2V(K),K=1,NV)                     00014900
 9033        FORMAT(' EE : ',2I6,(24I3/))                               00015000
             NPR = NPR - 1                                              00015100
  210    CONTINUE                                                       00015200
C                                                                       00015300
         CALL HIST(1,FLOAT(NV))                                         00015400
         IF (NV.LE.0) GOTO 899                                          00015500
C                                                                       00015600
         DO 700 I = 1, NV                                               00015700
C                                                                       00015800
            JV = (I-1)*10                                               00015900
            IF (IV(JV+1).NE.4) GOTO 700                                 00016000
C                                                                       00016100
            REE = SQRT( V(JV+2)**2 + V(JV+3)**2 )                       00016200
C                                                                       00016300
            CALL EETEST(IPNR,IT1V(I),IT2V(I),EG,XC,YC,IERR)             00016400
C                                                                       00016500
            CALL HIST(5,FLOAT(IERR))                                    00016600
            IF ((IERR.EQ.-11).OR.(IERR.EQ.-21)) GOTO 700                00016700
            CALL HIST(10,REE)                                           00016800
C           CALL HIST(20,V(JV+9))                                       00016900
            IF (IERR.LE.0) GOTO 700                                     00017000
C                                                                       00017100
            EG = ALOG(EG)/ALN2                                          00017200
            CALL HIST(3,EG)                                             00017300
            CALL HIST(11,REE)                                           00017400
C           CALL HIST(21,V(JV+9))                                       00017500
C                                                                       00017600
            IF ((NPR2.LE.0).OR.(REE.LT.200.)) GOTO 700                  00017700
            WRITE(6,9037) IERR,IT1V(I),IT2V(I),EG                       00017800
 9037       FORMAT(' ??? IERR,IT1,IT2,EG : ',3I5,F10.3)                 00017900
            NPR2 = NPR2 - 1                                             00018000
C                                                                       00018100
  700    CONTINUE                                                       00018200
C                                                                       00018300
  899    CONTINUE                                                       00018400
C        CALL BSLW                                                      00018500
C        CALL BWRITE(IWUNIT)                                            00018600
C                                      NEXT EVENT                       00018700
         CALL BSLT                                                      00018800
         CALL BDLG                                                      00018900
  900 CONTINUE                                                          00019000
C                                                                       00019100
      WRITE(6,4002) NEVT                                                00019200
 4002 FORMAT(/,' ======= NORMAL END AFTER ',I5,' EVENTS =====',/)       00019300
C                                                                       00019400
 1000 CONTINUE                                                          00019500
C                                                                       00019600
      GOTO 5000                                                         00019700
C                                                                       00019800
C *** ABNORMAL TERMINATIONS                                             00019900
C                                                                       00020000
 4010 WRITE(6,4011) NEVT                                                00020100
 4011 FORMAT(/,' ======= TIME OUT AFTER: ',I5, ' EVENTS =========',/    00020200
     &)                                                                 00020300
      GOTO 1000                                                         00020400
 4020 WRITE(6,4021) NRUN,NREC,NEVT                                      00020500
 4021 FORMAT(/,' ======= BREAD ERROR IN RUN, EVT,#EVT: ',3I6,' =====',/)00020600
      GOTO 5000                                                         00020700
 4030 WRITE(6,4031) NRUN,NREC,NEVT                                      00020800
 4031 FORMAT(/,' ======= END OF FILE IN RUN, EVT,#EVT: ',3I6,' =====',/ 00020900
     &)                                                                 00021000
      GOTO 1000                                                         00021100
C                                                                       00021200
C *** END                                                               00021300
C                                                                       00021400
 5000 CONTINUE                                                          00021500
C     CALL BMLT( 0, DUMMY )                                             00021600
C     CALL BWRITE(IWUNIT)                                               00021700
      CALL BSTA                                                         00021800
      CALL PALL                                                         00021900
C     CALL VTXSTA                                                       00022000
      CALL GEPW                                                         00022100
C                                                                       00022200
      STOP                                                              00022300
      END                                                               00022400
***HEADER*** MEMBER  EEMC           SAVED BY F22KLE  ON 86/06/24  AT 14:09      
C   13/09/85 606241409  MEMBER NAME  EEMC     (S)           FORTRAN     00000000
C-----------------------------------------------------------------      00000100
C     VERSION OF 16.06.86                                               00000200
C     STUDIES FOR VTXEE WITH MC-CONVERSIONS                             00000300
C-----------------------------------------------------------------      00000400
C                                                                       00000500
      IMPLICIT INTEGER*2 (H)                                            00000600
      LOGICAL*1 LPRINT                                                  00000700
C                                                                       00000800
%MACRO CDATA                                                            00000900
%MACRO CGEOV                                                            00001000
C                                                                       00001100
%MACRO 'F22KLE.NEW.S(MVERTEX1)'                                         00001200
%MACRO 'F22KLE.NEW.S(MVERTEX2)'                                         00001300
C                                                                       00001400
      COMMON /CVTXC/ XB,YB,ZB,RTANK,DTANK,X0INN,SIGX0,SIGZ0,PNTMIN,     00001500
     *               DISTB,COLL2,MITER,DSCONV,PRCUT,IREJTR,EEDPMN,      00001600
     *               EEDPMX,EEDTMX,EEDRMX,SEMAX,SIMAX,SIGFAC,EEXYMN,    00001700
     *               EEXYMX,PHEMAX,SIG1,SIG2,SIG3,CSECV                 00001800
C                                                                       00001900
      DIMENSION ITEE(50)                                                00002000
C                                                                       00002100
      EXTERNAL JADEBD                                                   00002200
C                                                                       00002300
      DATA  IUNIT  / 2 /                                                00002400
C                                                                       00002500
      DATA  IFEV /    1 /                                               00002600
      DATA  MXEV / 2000 /                                               00002700
C                                                                       00002800
      CALL BINT(40000,20000,500,500)                                    00002900
C     CALL BWRO( IWUNIT, 1558, 2 )                                      00003000
C                                                                       00003100
      CALL GEPI                                                         00003200
      CALL BINS0(90,80,'0 1 40;')                                       00003300
      CALL BINS0(91,80,'0 8 100;')                                      00003400
      CALL BINS0(92,80,'-1 -1 100;')                                    00003500
      CALL BINS0(93,80,'-50 1 100;')                                    00003600
      CALL BINS0(94,80,'150 1 50;')                                     00003700
      CALL BINS0(95,80,'0 .1 100;')                                     00003800
      CALL BINS0(96,80,'-3.5 1 7;')                                     00003900
      CALL DST1(1,90,1,80,' NV;')                                       00004000
      CALL DST1(2,96,1,80,' EG;')                                       00004100
      CALL DST1(3,96,1,80,' EG,PATR;')                                  00004200
      CALL DST1(10,91,4,80,' REE;')                                     00004300
      CALL DST1(21,93,4,80,' DXY,T;')                                   00004400
      CALL DST1(22,92,4,80,' DPHI,T;')                                  00004500
      CALL DST1(30,91,4,80,' R,P,T;')                                   00004600
      CALL DST1(31,93,4,80,' DXY,P,T;')                                 00004700
      CALL DST1(32,95,4,80,' SDXY,P,T;')                                00004800
      CALL DST1(40,91,4,80,' R,P,B;')                                   00004900
      CALL DST1(41,93,4,80,' DXY,P,B;')                                 00005000
      CALL DST1(50,91,4,80,' R,P,C;')                                   00005100
      CALL DST1(51,93,4,80,' DXY,P,C;')                                 00005200
C                                                                       00005300
      DO 1 I = 1, 7                                                     00005400
C                                                                       00005500
         CALL DST1(100+I,91,4,80,' R,P,T;')                             00005600
         CALL DST1(110+I,93,4,80,' DXY,P,T;')                           00005700
         CALL DST1(120+I,95,4,80,' SDXY,P,T;')                          00005800
C                                                                       00005900
    1 CONTINUE                                                          00006000
C                                                                       00006100
      CALL VTXINI                                                       00006200
      MODE = 0                                                          00006300
      SIGFAC = 1.                                                       00006400
C                                                                       00006500
      MAXEVT = MXEV + IFEV - 1                                          00006600
      NPR = 10                                                          00006700
      ALN2 = ALOG(2.)                                                   00006800
C                                       LOOP OVER EVENTS                00006900
      DO 900 IEV = 1, MAXEVT                                            00007000
         IF(JUHR(2) .EQ. 2) GOTO 4010                                   00007100
C                                                                       00007200
         LPRINT = .FALSE.                                               00007300
C                                                                       00007400
         CALL EVREAD(IUNIT,IRET)                                        00007500
         IF (IRET .EQ. 2) GOTO 4030                                     00007600
C                                                                       00007700
         IPHEAD = IDATA( IBLN('HEAD') )                                 00007800
         IF (IPHEAD .LE. 0) GOTO 899                                    00007900
C                                                                       00008000
         NRUN  = HDATA( 2*IPHEAD+ 10 )                                  00008100
         NREC  = HDATA( 2*IPHEAD+ 11 )                                  00008200
         NEVT = NEVT + 1                                                00008300
         IF (IEV.LT.IFEV) GOTO 899                                      00008400
C                                                                       00008500
         MEV   = HDATA( 2*IPHEAD + 29 )                                 00008600
         EBEAM = FLOAT(MEV) * 0.001                                     00008700
         EG    = ALOG(EBEAM)/ALN2                                       00008800
         IEG   = IFIX(EG + 4.5)                                         00008900
C ***                                                                   00009000
CCC      HDATA( 2*IPHEAD + 18 ) = -1                                    00009100
C ***                                                                   00009200
         CALL CLOC(IPAT,'PATR',IPNR)                                    00009300
         IF (IPAT.GT.0) GOTO 60                                         00009400
            IPAT = IDATA(IBLN('PATR'))                                  00009500
            IF (IPAT.LE.0) GOTO 60                                      00009600
               IPNR = IDATA(IPAT-2)                                     00009700
               IF (IEV.GT.0) GOTO 60                                    00009800
                  WRITE(6,9642) IPNR                                    00009900
9642              FORMAT(/' **** #PATR = ',I2,' ****'/)                 00010000
  60     CONTINUE                                                       00010100
         IF (IPAT.LE.0) GOTO  899                                       00010200
C                                                                       00010300
         CALL VTXPRE(IPHEAD,IPAT)                                       00010400
C                                                                       00010500
         NCONV = 0                                                      00010600
         IF (NT.LE.1) GOTO 890                                          00010700
         NTME = NT - 1                                                  00010800
C                                                                       00010900
         DXYMN = 1.E6                                                   00011000
         DPHIM = 1.E6                                                   00011100
         MT1 = 0                                                        00011200
         MT2 = 0                                                        00011300
C                                                                       00011400
         DO 710 IT1 = 1, NTME                                           00011500
C                                                                       00011600
            J1 = (IT1-1)*40                                             00011700
            IF (IT(J1+1).LT.1) GOTO 710                                 00011800
C                                                                       00011900
            XM1 = T(J1+5) - T(J1+2)*T(J1+21)                            00012000
            YM1 = T(J1+6) + T(J1+2)*T(J1+22)                            00012100
C                                                                       00012200
            IT1PE = IT1 + 1                                             00012300
            DO 700 IT2 = IT1PE, NT                                      00012400
C                                                                       00012500
               J2 = (IT2-1)*40                                          00012600
               IF (IT(J2+1).LT.1) GOTO 700                              00012700
C                                                                       00012800
               CALL EETEST(IPNR,IT1,IT2,EPHOT,XC,YC,IERR)               00012900
               IF (IERR.LE.0) GOTO 710                                  00013000
C                                                                       00013100
               RC = SQRT( XC**2 + YC**2 )                               00013200
               NCONV = NCONV + 1                                        00013300
C                                                                       00013400
               CALL VTXPNT                                              00013500
     &            (J1,XC,YC,XT1,YT1,ZT1,                                00013600
     &             DXT12,DYT12,DZT12,PHIT1,DPHIT1,ST1)                  00013700
               CALL VTXPNT                                              00013800
     &            (J2,XC,YC,XT2,YT2,ZT2,                                00013900
     &             DXT22,DYT22,DZT22,PHIT2,DPHIT2,ST2)                  00014000
C                                                                       00014100
               DXY = SQRT( (XT1-XT2)**2 + (YT1-YT2)**2 )                00014200
               DIST = SQRT((XT2-XM1)**2+(YT2-YM1)**2)                   00014300
               IF (DIST.LT.ABS(T(J1+2))) DXY=-DXY                       00014400
C                                                                       00014500
               DPHI = PHIT1 - PHIT2                                     00014600
               IF (T(J1+2).LT.0.) DPHI=-DPHI                            00014700
               IF (ABS(DPHI).GT.3.141593)                               00014800
     &             DPHI=DPHI-SIGN(1.,DPHI)*6.283185                     00014900
C                                                                       00015000
               IF (ABS(DXY).GE.ABS(DXYMN)) GOTO 300                     00015100
C                                                                       00015200
                  DXYMN = DXY                                           00015300
                  DPHIM = DPHI                                          00015400
                  RCM = RC                                              00015500
                  MT1 = IT1                                             00015600
                  MT2 = IT2                                             00015700
C                                                                       00015800
  300          CONTINUE                                                 00015900
C                                                                       00016000
  700       CONTINUE                                                    00016100
C                                                                       00016200
  710    CONTINUE                                                       00016300
C                                                                       00016400
         IF (IEV.LE.20)                                                 00016500
     &      WRITE(6,9021) NRUN,NREC,IEV,NCONV,MT1,MT2,RCM,DXYMN,DPHIM   00016600
 9021    FORMAT(' NRUN,NREC,IEV,NK,MT1,MT2,RC,DXY,DPHI : ',6I6,3F10.3)  00016700
C                                                                       00016800
         CALL HIST(2,EG)                                                00016900
         IF (NCONV.LE.0) GOTO 890                                       00017000
C                                                                       00017100
         CALL HIST(3,EG)                                                00017200
         CALL HIST(10,RCM)                                              00017300
         IFLAG = 0                                                      00017400
         IF (RCM.LT.160.) IFLAG = 1                                     00017500
         IF (RCM.GT.180.) IFLAG = 2                                     00017600
C                                                                       00017700
         IF (IFLAG.GT.0) GOTO 890                                       00017800
C                                                                       00017900
         CALL HIST(22,DPHIM)                                            00018000
         CALL HIST(21,DXYMN)                                            00018100
C                                                                       00018200
         J1 = (MT1-1)*40                                                00018300
         J2 = (MT2-1)*40                                                00018400
         XM1 = T(J1+5) - T(J1+2)*T(J1+21)                               00018500
         YM1 = T(J1+6) + T(J1+2)*T(J1+22)                               00018600
         XM2 = T(J2+5) - T(J2+2)*T(J2+21)                               00018700
         YM2 = T(J2+6) + T(J2+2)*T(J2+22)                               00018800
         ICFT1 = IT(J1+31)                                              00018900
         ICFT2 = IT(J2+31)                                              00019000
C        EXTRAPOLATION LENGTH                                           00019100
         IF(T(J1+32).EQ.0. .OR. T(J2+32).EQ.0.) GOTO 890                00019200
C        PAIR ORIGIN IN TANK (ADD SQRT(2/3)*COULOMB ERROR)              00019300
         ST1 = T(J1+32)                                                 00019400
         ST2 = T(J2+32)                                                 00019500
         CALL VTXS(J1,ST1,XT1,YT1,ZT1,DXT12,DYT12,DZT12,PHIT1,DPHIT1)   00019600
         CALL VTXS(J2,ST2,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT2,DPHIT2)   00019700
C        DISTANCE IN TANK                                               00019800
         DPHI = PHIT1 - PHIT2                                           00019900
         IF(T(J1+2).LT.0.) DPHI=-DPHI                                   00020000
         IF(ABS(DPHI).GT.3.141593) DPHI=DPHI-SIGN(1.,DPHI)*6.283185     00020100
         PTCFT2 =                                                       00020200
     &   (FLOAT(1-ICFT1)*T(J1+16)**2+FLOAT(1-ICFT2)*T(J2+16)**2) / 1.5  00020300
         STCFT2 = 49. * PTCFT2                                          00020400
         PTANK2 = (T(J1+16)**2+T(J2+16)**2) / 1.5                       00020500
         STANK2 = 49. * PTANK2                                          00020600
         DX2 = (XT1-XT2)**2                                             00020700
         DY2 = (YT1-YT2)**2                                             00020800
         DXY = SQRT(DX2+DY2)                                            00020900
         DIST = SQRT((XT2-XM1)**2+(YT2-YM1)**2)                         00021000
         IF(DIST.LT.ABS(T(J1+2))) DXY=-DXY                              00021100
         ERRXY =                                                        00021200
     &      SQRT(1./(1./DXT12+1./DYT12)+1./(1./DXT22+1./DYT22)+STCFT2)  00021300
C        VERTEX WHERE TRACKS ARE PARALLEL                               00021400
         CALL VTXPNT                                                    00021500
     &      (J1,XM2,YM2,XT1,YT1,ZT1,DXT12,DYT12,DZT12,PHIT1,DPHIT1,ST1) 00021600
         CALL VTXPNT                                                    00021700
     &      (J2,XM1,YM1,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT2,DPHIT2,ST2) 00021800
C                                                                       00021900
C        DXY = SQRT( (XT1-XT2)**2 + (YT1-YT2)**2 )                      00022000
C        DIST = SQRT((XT2-XM1)**2+(YT2-YM1)**2)                         00022100
C        IF (DIST.LT.ABS(T(J1+2))) DXY=-DXY                             00022200
         SDXY = ABS(DXY)/ERRXY                                          00022300
C                                                                       00022400
         XC = (XT1+XT2)*0.5                                             00022500
         YC = (YT1+YT2)*0.5                                             00022600
         RC = SQRT( XC**2 + YC**2 )                                     00022700
C                                                                       00022800
         CALL HIST(30+IFLAG*10,RC)                                      00022900
         CALL HIST(100+IEG,RC)                                          00023000
         CALL HIST(31+IFLAG*10,DXY)                                     00023100
         CALL HIST(110+IEG,DXY)                                         00023200
         CALL HIST(32+IFLAG*10,SDXY)                                    00023300
         CALL HIST(120+IEG,SDXY)                                        00023400
C                                                                       00023500
  890    CONTINUE                                                       00023600
C                                                                       00023700
         CALL HIST(1,FLOAT(NCONV))                                      00023800
C                                                                       00023900
  899    CONTINUE                                                       00024000
C        CALL BSLW                                                      00024100
C        CALL BWRITE(IWUNIT)                                            00024200
C                                      NEXT EVENT                       00024300
         CALL BSLT                                                      00024400
         CALL BDLG                                                      00024500
  900 CONTINUE                                                          00024600
C                                                                       00024700
      WRITE(6,4002) NEVT                                                00024800
 4002 FORMAT(/,' ======= NORMAL END AFTER ',I5,' EVENTS =====',/)       00024900
C                                                                       00025000
 1000 CONTINUE                                                          00025100
C                                                                       00025200
      GOTO 5000                                                         00025300
C                                                                       00025400
C *** ABNORMAL TERMINATIONS                                             00025500
C                                                                       00025600
 4010 WRITE(6,4011) NEVT                                                00025700
 4011 FORMAT(/,' ======= TIME OUT AFTER: ',I5, ' EVENTS =========',/    00025800
     &)                                                                 00025900
      GOTO 1000                                                         00026000
 4020 WRITE(6,4021) NRUN,NREC,NEVT                                      00026100
 4021 FORMAT(/,' ======= BREAD ERROR IN RUN, EVT,#EVT: ',3I6,' =====',/)00026200
      GOTO 5000                                                         00026300
 4030 WRITE(6,4031) NRUN,NREC,NEVT                                      00026400
 4031 FORMAT(/,' ======= END OF FILE IN RUN, EVT,#EVT: ',3I6,' =====',/ 00026500
     &)                                                                 00026600
      GOTO 1000                                                         00026700
C                                                                       00026800
C *** END                                                               00026900
C                                                                       00027000
 5000 CONTINUE                                                          00027100
C     CALL BMLT( 0, DUMMY )                                             00027200
C     CALL BWRITE(IWUNIT)                                               00027300
      CALL BSTA                                                         00027400
      CALL PALL                                                         00027500
      CALL VTXSTA                                                       00027600
      CALL GEPW                                                         00027700
C                                                                       00027800
      STOP                                                              00027900
      END                                                               00028000
***HEADER*** MEMBER  EEOLD          SAVED BY F22KLE  ON 86/06/20  AT 15:43      
C   13/09/85 606201539  MEMBER NAME  EEOLD    (S)           FORTRAN     00000000
C-----------------------------------------------------------------      00000100
C     VERSION OF 16.06.86                                               00000200
C     STUDIES WITH OLD VTXEE                                            00000300
C-----------------------------------------------------------------      00000400
C                                                                       00000500
      IMPLICIT INTEGER*2 (H)                                            00000600
      LOGICAL*1 LPRINT                                                  00000700
C                                                                       00000800
%MACRO CDATA                                                            00000900
%MACRO CGEOV                                                            00001000
C                                                                       00001100
%MACRO 'F22KLE.JVTXC.S(MVCCAL)'                                         00001200
C                                                                       00001300
%MACRO 'F22KLE.NEW.S(MVERTEX1)'                                         00001400
%MACRO 'F22KLE.NEW.S(MVERTEX2)'                                         00001500
C                                                                       00001600
      COMMON /CVTXC/ XB,YB,ZB,RTANK,DTANK,X0INN,SIGX0,SIGZ0,PNTMIN,     00001700
     *               DISTB,COLL2,MITER,DSCONV,PRCUT,IREJTR,EEDPMN,      00001800
     *               EEDPMX,EEDTMX,EEDRMX,SEMAX,SIMAX,SIGFAC,EEXYMN,    00001900
     *               EEXYMX,PHEMAX,SIG1,SIG2,SIG3,CSECV                 00002000
C                                                                       00002100
      DIMENSION ITEE(50)                                                00002200
C                                                                       00002300
      EXTERNAL JADEBD                                                   00002400
      EXTERNAL BDVTXC                                                   00002500
C                                                                       00002600
      DATA  IUNIT  / 2 /                                                00002700
C                                                                       00002800
      DATA  IFEV /    1 /                                               00002900
      DATA  MXEV / 2000 /                                               00003000
C                                                                       00003100
      CALL BINT(40000,20000,500,500)                                    00003200
C     CALL BWRO( IWUNIT, 1558, 2 )                                      00003300
C                                                                       00003400
      VROTG = VROT*F57                                                  00003500
C                                                                       00003600
      CALL GEPI                                                         00003700
      CALL BINS0(90,80,'0 1 40;')                                       00003800
      CALL BINS0(91,80,'-3.5 1 7;')                                     00003900
      CALL BINS0(92,80,'0 1 60;')                                       00004000
      CALL BINS0(93,80,'0 8 100;')                                      00004100
      CALL BINS0(94,80,'-50 1 100;')                                    00004200
      CALL DST1(1,90,1,80,' NV;')                                       00004300
      CALL DST1(2,91,1,80,' EG;')                                       00004400
      CALL DST1(3,91,1,80,' EG,REC;')                                   00004500
      CALL DST1(10,93,4,80,' REE;')                                     00004600
C                                                                       00004700
      DO 1 I = 1, 7                                                     00004800
C                                                                       00004900
         CALL DST1(100+I,93,1,80,' REE;')                               00005000
C                                                                       00005100
    1 CONTINUE                                                          00005200
C                                                                       00005300
      CALL VTXINI                                                       00005400
      MODE = 0                                                          00005500
C                                                                       00005600
      MAXEVT = MXEV + IFEV - 1                                          00005700
      NPR = 10                                                          00005800
      ALN2 = ALOG(2.)                                                   00005900
C                                       LOOP OVER EVENTS                00006000
      DO 900 IEV = 1, MAXEVT                                            00006100
         IF(JUHR(2) .EQ. 2) GOTO 4010                                   00006200
C                                                                       00006300
         LPRINT = .FALSE.                                               00006400
C                                                                       00006500
         CALL EVREAD(IUNIT,IRET)                                        00006600
         IF (IRET .EQ. 2) GOTO 4030                                     00006700
C                                                                       00006800
         IPHEAD = IDATA( IBLN('HEAD') )                                 00006900
         IF (IPHEAD .LE. 0) GOTO 899                                    00007000
C                                                                       00007100
         NRUN  = HDATA( 2*IPHEAD+ 10 )                                  00007200
         NREC  = HDATA( 2*IPHEAD+ 11 )                                  00007300
         NEVT = NEVT + 1                                                00007400
         IF (IEV.LT.IFEV) GOTO 899                                      00007500
C                                                                       00007600
         MEV   = HDATA( 2*IPHEAD + 29 )                                 00007700
         EPHOT = FLOAT(MEV) * 0.001                                     00007800
         EG    = ALOG(EPHOT)/ALN2                                       00007900
         IEG   = IFIX(EG + 4.5)                                         00008000
C ***                                                                   00008100
CCC      HDATA( 2*IPHEAD + 18 ) = -1                                    00008200
C ***                                                                   00008300
         CALL CLOC(IPAT,'PATR',IPNR)                                    00008400
         IF (IPAT.GT.0) GOTO 60                                         00008500
            IPAT = IDATA(IBLN('PATR'))                                  00008600
            IF (IPAT.LE.0) GOTO 60                                      00008700
               IPNR = IDATA(IPAT-2)                                     00008800
               IF (IEV.GT.0) GOTO 60                                    00008900
                  WRITE(6,9642) IPNR                                    00009000
9642              FORMAT(/' **** #PATR = ',I2,' ****'/)                 00009100
  60     CONTINUE                                                       00009200
         IF (IPAT.LE.0) GOTO  899                                       00009300
C                                                                       00009400
         CALL VTXPRE(IPHEAD,IPAT)                                       00009500
C                                                                       00009600
         NV = 0                                                         00009700
         NTEE = 0                                                       00009800
         CALL VTXEE                                                     00009900
C                                                                       00010000
         DO 200 I = 1, NT                                               00010100
C                                                                       00010200
            JT = (I-1)*40                                               00010300
            IF (IT(JT+1).NE.3) GOTO 200                                 00010400
C                                                                       00010500
            NTEE = NTEE + 1                                             00010600
            ITEE(NTEE) = I                                              00010700
C                                                                       00010800
  200    CONTINUE                                                       00010900
C                                                                       00011000
         IF (((NTEE.EQ.0).OR.(NPR.LE.0)).AND.(NTEE.LT.4)) GOTO 210      00011100
             WRITE(6,9033) NRUN,NREC,EPHOT,(ITEE(K),K=1,NTEE)           00011200
 9033        FORMAT(' EE : ',2I6,F7.3,(25I3/))                          00011300
             NPR = NPR - 1                                              00011310
  210    CONTINUE                                                       00011400
C                                                                       00011500
         CALL HIST(1,FLOAT(NV))                                         00011600
         CALL HIST(2,EG)                                                00011700
C                                                                       00011800
         IF (NV.EQ.0) GOTO 899                                          00011900
C                                                                       00012000
         DO 700 I = 1, NV                                               00012100
C                                                                       00012200
            JV = (I-1)*10                                               00012300
            IF (IV(JV+1).NE.4) GOTO 700                                 00012400
            CALL HIST(3,EG)                                             00012500
C                                                                       00012600
            REE = SQRT( V(JV+2)**2 + V(JV+3)**2 )                       00012700
C                                                                       00012800
            CALL HIST(10,REE)                                           00012900
            CALL HIST(100+IEG,REE)                                      00013000
C                                                                       00013100
  700    CONTINUE                                                       00013200
C                                                                       00013300
  899    CONTINUE                                                       00013400
C        CALL BSLW                                                      00013500
C        CALL BWRITE(IWUNIT)                                            00013600
C                                      NEXT EVENT                       00013700
         CALL BSLT                                                      00013800
         CALL BDLG                                                      00013900
  900 CONTINUE                                                          00014000
C                                                                       00014100
      WRITE(6,4002) NEVT                                                00014200
 4002 FORMAT(/,' ======= NORMAL END AFTER ',I5,' EVENTS =====',/)       00014300
C                                                                       00014400
 1000 CONTINUE                                                          00014500
C                                                                       00014600
      GOTO 5000                                                         00014700
C                                                                       00014800
C *** ABNORMAL TERMINATIONS                                             00014900
C                                                                       00015000
 4010 WRITE(6,4011) NEVT                                                00015100
 4011 FORMAT(/,' ======= TIME OUT AFTER: ',I5, ' EVENTS =========',/    00015200
     &)                                                                 00015300
      GOTO 1000                                                         00015400
 4020 WRITE(6,4021) NRUN,NREC,NEVT                                      00015500
 4021 FORMAT(/,' ======= BREAD ERROR IN RUN, EVT,#EVT: ',3I6,' =====',/)00015600
      GOTO 5000                                                         00015700
 4030 WRITE(6,4031) NRUN,NREC,NEVT                                      00015800
 4031 FORMAT(/,' ======= END OF FILE IN RUN, EVT,#EVT: ',3I6,' =====',/ 00015900
     &)                                                                 00016000
      GOTO 1000                                                         00016100
C                                                                       00016200
C *** END                                                               00016300
C                                                                       00016400
 5000 CONTINUE                                                          00016500
C     CALL BMLT( 0, DUMMY )                                             00016600
C     CALL BWRITE(IWUNIT)                                               00016700
      CALL BSTA                                                         00016800
      CALL PALL                                                         00016900
      CALL VTXSTA                                                       00017000
      CALL GEPW                                                         00017100
C                                                                       00017200
      STOP                                                              00017300
      END                                                               00017400
***HEADER*** MEMBER  EETEST         SAVED BY F22KLE  ON 87/02/06  AT 11:31      
"   06/02/87 702061129  MEMBER NAME  EETEST   (S)           MORTRA34 "          
%MACRO 'F22KLE.JVTXC.S(MORTMAC)                                                 
"----------------------------------------------------------------------"        
      SUBROUTINE EETEST(IPNR,IT1,IT2,EPHOT,XCONV,YCONV,IERR);                   
"-----------------------------------------------------------------------        
                                                                                
    AUTHOR:  J. HAGEMANN   20/06/86 : PROGRAM TESTS IF GIVEN TRACKS             
                                      ORIGINATE FROM A CONVERSION (MC)          
                                                                                
    MODIFIED C. KLEINWORT  22/06/86 : FOR USE IN BATCH                          
                                                                                
    RETURN CODES :                                                              
    > 0 = NUMBER OF TRACKS FROM A UNIQUE MOTHER                                 
                                                ( SOFT ERRORS )                 
     -1 = NO VECT0 BANK, NOT POSSIBLE FOR MONTE-CARLO                           
     -2 = NO MOTHER, UNIQUE VECT0 PARTICLE ( ITYP1 VALID )                      
                                                ( HARD ERRORS )                 
    -11 = MORE THAN 2 PARTICLES CONNECTED TO TRACK                              
    -12 = PARTICLE FROM VECT0                                                   
    -12 = 2 DIFFERENT VECT1 PARTICLES CONNECTED TO TRACK                        
                                                ( DESASTER )                    
    -20 = NO PATR  BANK                                                         
    -21 = NO VECT1 BANK, BUT VECT1 REQUIRED FROM TRACEBACK !!!                  
    -22 = NO MOTHER FOR VECT1 PARTICLE !!!                                      
-----------------------------------------------------------------------"        
      IMPLICIT INTEGER*2 (H);                                                   
""                                                                              
;                                                                               
%F                                                                              
%MACRO 'F11GOD.PATRECSR(CDATA)'                                                 
%M                                                                              
      COMMON / CKOPP / KOPP(50);                                                
""                                                                              
      LOGICAL LOK;                                                              
""                                                                              
      DIMENSION IPART(3), IVECT(3), FRACT(3), ITYP(2), IPMP(2),                 
                IPART2(3), IVECT2(3), FRACT2(3),                                
                HKOPP(1);                                                       
""                                                                              
      EQUIVALENCE (KOPP(1),HKOPP(1));                                           
""                                                                              
      DATA NPR / 0 /;                                                           
"                                                                               
C------------------  C O D E  ------------------------------------------        
"                                                                               
      MOTHER = 0;                                                               
      CALL CLOC( IPVCT0, 'VECT', 0 );                                           
      ABORT(-1) IF( IPVCT0 .LE. 0 );                                            
""                                                                              
      CALL CLOC( IPPATR, 'PATR', IPNR );                                        
      ABORT(-20) IF( IPPATR .LE. 0 );                                           
""                                                                              
      CALL MCTRCB( IT1, NPART, IPART, IVECT, FRACT );                           
      ABORT(-11) IF NPART .GT. 2;                                               
      CALL MCTRCB( IT2, NPART2, IPART2, IVECT2, FRACT2 );                       
      ABORT(-11) IF NPART2 .GT. 2;                                              
""                                                                              
      DO I1 = 1, NPART                                                          
      <* ABORT(-12) IF IVECT(I1).EQ.0;                                          
         LOK = .FALSE.;                                                         
         DO I2 = 1, NPART2                                                      
         <* LOK = LOK .OR.                                                      
            ((IVECT(I1).EQ.(IVECT2(I2)).AND.((IPART(I1).EQ.IPART2(I2)));        
         *>                                                                     
         ABORT(-13) UNLESS LOK;                                                 
      *>                                                                        
""                                                                              
      CALL CLOC( IPVCT1, 'VECT', 1 );                                           
      ABORT(-21) IF IPVCT1 .LE. 0;                                              
""                                                                              
      DO JPART = 1, NPART                                                       
      <* IPRTME = IPART(JPART) - 1;                                             
         IVBNK  = IVECT(JPART);                                                 
         IPNT1 = IPVCT1 + IDATA(IPVCT1+1) + IPRTME * IDATA(IPVCT1+2);           
         ITYP(JPART) = IABS(IDATA(IPNT1+7));                                    
         IMOB  = HDATA(IPNT1*2+21);                                             
         IMOP  = HDATA(IPNT1*2+22);                                             
""                                                                              
         ABORT(-22) IF (IMOP.LE.0);                                             
""                                                                              
         IF IMOB .EQ. 1                                                         
         <* IPMP(JPART) =                                                       
            IPVCT1 + IDATA(IPVCT1+1) + (IMOP-1)*IDATA(IPVCT1+2); *> ELSE        
         <* IPMP(JPART) =                                                       
            IPVCT0 + IDATA(IPVCT0+1) + (IMOP-1)*IDATA(IPVCT0+2); *>             
      *>                                                                        
""                                                                              
      IF NPART.GT.1                                                             
      <* ABORT(-14) IF IPMP(1).NE.IPMP(2); *>                                   
""                                                                              
      IERR = NPART;                                                             
      IPMP1 = IPMP(1);                                                          
      ABORT(-15) IF IABS(IDATA(IPMP1+7)).NE.1;                                  
      XCONV = ADATA(IPNT1+8);                                                   
      YCONV = ADATA(IPNT1+9);                                                   
      EPHOT = ADATA(IPMP1+4);                                                   
""                                                                              
      RETURN;                                                                   
      END;                                                                      
%%                                                                              
***HEADER*** MEMBER  ERRTST         SAVED BY F22KLE  ON 86/10/03  AT 15:10      
C   13/09/85 610031510  MEMBER NAME  ERRTST   (S)           FORTRAN     00000000
C-----------------------------------------------------------------      00000100
C     VERSION OF 26.06.86                                               00000200
C     CHECK 'VERTEX'-ERRORS                                             00000300
C-----------------------------------------------------------------      00000400
C                                                                       00000500
      IMPLICIT INTEGER*2 (H)                                            00000600
      LOGICAL*1 LPRINT                                                  00000700
C                                                                       00000800
%MACRO CDATA                                                            00000900
%MACRO CGEOV                                                            00001000
C                                                                       00001100
%MACRO 'F22KLE.JVTXC.S(MVCCAL)'                                         00001200
C                                                                       00001300
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001400
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00001500
C                                                                       00001510
      COMMON / CKOPP / HKOPP(100)                                       00001520
C                                                                       00001600
      COMMON /CVTXC/ XB,YB,ZB,RTANK,DTANK,X0INN,SIGX0,SIGZ0,PNTMIN,     00001700
     *               DISTB,COLL2,MITER,DSCONV,PRCUT,IREJTR,EEDPMN,      00001800
     *               EEDPMX,EEDTMX,EEDRMX,SEMAX,SIMAX,SIGFAC,EEXYMN,    00001900
     *               EEXYMX,PHEMAX,SIG1,SIG2,SIG3,CSECV                 00002000
C                                                                       00002100
      DIMENSION TUPEL(3),MINFO(2,50)                                    00002200
C                                                                       00002310
      EXTERNAL JADEBD                                                   00002400
C                                                                       00002500
      DATA  IUNIT  / 2 /                                                00002600
C                                                                       00002700
      DATA  IPNR  / 10 /                                                00002800
C                                                                       00002810
      DATA  ITLEN / 40 /                                                00002820
C                                                                       00002900
      DATA  IFEV /    1 /                                               00003000
      DATA  MXEV / 2000 /                                               00003100
      DATA  NPR1 /   50 /                                               00003200
C     DATA  NPR2 /   10 /                                               00003300
      DATA  RVX / 0. /, RVY / 0. /                                      00003400
C                                                                       00003500
      CALL BINT(40000,20000,500,500)                                    00003600
C     CALL BWRO( IWUNIT, 1558, 2 )                                      00003700
C                                                                       00003800
      CALL GEPI                                                         00003900
      CALL BINS0(90,80,'-10 .20 100;')                                  00004000
      CALL BINS0(91,80,'0 .10 100;')                                    00004100
      CALL BINS0(92,80,'0 .1 120;')                                     00004200
      CALL BINS0(93,80,'0 .01 100;')                                    00004300
      CALL DST1(1,92,4,80,' PTOT;')                                     00004400
      CALL DST1(10,90,4,80,' DRV,PATR9;')                               00004500
      CALL DST1(11,90,4,80,' DRV,PATR10;')                              00004600
      CALL DST1(12,91,4,80,' DXY,PATR9;')                               00004700
      CALL DST1(13,91,4,80,' DXY,PATR10;')                              00004800
      CALL DST1(20,93,4,80,' PROB,PATR9;')                              00004900
      CALL DST1(21,93,4,80,' PROB,PATR9;')                              00005000
      CALL DST1(22,93,4,80,' PROB,PATR9;')                              00005100
      CALL DST1(23,93,4,80,' PROB,PATR9;')                              00005200
      CALL DST1(30,93,4,80,' PROB,PATR10;')                             00005300
      CALL DST1(31,93,4,80,' PROB,PATR10;')                             00005400
      CALL DST1(32,93,4,80,' PROB,PATR10;')                             00005500
      CALL DST1(33,93,4,80,' PROB,PATR10;')                             00005600
      CALL DST1(50,3,4,80,' TUPEL, PATR9;')                             00005700
      CALL DST1(51,3,4,80,' TUPEL, PATR10;')                            00005800
C                                                                       00005900
      CALL DST0(32,1,80,' T(32);')                                      00006000
      CALL DST0(33,1,80,' T(33);')                                      00006100
      CALL DST0(34,1,80,' T(34);')                                      00006200
      CALL DST0(35,1,80,' T(35);')                                      00006300
      CALL DST0(36,1,80,' T(36);')                                      00006400
C                                                                       00006500
      CALL DST0(42,1,80,' T(32);')                                      00006600
      CALL DST0(43,1,80,' T(33);')                                      00006700
      CALL DST0(44,1,80,' T(34);')                                      00006800
      CALL DST0(45,1,80,' T(35);')                                      00006900
      CALL DST0(46,1,80,' T(36);')                                      00007000
C                                                                       00007100
      CALL VTXINI                                                       00007200
      MODE = 0                                                          00007300
      SIGX0 = SIGX0 / SIGFAC                                            00007400
      SIGZ0 = SIGZ0 / SIGFAC                                            00007500
      SIGFAC = 1.                                                       00007600
      SIGX0 = SIGX0 * SIGFAC                                            00007700
      SIGZ0 = SIGZ0 * SIGFAC                                            00007800
C                                                                       00007900
      MAXEVT = MXEV + IFEV - 1                                          00008000
      NPR = 10                                                          00008100
C                                       LOOP OVER EVENTS                00008200
      DO 900 IEV = 1, MAXEVT                                            00008300
         IF(JUHR(2) .EQ. 2) GOTO 4010                                   00008400
C                                                                       00008500
         LPRINT = .FALSE.                                               00008600
C                                                                       00008700
         CALL EVREAD(IUNIT,IRET)                                        00008800
         IF (IRET .EQ. 2) GOTO 4030                                     00008900
C                                                                       00009000
         IPHEAD = IDATA( IBLN('HEAD') )                                 00009100
         IF (IPHEAD .LE. 0) GOTO 899                                    00009200
C                                                                       00009300
         CALL CPKOPP(IERR)                                              00009310
         NRUN  = HDATA( 2*IPHEAD+ 10 )                                  00009400
         NREC  = HDATA( 2*IPHEAD+ 11 )                                  00009500
         NEVT = NEVT + 1                                                00009600
         IF (IEV.LT.IFEV) GOTO 899                                      00009700
         IFIELD  = HDATA( 2*IPHEAD+ 30 )                                00009800
         AH03 = 2.998E-8*FLOAT(IFIELD)                                  00009900
C ***                                                                   00010000
CCC      HDATA( 2*IPHEAD + 18 ) = -1                                    00010100
C ***                                                                   00010200
         IHIST = 20                                                     00010300
         DO 898 IBNK = 1, 1                                             00010400
         IPNR = 7 + IBNK                                                00010500
         IHIST = IHIST + 10                                             00010600
C                                                                       00010700
         CALL CLOC(IPAT,'PATR',IPNR)                                    00010800
         IF (IPAT.GT.0) GOTO 60                                         00010900
            IPAT = IDATA(IBLN('PATR'))                                  00011000
            IF (IPAT.LE.0) GOTO 60                                      00011100
               IPNR = IDATA(IPAT-2)                                     00011200
               IF (IEV.GT.3) GOTO 60                                    00011300
                  WRITE(6,9642) IPNR                                    00011400
9642              FORMAT(/' **** #PATR = ',I2,' ****'/)                 00011500
  60     CONTINUE                                                       00011600
         IF (IPAT.LE.0) GOTO  898                                       00011700
C                                                                       00011800
         NIDTRK = IDATA(IPAT+2)                                         00011801
         DO 65 ITRK = 1, NIDTRK                                         00011802
            MINFO(1,ITRK) = MOTHER(IPNR,ITRK,ITYP,MINFO(2,ITRK))        00011804
  65     CONTINUE                                                       00011805
C                                                                       00011810
         CALL VTXPRE(IPHEAD,IPAT)                                       00011900
C                                                                       00012000
         IF (IEV.GT.1) GOTO 101                                         00012100
C                                                                       00012200
            IF (NT.LE.0) GOTO 101                                       00012300
            WRITE(6,9325) ((T(J*ITLEN+K-ITLEN),K=1,ITLEN),J=1,NT)       00012400
 9325       FORMAT((I13,9G13.4/2G13.4,I13,7G13.4/10G13.4/I13,9G13.4))   00012500
C                                                                       00012600
  101    CONTINUE                                                       00012700
C                                                                       00012800
         DO 200 I = 1, NT                                               00012900
C                                                                       00013000
            JT = (I-1)*ITLEN                                            00013100
            IF (IT(JT+1).LE.0) GOTO 200                                 00013200
C                                                                       00013300
            CALL HIST(IHIST+2,T(JT+32))                                 00013400
            CALL HIST(IHIST+3,T(JT+33))                                 00013500
            CALL HIST(IHIST+4,T(JT+34))                                 00013600
            CALL HIST(IHIST+5,T(JT+35))                                 00013700
            CALL HIST(IHIST+6,T(JT+36))                                 00013800
C                                                                       00013900
            CALL VTXPNT                                                 00014000
     &         (JT,RVX,RVY,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT,ST)       00014100
            DXY = 1./(1./DXT2+1./DYT2)                                  00014200
            IF (DXY.GE.0.) DXY = SQRT(DXY)                              00014300
C                                                                       00014400
            D = -SIN(PHIT)*(XT-RVX) + COS(PHIT)*(YT-RVY)                00014500
C                                                                       00014600
            CHI2 = (D/DXY)**2                                           00014700
            PRB = PROB(CHI2,1)                                          00014800
            IDTRK = I                                                   00014900
C ***                                                                   00015100
            MTYP = MINFO(1,I)                                           00015110
            IERR = MINFO(2,I)                                           00015120
            IF ((IERR.EQ.-11) .OR. (IERR.EQ.-13)) GOTO 200              00015200
C ***                                                                   00015300
            JHIST = IBNK*10 + 10                                        00015400
            IF (MTYP.EQ.-1) JHIST = JHIST + 1                           00015500
            IF (IT(JT+31).EQ.0) JHIST = JHIST + 2                       00015600
C                                                                       00015700
            IF ((NPR1.LE.0).OR.(PRB.GT.0.01).OR.(MTYP.EQ.-1)) GOTO 150  00015800
C           IF ((NPR1.LE.0).OR.(PRB.GT.0.01)) GOTO 150                  00015810
               NPR1 = NPR1 - 1                                          00015900
            WRITE(6,9037)                                               00016000
     &         NRUN,NREC,JT,IT(JT+31),                                  00016100
     &         RVX,RVY,XT,YT,PHIT,ST,D,DXY,DPHIT,PRB                    00016110
 9037          FORMAT(' *** ',2I5,I4,I2,4F9.3,F9.5,4F9.3,E10.3)         00016200
  150       CONTINUE                                                    00016300
C                                                                       00016400
            PTOT = ABS(T(JT+2)*AH03/T(JT+24))                           00016500
            CALL HIST(1,PTOT)                                           00016600
C                                                                       00016700
            CALL HIST(9+IBNK,D)                                         00016800
            CALL HIST(11+IBNK,DXY)                                      00016900
            CALL HIST(JHIST,PRB)                                        00017000
C                                                                       00017100
            TUPEL(1) = PTOT                                             00017200
            TUPEL(2) = D                                                00017300
            TUPEL(3) = DXY                                              00017400
            CALL NTUPEL(49+IBNK,TUPEL)                                  00017500
C                                                                       00017600
C           IF (IBNK.NE.1) GOTO 200                                     00017700
            IF (DPHIT.GE.0.0) GOTO 200                                  00017800
C           IF (IEV.GT.20) GOTO 200                                     00017900
C                                                                       00018000
            WRITE(6,9034) NRUN,NREC,JT,IT(JT+31),                       00018100
     &                    RVX,RVY,XT,YT,PHIT,ST,D,DXY,DPHIT             00018110
 9034       FORMAT(' *** ',2I5,I4,I2,4F9.3,F10.5,4F9.3)                 00018200
            WRITE(6,9337) (T(JT+K),K=1,ITLEN)                           00018300
 9337       FORMAT(I13,9G13.4/2G13.4,I13,7G13.4/10G13.4/I13,9G13.4)     00018400
C                                                                       00018500
  200    CONTINUE                                                       00018600
C                                                                       00018700
  898    CONTINUE                                                       00018800
C                                                                       00018900
  899    CONTINUE                                                       00019000
C        CALL BSLW                                                      00019100
C        CALL BWRITE(IWUNIT)                                            00019200
C                                      NEXT EVENT                       00019300
         CALL BSLT                                                      00019400
         CALL BDLG                                                      00019500
  900 CONTINUE                                                          00019600
C                                                                       00019700
      WRITE(6,4002) NEVT                                                00019800
 4002 FORMAT(/,' ======= NORMAL END AFTER ',I5,' EVENTS =====',/)       00019900
C                                                                       00020000
 1000 CONTINUE                                                          00020100
C                                                                       00020200
      GOTO 5000                                                         00020300
C                                                                       00020400
C *** ABNORMAL TERMINATIONS                                             00020500
C                                                                       00020600
 4010 WRITE(6,4011) NEVT                                                00020700
 4011 FORMAT(/,' ======= TIME OUT AFTER: ',I5, ' EVENTS =========',/    00020800
     &)                                                                 00020900
      GOTO 1000                                                         00021000
 4020 WRITE(6,4021) NRUN,NREC,NEVT                                      00021100
 4021 FORMAT(/,' ======= BREAD ERROR IN RUN, EVT,#EVT: ',3I6,' =====',/)00021200
      GOTO 5000                                                         00021300
 4030 WRITE(6,4031) NRUN,NREC,NEVT                                      00021400
 4031 FORMAT(/,' ======= END OF FILE IN RUN, EVT,#EVT: ',3I6,' =====',/ 00021500
     &)                                                                 00021600
      GOTO 1000                                                         00021700
C                                                                       00021800
C *** END                                                               00021900
C                                                                       00022000
 5000 CONTINUE                                                          00022100
C     CALL BMLT( 0, DUMMY )                                             00022200
C     CALL BWRITE(IWUNIT)                                               00022300
      CALL BSTA                                                         00022400
      CALL PALL                                                         00022500
      CALL VTXSTA                                                       00022600
      CALL GEPW                                                         00022700
C                                                                       00022800
      STOP                                                              00022900
      END                                                               00023000
***HEADER*** MEMBER  MVERTEX0       SAVED BY F22HAG  ON 88/05/24  AT 17:56      
C     PARAMETER MACRO FOR VERTEX-FIT ROUTINES                           00000000
      COMMON /CVTXC/ XB,YB,ZB,RTANK,DTANK,X0INN,SIGX0,SIGZ0,PNTMIN,     00000100
     *               DISTB,COLL2,MITER,DSCONV,PRCUT,IREJTR,EEDPMN,      00000200
     *               EEDPMX,EEDTMX,EEDRMX,SEMAX,SIMAX,SIGFAC,EEXYMN,    00000300
     *               EEXYMX,PHEMAX,SIG1,SIG2,SIG3,CSECV,                00000400
     *               ITDLEN,IVDLEN,SP0,SP1,DFMASS,SFMUSC, SIGFCZ        00000500
***HEADER*** MEMBER  MVERTEX1       SAVED BY F22KLE  ON 86/12/18  AT 17:00      
C     MACRO FOR VERTEX-FIT ROUTINES                                             
      COMMON /CWORK1/ NT,T(2000),NV,V(260),A(300),B(24),                        
     *                NTIND(20),S(20),CHITR(20),                                
     *                JTGOD(50),JTBAD(50),VSAVE(13),V2(20,20),HMW(10)           
C                                                                               
      REAL*8 A,B                                                                
      INTEGER*2 HMW                                                             
C                                                                               
      DIMENSION IT(2),IV(2)                                                     
      EQUIVALENCE (T(1),IT(1)),(V(1),IV(1))                                     
***HEADER*** MEMBER  MVERTEX2       SAVED BY F22KLE  ON 86/12/11  AT 12:56      
C     MACRO FOR VERTEX-FIT ROUTINES ( AXIS AND STATISTICS )                     
      COMMON /CVTX2/ MODE,TAXIS(12),SVR,HVTXST(140)                             
C                                                                               
***HEADER*** MEMBER  SETTAX         SAVED BY F22KLE  ON 86/06/11  AT 13:13      
C   21/05/86 605291112  MEMBER NAME  SETTAX   (S)           FORTRAN     00000000
C                                                                       00000100
C     FILL TAXIS FOR TAU'S                                              00000200
C                                                                       00000300
C     * BEAMSIZE ( 0.400, 0.010 ) ASSUMED                               00000400
C     * ERROR OF DIRECTION ACCORDING TO MC-RESULTS ( FROM 17.3 GEV !! ) 00000500
C     * RUNVERTEX Z-COORDINATE, Z-WIDTH FIXED TO 0., 20.                00000600
C                                                                       00000700
      SUBROUTINE SETTAX(RVX, RVY, RVDX, RVDY, XUNIT, YUNIT, ZUNIT)      00000800
C                                                                       00000900
C     RVX,RVY,RVDX,RVDY : RPHI-POSTION AND -ERROR OF RUNVERTEX          00001000
C     XUNIT,YUNIT,ZUNIT : TAU FLIGHT DIRECTION                          00001100
C                                                                       00001200
%MACRO MVERTEX2                                                         00001300
C                                                                       00001400
C     ERROR**2 IN PHI   : DPHI2 = ( 3 DEGREE ) **2           21.05.86   00001500
C     ERROR**2 IN THETA : DTH2  = ( 3 DEGREE ) **2           21.05.86   00001600
C                                                                       00001700
      DATA DPHI2 / 2.74E-3 /, DTH2 / 2.74E-3 /                          00001800
C                                                                       00001900
      MODE = 1                                                          00002000
      CSCTH2 = 1. / ( XUNIT**2 + YUNIT**2 )                             00002100
      CSCTH  = SQRT( CSCTH2 )                                           00002200
      TAXIS( 1) = RVX                                                   00002300
      TAXIS( 2) = RVY                                                   00002400
      TAXIS( 3) = 0.                                                    00002500
      TAXIS( 4) = RVDX**2 + 0.16                                        00002600
      TAXIS( 5) = RVDY**2 + 0.0001                                      00002700
      TAXIS( 6) = 400.                                                  00002800
      TAXIS( 7) = XUNIT*CSCTH                                           00002900
      TAXIS( 8) = YUNIT*CSCTH                                           00003000
      TAXIS( 9) = ZUNIT*CSCTH                                           00003100
      TAXIS(10) = DPHI2 * TAXIS(8)**2                                   00003200
      TAXIS(11) = DPHI2 * TAXIS(7)**2                                   00003300
      TAXIS(12) = DTH2  * CSCTH2**2                                     00003400
C                                                                       00003500
      RETURN                                                            00003600
      END                                                               00003700
***HEADER*** MEMBER  TPVTXD         SAVED BY F22HAG  ON 88/05/24  AT 18:18      
C   24/05/88 805241815  MEMBER NAME  TPVTXD   (S)           F77         00000000
      SUBROUTINE TPVTXD( NPPATR, IER )                                  00000200
C-----------------------------------------------------------            00000300
C  VERSION OF 01/04/80                         E.ELSEN                  00000400
C     LAST MOD. 24-05-88       J HAGEMANN                               00000500
C          MOD. 27-04-88       E ELSEN                                  00000510
C               VERSION COMPATIBLE WITH KLEINWORT PACKAGE               00000600
C                                                                       00000700
C          MOD. 11-09-80 13:30 S.YAMADA                                 00000800
C               COPLANER TWO TRACK CASE IS TREATED AS BAD VERTEX,       00000900
C               SINCE IT IS AFFECTED BY POOR Z-MEASUREMENT.             00001000
C               CHANGED  PART IS MARKED BY +++++                        00001100
C  COMPUTE VERTEX WITH DITTMANNS VERTEX ROUTINES AND STORE              00001200
C  RESULTS IN TPVX AND TPTR BANKS.                                      00001300
C  NVMAX VERTICES ARE ALLOWED THE OTHER DITTMANN VERTICES               00001400
C  BEING ABSORBED IN THE MAIN VERTEX.                                   00001500
C  CUT ON THE NUMBER OF TRACKS IN VERTEX.                               00001600
C  INPUT : NPPATR POINTER TO PATR BANK                                  00001700
C  OUTPUT:                                                              00001800
C  IER = 3 HEADER BANK CAN NOT BE LOCATED                               00001900
C      = 2 IF TOO FEW TRACKS TO DEFINE VERTEX                           00002000
C      = 1 IF ONLY BAD VERTEX FOUND                                     00002100
C      = 0 ELSE                                                         00002200
C-----------------------------------------------------------            00002300
C                                                                       00002400
      IMPLICIT INTEGER*2 (H)                                            00002500
      COMMON / BCS / IW(1)                                              00002600
      DIMENSION RW(1),HW(1)                                             00002700
      EQUIVALENCE (HW(1),RW(1),IW(1))                                   00002800
C                                                                       00002900
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00003000
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00003100
C                  +++++ BUFFER TO SAVE THE FIRST TWO TRACK DIRECTIONS  00003200
                   DIMENSION XW(2), YW(2)                               00003300
C                  +++++                                                00003400
C                                                                       00003500
      COMMON / CWORK / IVPM, IVP(20)                                    00003600
C                                                                       00003700
      DATA ICALL  / 0 /, IPRMAX / 3 /                                   00003800
      DATA IYEARO / -1 /                                                00003900
      DATA NVMAX / 1 /                                                  00003910
C                                                                       00004000
      ICALL = ICALL + 1                                                 00004100
      IF( ICALL .GT. 1 ) GO TO 1                                        00004200
        WRITE(6,9101)                                                   00004300
 9101   FORMAT(' +++ TPVTXD +++ VERSION OF 24/05/88 USING ',            00004400
     *         ' VERTEX PACKAGE FROM F22KLE.VERTEX.S/L')                00004500
    1 CONTINUE                                                          00004600
C                                                                       00004700
C                                           PERFORM VERTEX SEARCH       00004800
C                                           VTXINI CALLED IN TPINIT     00004900
      IER = 3                                                           00005000
      IF( NPPATR .LE. 0 ) GO TO 8000                                    00005100
      NPHEAD = IW(IBLN('HEAD'))                                         00005200
      IF( NPHEAD .LE. 0 ) GO TO 8000                                    00005300
      IER = 2                                                           00005400
      KRUN = HW(NPHEAD*2+10)                                            00005401
      IYEAR = HW(NPHEAD*2+8)                                            00005402
      IF( IYEAR .NE. IYEARO ) THEN                                      00005403
         IYEARO = IYEAR                                                 00005404
C                                      SEARCH LIMITS                    00005405
         IF( IYEAR.EQ.1986 ) THEN                                       00005406
           SIGX0 = .39                                                  00005407
           SIGZ0 = 60.                                                  00005408
         ELSE                                                           00005409
           SIGX0 = .55                                                  00005410
           SIGZ0 = 30.                                                  00005411
         ENDIF                                                          00005412
C                                      SIGMA FUDGES                     00005413
         IF( KRUN .LE. 100 ) THEN                                       00005414
C                            SETTINGS FOR MONTE CARLO                   00005415
C                                           THE ACTUAL VALUES FOR MC:   00005416
C        SIGFCZ = 1.11+-0.04    FOR IYEAR<86                            00005417
C        SIGFCZ = 1.26+-0.05    FOR IYEAR=86                            00005418
C                                           BUT USE 1 FOR CLARITY       00005419
            SIGFXY = 1.0                                                00005420
            SIGFCZ = 1.0                                                00005421
         ELSEIF( IYEAR.LT.1985 ) THEN                                   00005422
C                            SIGFAC FOR DATA 79-84                      00005423
            SIGFXY = 1.43                                               00005424
            SIGFCZ = 1.57                                               00005425
         ELSEIF( IYEAR.EQ.1985 ) THEN                                   00005426
C                            SIGFAC FOR DATA OF 1985                    00005427
            SIGFXY = 1.43                                               00005428
            SIGFCZ = 1.31                                               00005429
         ELSEIF( IYEAR .EQ. 1986 ) THEN                                 00005430
C                            SIGFAC FOR DATA OF 1986                    00005431
            SIGFXY = 1.56                                               00005432
            SIGFCZ = 1.40                                               00005433
         ELSE                                                           00005434
C                                           JUNK DATA                   00005435
            SIGFXY = 1.0                                                00005436
            SIGFCZ = 1.0                                                00005437
         ENDIF                                                          00005438
C                                                                       00005439
      ENDIF                                                             00005440
      SIGFAC = SIGFXY                                                   00005441
C                                                                       00005451
      CALL VTXPRE( NPHEAD, NPPATR )                                     00005500
      CALL VTXSRC                                                       00005600
      CALL VTXAFT                                                       00005700
      IF( NV .LE. 0 ) GO TO 8000                                        00005800
C                                                                       00005900
CCCC  IF( ICALL .LT. IPRMAX ) CALL UWP( T, 1, NT*ITDLEN )               00006000
CCCC  IF( ICALL .LT. IPRMAX ) CALL UWP( V, 1, NV*IVDLEN )               00006100
CCCC  IF(ICALL.LT.IPRMAX ) CALL BPRS( 'PATR', IW(IW(IBLN('PATR'))-2) )  00006200
C                                                                       00006300
C                                           POINTERS D-VERTICES         00006400
      IVPM = 0                                                          00006500
      CALL VZERO( IVP, 20 )                                             00006600
C                                                                       00006700
C                                           LOOP OVER UP TO NVMAX       00006800
C                                           VERTICES AND STORE RESULTS  00006900
C                                           IN TPVX BANKS               00007000
      IER = 1                                                           00007100
      NRVX = 0                                                          00007200
      NVA = 0                                                           00007300
      JV = 0                                                            00007400
      DO 1000 JVA = 1,NV                                                00007500
      IF( NRVX .GE. NVMAX ) GO TO 1100                                  00007600
      IF( IV(JV+1).LT.2 .OR. IV(JV+1).GT.3 ) GO TO 1000                 00007700
      IF( IV(JV+8).LE.1 ) GO TO 1000                                    00007800
      NRVX = NRVX + 1                                                   00007900
C                                           ACCEPTED VERTEX             00008000
C                                           LOCATE BANK                 00008100
      CALL BLOC( NPTPVX, 'TPVX', NRVX, &100 )                           00008200
      GO TO 110                                                         00008300
  100 LENGTH = 15 + ( NT + 1 ) /  2                                     00008400
      CALL BCRE( NPTPVX, 'TPVX', NRVX, LENGTH, &8000 , IERR )           00008500
  110 CONTINUE                                                          00008600
CCCC  IF( ICALL .LT. IPRMAX ) CALL BPRS( 'TPVX', NRVX )                 00008700
      NPTPV2 = NPTPVX + NPTPVX                                          00008800
C                                                                       00008900
C                                           VERTEX POINTER              00009000
      IF( IVPM .EQ. 0 ) IVPM = NPTPVX                                   00009100
      IVP(JVA) = NPTPVX                                                 00009200
C                                           STORE VERTEX RESULTS        00009300
      HW(NPTPV2+ 2) = 10*IV(JV+8) + 4                                   00009400
      DO 120 I=2,7                                                      00009500
  120 RW(NPTPVX+I) = V(JV+I)                                            00009600
      RW(NPTPVX+8) = V(JV+9)                                            00009700
      IW(NPTPVX+9) = IV(JV+8) * 2 - 3                                   00009800
 1000 JV = JV + IVDLEN                                                  00009900
 1100 CONTINUE                                                          00010000
      IF( NRVX .LT. 1 ) GO TO 8000                                      00010100
      IER = 0                                                           00010200
CCCC  IF( ICALL  .LT. IPRMAX ) CALL UWP( IVP, 1, 20 )                   00010300
C                                                                       00010400
C                                           AT LEAST ONE VERTEX         00010500
C                                           CLEAR PRESET POSITIONS      00010600
C                                           FROM TPPATR                 00010700
      NPTPV2 = IVPM * 2                                                 00010800
      MULSEC = HW(NPTPV2+22)                                            00010900
      IF( MULSEC .LE. 0 ) GO TO 1120                                    00011000
      HW(NPTPV2+22) = 0                                                 00011100
      HW(NPTPV2+23) = 0                                                 00011200
      HW(NPTPV2+24) = 0                                                 00011300
      HW(NPTPV2+26) = 0                                                 00011400
      DO 1110 I=1,MULSEC                                                00011500
 1110 HW(NPTPV2+30+I) = 0                                               00011600
 1120 CONTINUE                                                          00011700
C                                                                       00011800
C                                           LOOP OVER TPTR AND          00011900
C                                           FIND CORRESPONDING          00012000
C                                           PATR TRACK                  00012100
C                                           UPDATE TPTR AND TPVX        00012200
C                                                                       00012300
C           +++++   CLEAR REGISTERS TO REMEMBER THE FIRST               00012400
C           +++++   TWO TRACK DIRECTIONS.                               00012500
            NGT = 0                                                     00012600
            XW(1) = 0.                                                  00012700
            YW(1) = 0.                                                  00012800
            XW(2) = 0.                                                  00012900
            YW(2) = 0.                                                  00013000
C           +++++                                                       00013100
      CALL BPOS( 'TPTR' )                                               00013200
 2000 CALL BNXT( NPTPTR, &3000 )                                        00013300
      NPTPT2 = NPTPTR * 2                                               00013400
      IF( HW(NPTPT2+3) .LT. 1000 ) GO TO 2000                           00013500
C                                           TRACK NR                    00013600
      NR = HW(NPTPT2+4)                                                 00013700
      ITPO = ( NR-1 ) * ITDLEN                                          00013800
      IPP = NPPATR + IW(NPPATR+1) + ( NR-1 ) * IW(NPPATR+3)             00013900
      NPTPVX = IVPM                                                     00014000
      NPTPV2 = NPTPVX*2                                                 00014100
C                                                                       00014200
C                                           ----   TRACK FILLING -----  00014300
C                                                                       00014400
C                                           MAX VERTEX TRACKS           00014500
      IF( NR .GT. 50 ) GO TO 2800                                       00014600
C                                           GOOD TRACK?                 00014700
      IF( IT(ITPO+1) .LT. 3 ) GO TO 2800                                00014800
C                                           VERTEX RESERVED?            00014900
      JVA = IT(ITPO+14)                                                 00015000
      IF( IVP(JVA) .LE. 0 ) GO TO 2800                                  00015100
                                                                        00015200
C                                           TAKE VERTX JVA              00015300
      NPTPVX = IVP(JVA)                                                 00015400
      NPTPV2 = NPTPVX*2                                                 00015500
      HW(NPTPT2+18) = 1                                                 00015600
      IF( IW(NPTPTR+22) .GE. 11 ) HW(NPTPT2+18) = 2                     00015700
      CALL TANDIR( IPP, T(ITPO+5), RW(NPTPTR+10), RW(NPTPTR+27) )       00015800
      DO 2010 I=1,3                                                     00015900
 2010 RW(NPTPTR+12+I) = T(ITPO+9+I)                                     00016000
      GO TO 2900                                                        00016100
C                                                                       00016200
C                                           TAKE MAIN VERTEX            00016300
 2800 CONTINUE                                                          00016400
      CALL TANDIR( IPP, RW(NPTPVX+2), RW(NPTPTR+10), RW(NPTPTR+27) )    00016500
C                                                                       00016600
 2900 CONTINUE                                                          00016700
      HW(NPTPT2+17) = 30                                                00016800
      RW(NPTPTR+16) = SQRT( (RW(NPTPTR+10)-RW(NPTPVX+2))**2             00016900
     +                    + (RW(NPTPTR+11)-RW(NPTPVX+3))**2 )           00017000
      IW(NPTPTR+26) = 2                                                 00017100
CCCC  IF(ICALL.LT.IPRMAX ) CALL BPRS( 'TPTR', IW(NPTPTR-2) )            00017200
C                                                                       00017300
C            +++++ STORE THE FIRST TWO GOOD TRACKS                      00017400
             NGT = NGT+1                                                00017500
             IF( NGT .GT. 2 ) GO TO 2901                                00017600
             XW(NGT) = RW(NPTPTR+27)                                    00017700
             YW(NGT) = RW(NPTPTR+28)                                    00017800
 2901        CONTINUE                                                   00017900
C            +++++                                                      00018000
C                                           ----VERTEX FILLING          00018100
      IF( ABS( RW(NPTPTR+23) ) .GT. 10. ) GO TO 2912                    00018200
      IF( RW(NPTPTR+23) ) 2911, 2910, 2910                              00018300
 2910 HW(NPTPV2+23) = HW(NPTPV2+23) + 1                                 00018400
      GO TO 2913                                                        00018500
 2911 HW(NPTPV2+24) = HW(NPTPV2+24) + 1                                 00018600
      GO TO 2913                                                        00018700
 2912 HW(NPTPV2+26) = HW(NPTPV2+26) + 1                                 00018800
 2913 CONTINUE                                                          00018900
      MULSEC = HW(NPTPV2+22) + 1                                        00019000
      HW(NPTPV2+22) = MULSEC                                            00019100
      HW(NPTPV2+30+MULSEC) = IW(NPTPTR-2)                               00019200
      GO TO 2000                                                        00019300
C                                                                       00019400
C                                                                       00019500
 3000 CONTINUE                                                          00019600
C                                                                       00019700
C            +++++ EXAMINE IF THE VERTEX IS CALCULATED FROM A COPLANER  00019800
C                  PAIR OF TRACKS. IF THE VERTEX IS >1CM AWAY FROM THE  00019900
C                  BEAM, MARK IT AS A BAD VERTEX.                       00020000
             CALL BLOC(NPTPVX,'TPVX',1,&3900)                           00020100
             NPTPV2 = NPTPVX+NPTPVX                                     00020200
             IF( HW(NPTPV2+2)/10.NE.2 ) GO TO 8000                      00020300
             IF( NGT.NE.2 ) GO TO 8000                                  00020400
             IF( RW(NPTPVX+2)**2+RW(NPTPVX+3)**2.LE.100. ) GO TO 8000   00020500
C            CHECK COPLANARITY                                          00020600
             COSCOP = XW(1)*XW(2)+YW(1)*YW(2)                           00020700
             ANORM = SQRT((XW(1)**2+YW(1)**2)*(XW(2)**2+YW(2)**2))      00020800
             IF(ANORM.LE.0.) ANORM = 1.0                                00020900
             COSCOP = COSCOP/ANORM                                      00021000
             IF( COSCOP.GT.-0.98 .AND. COSCOP.LT.0.98 ) GO TO 8000      00021100
 3900        IER = 1                                                    00021200
C            +++++                                                      00021300
C                                                                       00021400
 8000 CONTINUE                                                          00021500
      RETURN                                                            00021600
      END                                                               00021700
      SUBROUTINE TANDIR( IPPATR, VX, XT, ET )                           00021800
C----------------------------------------------------------             00021900
C VERSION OF 01/04/80    LAST MOD 08/04/80     E.ELSEN                  00022000
C COMPUTE TANGENT POINT XT AND DIRECTION OF TRACK WITH POINTER          00022100
C IPPATR AT CLOSEST DISTANCE TO POINT VX.                               00022200
C---------------------------------------------------------              00022300
      IMPLICIT INTEGER*2 (H), REAL*8 (D)                                00022400
      COMMON / BCS / IW(1)                                              00022500
      DIMENSION RW(1),HW(1)                                             00022600
      EQUIVALENCE (HW(1),RW(1),IW(1))                                   00022700
C                                                                       00022800
      DIMENSION VX(3), XT(3), ET(3)                                     00022900
C                                                                       00023000
      CALL PRTOCI( IPPATR, CAP, RMIN, PHI, SIG )                        00023100
      DRHO = 1. / CAP                                                   00023200
      DR0 = DRHO + RMIN                                                 00023300
      DXC = DR0 * COS( PHI )                                            00023400
      DYC = DR0 * SIN ( PHI )                                           00023500
      DEX = DXC - VX(1)                                                 00023600
      DEY = DYC - VX(2)                                                 00023700
      DRTOT = DSQRT( DEX*DEX + DEY*DEY )                                00023800
      DEX = DEX / DRTOT                                                 00023900
      DEY = DEY / DRTOT                                                 00024000
      R = SQRT( XT(1)**2 + XT(2)**2 )                                   00024100
      ADZDR = RW(IPPATR+30)                                             00024200
      Z0 = RW(IPPATR+31)                                                00024300
      XT(1) = DXC - DEX*DRHO                                            00024400
      XT(2) = DYC - DEY*DRHO                                            00024500
      XT(3) = R*ADZDR + Z0                                              00024600
      CS = 1. / SQRT(1.+ADZDR**2)                                       00024700
      ET(1) = -DEY*CS*SIG                                               00024800
      ET(2) =  DEX*CS*SIG                                               00024900
      ET(3) = CS* ADZDR                                                 00025000
      RETURN                                                            00025100
      END                                                               00025200
***HEADER*** MEMBER  VERTEX         SAVED BY F22KLE  ON 86/12/16  AT 12:43      
C   18/05/79 612161243  MEMBER NAME  VERTEX   (S)           FORTRAN     00000000
      SUBROUTINE VERTEX                                                 00000100
C*800623*DITTMANN****************************************************   00000200
C*                                                                  *   00000300
C*  !!! TO SEE LAST UPDATE : POINT 861215 !!!                       *   00000400
C*                                                                  *   00000500
C*  UPDATES :  860217 C.K. : PROPER ERRORS DDX,DDY (SPHI,CPHI)      *   00000600
C*                           (SPHI,CPHI -DEPENDENCE) INTRODUCED     *   00000700
C*                                                                  *   00000800
C*  UPDATES :  860316 C.K. : PROPER ERRORS DXY,DPHI INTRODUCED      *   00000900
C*                           ( ACCOUNTING OF CURVATURE-ERROR )      *   00001000
C*                                                                  *   00001100
C*  MODIFICATION OF 20.5.86                  KLE/RAM                *   00001200
C*  MAX NO OF TRACKS FOR VERTEX-FIT NOW 20 ( OLD 7)                 *   00001300
C*  COMMON CWORK1 NOW IN MACRO MVERTEX                              *   00001400
C*  MODIFICATION OF 27.5.86                  KLE/RAM                *   00001500
C*  MODES 2, 3, 4 AND STATISTICS                                    *   00001600
C*                                                                  *   00001700
C*  MODIFICATION OF 03.06.86                 KLE                    *   00001800
C*     END OF ITERAION IF MAX(|DS|) NOT SUM(|DS|) < DSCONV          *   00001900
C*                                                                  *   00002000
C*    +++ BIG MODIFICATION +++                    860611 C.K.       *   00002100
C*                                                                  *   00002200
C*    * FOR EACH TRACK NOW 40 INSTEAD OF 30 WORDS IN T()            *   00002300
C*                                                                  *   00002400
C*    * FITS IN RPHI AND ZS ARE TREATED INDEPENDENT                 *   00002500
C*      ( DIFFERENT FIRST POINT, MULT. SCATTERING POSSIBLE,         *   00002600
C*        THIS IS NECCESSARY FOR 'COMFIT'TED TRACKS         )       *   00002700
C*                                                                  *   00002800
C*                                                861215 C.K.       *   00002900
C*    * FOR EACH VERTEX NOW 13 INSTEAD OF 31 WORDS IN V()           *   00003000
C*      ( COVARIANCES ADDED )                                           00003100
C*                                                                  *   00003200
C*    * NUMBER OF WORDS FOR EACH TRACK ( "ITDLEN" ) AND FOR EACH    *   00003300
C*      VERTEX ( "IVDLEN" ) NOW AVAILABLE IN COMMON CVTXC           *   00003400
C*                                                                  *   00003500
C*    * VTXBNK CREATES 'GVTX' WITH ONLY THE FIRST 10 WORDS          *   00003600
C*      VTXBNC CREATES 'CVTX' WITH ALL "IVDLEN" WORDS               *   00003700
C*                                                                  *   00003800
C*    +++ END MODIFICATION +++                                      *   00003900
C*                                                                  *   00004000
C*    - HELIX- AND ERROR-CALCULATIONS WITH VTXS (SEE VTXPNT)        *   00004100
C*                                                                  *   00004200
%MACRO VTXDEF                                                           00004300
C*                                                                  *   00004400
C*       THIS ROUTINE CALLS SUBROUTINE SMINVD FOR SOLVING THE       *   00004500
C*       MATRIX EQUATION                                            *   00004600
C*                                                                  *   00004700
C*       MEANING OF TAXIS:                                          *   00004800
C*              1,2,3: X,Y,Z OF RUN-VERTEX                          *   00004900
C*              4,5,6: DX**2,DY**2,DZ**2 ERROR**2 OF RUN-VERTEX     *   00005000
C*              7,8,9: EX,EY,EZ UNIT-VECTOR OF CONSTRAIN-AXIS       *   00005100
C*              10,11,12: ERROR**2 OF CONSTRAIN-AXIS                *   00005200
C*                                                                  *   00005300
C*                                                                  *   00005400
C*   FOR DETAILS OF STATISTICS SEE VTXSTA                           *   00005500
C*                                                                  *   00005600
C********************************************************************   00005700
      IMPLICIT INTEGER*2 (H)                                            00005800
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00005900
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00006000
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00006100
C                                                                       00006200
      REAL*8 DET                                                        00006300
C                                                                       00006400
      LOGICAL LWARN                                                     00006500
      LOGICAL LOR, LAXIS, LRVCON, LRVST, LNOZ, LOCSTA                   00006600
C**                                                                     00006700
      DATA NCALL / 0 /,LWARN / .TRUE. /                                 00006800
C                                                                       00006900
      LRVST  = TBIT(MODE,31)                                            00007000
      LRVCON = TBIT(MODE,30)                                            00007100
      LAXIS  = TBIT(MODE,29)                                            00007200
      LNOZ   = TBIT(MODE,28)                                            00007300
      LOCSTA = TBIT(MODE,27)                                            00007400
      LOR    = LRVCON .OR. LAXIS                                        00007500
C                                                                       00007600
      IERR = 1                                                          00007700
      IF(NV.LE.0 .OR. NV.GT.20) GOTO 100                                00007800
C                                                                       00007900
      NCALL = NCALL + 1                                                 00008000
      IF (NCALL.GT.1) GOTO 99                                           00008100
      IF ((ITDLEN.GE.30).AND.(IVDLEN.GE.10)) GOTO 98                    00008200
         WRITE(6,9003)                                                  00008300
 9003    FORMAT(/' ??? INVALID ITDLEN, IVDLEN ???'/)                    00008400
         STOP                                                           00008500
   98 CONTINUE                                                          00008600
         WRITE(6,9000)                                                  00008700
 9000 FORMAT(/                                                          00008800
     &' *** NEW VERSION OF VERTEX-PACKAGE IS RUNNING. 15.12.86 C.K. ***'00008900
     &/                                                                 00009000
     &' ( 40 WORDS PER TRACK IN T(), XY-ERRORS FROM COVARIANCE MATRIX )'00009100
     &/                                                                 00009200
     &' ( 13 WORDS PER VERTEX IN V() )'                                 00009300
     &/)                                                                00009400
   99 CONTINUE                                                          00009500
      IF (NCALL.EQ.1 .AND. LAXIS) WRITE(6,9001)                         00009600
 9001 FORMAT(                                                           00009700
     & ' *******  SPECIAL VERSION OF VTXPRE/VERTEX  ********',/         00009800
     & ' *******     AXIS-CONSTRAINT IS RUNNING     ********'/)         00009900
      IF (NCALL.EQ.1 .AND. LRVCON) WRITE(6,9002)                        00010000
 9002 FORMAT(                                                           00010100
     & ' *******  SPECIAL VERSION OF VTXPRE/VERTEX  ********',/         00010200
     & ' *******   RUNVERTEX-CONSTRAINT IS RUNNING  ********'/)         00010300
C                                                                       00010400
      LV = (NV-1)*IVDLEN                                                00010500
      IV(LV+1) = 0                                                      00010600
      IERR = 2                                                          00010700
      IF(NT.LE.0) GOTO 100                                              00010800
C**                                                                     00010900
      IF(.NOT.LOR) GOTO 55                                              00011000
         TERR = TAXIS(4)*TAXIS(5)*TAXIS(6)                              00011100
         IF(TERR .GT. 0.0) GOTO 55                                      00011200
         IF(LWARN) WRITE(6,881)                                         00011300
 881     FORMAT(/' ==== WARNING FROM VERTEX: TAXIS NOT SET',            00011400
     &          ' , BUT REQUIRED --> FLAG IGNORED ==== '/)              00011500
         LWARN  = .FALSE.                                               00011600
         LAXIS  = .FALSE.                                               00011700
         LRVCON = .FALSE.                                               00011800
 55   CONTINUE                                                          00011900
C**                                                                     00012000
      NREJ  = 0                                                         00012100
      NREJV = 0                                                         00012200
C                                           ITERATION-LOOP              00012300
    1 CONTINUE                                                          00012400
      NTRV = 0                                                          00012500
      ITER = 0                                                          00012600
      CHI2 = 0.                                                         00012700
      ITFIN = 0                                                         00012800
C                                           CHECK TRACKS                00012900
C                                           IF MORE THAN 20,REJECT      00013000
C                                           WITH FEWEST MEASURED POINTS 00013100
      N = 0                                                             00013200
      J = 0                                                             00013300
      DO 5 I=1,NT                                                       00013400
         IF(IT(J+1).LE.1) GOTO 5                                        00013500
         N = N + 1                                                      00013600
         IF(N.GT.20) GOTO 2                                             00013700
            K = N                                                       00013800
            GOTO 4                                                      00013900
    2    MINPT = 48                                                     00014000
         DO 3 K=1,20                                                    00014100
            L = NTIND(K)                                                00014200
            IF(IT(L+13).GE.MINPT) GOTO 3                                00014300
            IMIN = K                                                    00014400
            MINPT = IT(L+13)                                            00014500
    3    CONTINUE                                                       00014600
         IF(IT(J+13).LE.MINPT) GOTO 5                                   00014700
         K = IMIN                                                       00014800
    4    NTIND(K) = J                                                   00014900
C        S(K) = 0.                                                      00015000
         S(K) = T(J+15)                                                 00015100
    5    J = J + ITDLEN                                                 00015200
C**                                                                     00015300
      SVR  = 0.0                                                        00015400
      DSMAX = 0.0                                                       00015500
      IMAX = 0                                                          00015600
C**                                                                     00015700
      IF(N.GT.20) N=20                                                  00015800
      NTR = N                                                           00015900
      B(1) = 0.0D0                                                      00016000
      B(2) = 0.0D0                                                      00016100
      IF (LAXIS) N = N + 1                                              00016200
      IERR = 3                                                          00016300
      IF(N.LE.0) GOTO 100                                               00016400
      IF (LRVCON) GOTO 10                                               00016500
      IERR = 8                                                          00016600
      IF(N.EQ.1) GOTO 50                                                00016700
      IF(N.NE.2) GOTO 10                                                00016800
C                                           CHECK IF COLLINEAR 2-PRONG  00016900
      J1 = NTIND(1)                                                     00017000
      J2 = NTIND(2)                                                     00017100
      COSW = T(J1+24)*T(J2+24) * (T(J1+21)*T(J2+21)+T(J1+22)*T(J2+22))  00017200
     *       + SIN(T(J1+4))*SIN(T(J2+4))                                00017300
      COSW = ABS(COSW)                                                  00017400
      IERR = 9                                                          00017500
      IF(COSW.GT.COLL2) GOTO 50                                         00017600
C                                                                       00017700
C                                           VERTEX FIT                  00017800
   10 CONTINUE                                                          00017900
         N = NTR + 3                                                    00018000
C**                                                                     00018100
         IF (LOR) N = N + 1                                             00018200
C**                                                                     00018300
         L = (N*(N+1))/2                                                00018400
         DO 11 I=1,L                                                    00018500
   11       A(I) = 0.D0                                                 00018600
         IF(ITFIN.EQ.1) GOTO 13                                         00018700
            DO 12 I=1,N                                                 00018800
   12          B(I) = 0.D0                                              00018900
   13    CONTINUE                                                       00019000
C**                                                                     00019100
         IF(.NOT.LOR) GOTO 130                                          00019200
            DDAX = 1./(TAXIS(4) + SVR**2*TAXIS(10))                     00019300
            DDAY = 1./(TAXIS(5) + SVR**2*TAXIS(11))                     00019400
            DDAZ = 1./(TAXIS(6) + SVR**2*TAXIS(12))                     00019500
            XAXIS = TAXIS(1) + SVR*TAXIS(7)                             00019600
            YAXIS = TAXIS(2) + SVR*TAXIS(8)                             00019700
            ZAXIS = TAXIS(3) + SVR*TAXIS(9)                             00019800
            DDAZZ = DDAZ                                                00019900
            IF (LNOZ) DDAZ = 0.                                         00020000
 130     CONTINUE                                                       00020100
C**                                                                     00020200
         DO 19 I=1,NTR                                                  00020300
            J = NTIND(I)                                                00020400
            N = I + 3                                                   00020500
            L = (N*(N-1))/2                                             00020600
C                                                                       00020700
            CALL VTXS(J,S(I),XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT)        00020800
C                                                                       00020900
            SPHI = SIN(PHIT)                                            00021000
            CPHI = COS(PHIT)                                            00021100
C                                                                       00021200
            DDX = 1. / DXT2                                             00021300
            DDY = 1. / DYT2                                             00021400
            DDZ = 1. / DZT2                                             00021500
C                                                                       00021600
            DDZZ = DDZ                                                  00021700
            IF (LNOZ) DDZ = 0.                                          00021800
            IF(ITFIN.EQ.0) GOTO 15                                      00021900
               IT(J+1) = 3                                              00022000
               CHITR(I) = DDX*(XT-B(1))**2 + DDY*(YT-B(2))**2           00022100
     &                                     + DDZ*(ZT-B(3))**2           00022200
               CHI2 = CHI2 + CHITR(I)                                   00022300
               IF ((T(J+5)**2+T(J+6)**2).LT.RTANK**2) NTRV = NTRV + 1   00022400
               GOTO 16                                                  00022500
   15       CONTINUE                                                    00022600
            B(1) = B(1) + DBLE(XT)*DBLE(DDX)                            00022700
            B(2) = B(2) + DBLE(YT)*DBLE(DDY)                            00022800
            B(3) = B(3) + DBLE(ZT)*DBLE(DDZZ)                           00022900
            B(N) = - XT*CPHI*DDX - YT*SPHI*DDY - ZT*T(J+23)*DDZ         00023000
   16       A(1) = A(1) + DDX                                           00023100
            A(3) = A(3) + DDY                                           00023200
            A(6) = A(6) + DDZZ                                          00023300
            A(L+1) = -CPHI*DDX                                          00023400
            A(L+2) = -SPHI*DDY                                          00023500
            A(L+3) = -T(J+23)*DDZ                                       00023600
            A(L+N) = CPHI**2*DDX + SPHI**2*DDY + T(J+23)**2*DDZ         00023700
   19    CONTINUE                                                       00023800
C**                                                                     00023900
         IF (.NOT.LOR) GOTO 200                                         00024000
            N = NTR + 4                                                 00024100
            L = N*(N-1)/2                                               00024200
            IF(ITFIN .EQ. 1) GOTO 190                                   00024300
               B(1) = B(1) + DBLE(XAXIS)*DBLE(DDAX)                     00024400
               B(2) = B(2) + DBLE(YAXIS)*DBLE(DDAY)                     00024500
               B(3) = B(3) + DBLE(ZAXIS)*DBLE(DDAZZ)                    00024600
               B(N) = - XAXIS*TAXIS(7)*DDAX                             00024700
     &                - YAXIS*TAXIS(8)*DDAY                             00024800
     &                - ZAXIS*TAXIS(9)*DDAZ                             00024900
  190       CONTINUE                                                    00025000
            A(1) = A(1) + DDAX                                          00025100
            A(3) = A(3) + DDAY                                          00025200
            A(6) = A(6) + DDAZZ                                         00025300
            A(L+1) = -TAXIS(7)*DDAX                                     00025400
            A(L+2) = -TAXIS(8)*DDAY                                     00025500
            A(L+3) = -TAXIS(9)*DDAZ                                     00025600
            A(L+N) = TAXIS(7)**2*DDAX +                                 00025700
     &               TAXIS(8)**2*DDAY +                                 00025800
     &               TAXIS(9)**2*DDAZ                                   00025900
  200    CONTINUE                                                       00026000
C**                                                                     00026100
         IF(ITFIN.EQ.1) GOTO 30                                         00026200
C                                          SOLVE MATRIX EQUATION        00026300
C======                                                                 00026400
C        WRITE(6,8990)ITFIN,N                                           00026500
C8990    FORMAT(' ---> FOR SMINVD ITFIN,N: ',2I5)                       00026600
C        WRITE(6,8997)(A(JJ),JJ= 1,L)                                   00026700
C8997    FORMAT(' A: ',9G13.4)                                          00026800
C        WRITE(6,8998)(B(JJ),JJ= 1,N)                                   00026900
C8998    FORMAT(' B: ',9G13.4)                                          00027000
C========                                                               00027100
         CALL SMINVD(A,B,N,1,DET)                                       00027200
         IERR = 4                                                       00027300
         IF(DET.EQ.0.0) GOTO 100                                        00027400
C======                                                                 00027500
C        WRITE(6,8928)(B(JJ),JJ= 1,N)                                   00027600
C8928    FORMAT(' B  ',9G13.4)                                          00027700
C========                                                               00027800
         DSUM  = 0.                                                     00027900
         DSMAX = 0.                                                     00028000
         IMAX  = 0                                                      00028100
         DO 23 I=1,NTR                                                  00028200
            J = NTIND(I)                                                00028300
            DS  = B(I+3)                                                00028400
            ADS = ABS(DS)                                               00028500
            IF(ABS(DS/T(J+2)).GT.1.5) GOTO 25                           00028600
            DSUM = DSUM + ADS                                           00028700
            S(I) = S(I) + DS                                            00028800
            T(J+15) = S(I)                                              00028900
            IF (ADS.LE.DSMAX) GOTO 23                                   00029000
               IMAX = I                                                 00029100
               DSMAX = ADS                                              00029200
   23    CONTINUE                                                       00029300
C**                                                                     00029400
         IF (.NOT.LAXIS) GOTO 230                                       00029500
            DS = B(NTR + 4)                                             00029600
            ADS = ABS(DS)                                               00029700
            DSUM = DSUM + ADS                                           00029800
            SVR = SVR + DS                                              00029900
            IF (ADS.LE.DSMAX) GOTO 230                                  00030000
               IMAX = -IMAX                                             00030100
               DSMAX = ADS                                              00030200
  230    CONTINUE                                                       00030300
C**                                                                     00030400
         ITER = ITER + 1                                                00030500
CHANGED  IF(ITER.LT.MITER .AND. DSUM.GT.DSCONV) GOTO 10                 00030600
         IF(ITER.LT.MITER .AND. DSMAX.GT.DSCONV) GOTO 10                00030700
C                                          FIT FINISHED, REPEAT ONCE    00030800
C                                          MORE WITH PROPER ERRORS      00030900
         ITFIN = 1                                                      00031000
C                                                                       00031100
      GOTO 10                                                           00031200
C                         EXTRAPOLATION OF TRACK I EXCEEDS 90 DEG       00031300
C                         REMOVE TRACK AND RESTART IF MORE THAN ONE LEFT00031400
   25 IERR = 5                                                          00031500
      IF(NTR.LE.2) GOTO 100                                             00031600
      IT(J+1) = 1                                                       00031700
      NREJ = NREJ + 1                                                   00031800
      IF ((T(J+5)**2+T(J+6)**2).LT.RTANK**2) NREJV = NREJV + 1          00031900
C                                                                       00032000
      GOTO 1                                                            00032100
C                                                                       00032200
   30 CALL SMINVD(A,DUMMY,N,0,DET)                                      00032300
      IF (TBIT(MODE,24)) WRITE(6,9099) (A(K),K=1,6)                     00032400
 9099 FORMAT(' *** A(1..6) : ',6G13.4)                                  00032500
C                                                                       00032600
      IERR = 6                                                          00032700
      IF(A(1).LT.0.0 .OR. A(3).LT.0.0 .OR. A(6).LT.0.0) GOTO 100        00032800
      NDF = 2*NTR - 3                                                   00032900
      IF (LNOZ) NDF = NTR - 2                                           00033000
C**                                                                     00033100
      IF (.NOT.LOR) GOTO 300                                            00033200
         NDF = NDF + 2                                                  00033300
         CHI2 = CHI2 + DDAX*(XAXIS-B(1))**2                             00033400
     &               + DDAY*(YAXIS-B(2))**2                             00033500
     &               + DDAZ*(ZAXIS-B(3))**2                             00033600
 300  CONTINUE                                                          00033700
C**                                                                     00033800
      PR = 1.                                                           00033900
      IF (NDF.GT.0) PR = PROB(CHI2,NDF)                                 00034000
      IV(LV+1) = 1                                                      00034100
      IF(PR.GT.PRCUT) IV(LV+1)=3                                        00034200
      V(LV+2) = B(1)                                                    00034300
      V(LV+3) = B(2)                                                    00034400
      V(LV+4) = B(3)                                                    00034500
      V(LV+5) = DSQRT(A(1))                                             00034600
      V(LV+6) = DSQRT(A(3))                                             00034700
      V(LV+7) = DSQRT(A(6))                                             00034800
      IV(LV+8) = NTR                                                    00034900
      V(LV+9) = CHI2                                                    00035000
      V(LV+11) = SNGL(A(2))                                             00035100
      V(LV+12) = SNGL(A(4))                                             00035200
      V(LV+13) = SNGL(A(5))                                             00035300
      IERR = -1                                                         00035400
      IF(IREJTR.EQ.0) GOTO 100                                          00035500
      IF(IV(LV+1).EQ.3) GOTO 100                                        00035600
      IERR = 7                                                          00035700
      IF(NTR.LE.2) GOTO 100                                             00035800
C                                         BAD CHISQUARE                 00035900
C                                         CHECK IF THERE IS ONE TRACK   00036000
C                                         WHICH CONTRIBUTES MOST TO CHI200036100
      CHIMAX = 0.                                                       00036200
      DO 32 I=1,NTR                                                     00036300
         IF(CHITR(I).LT.CHIMAX) GOTO 32                                 00036400
         CHIMAX = CHITR(I)                                              00036500
         NTMAX = I                                                      00036600
   32 CONTINUE                                                          00036700
      CHICUT = 3. / NTR                                                 00036800
      IF(CHICUT.GT..9) CHICUT=.9                                        00036900
      CHICUT = CHICUT * CHI2                                            00037000
      IERR = 0                                                          00037100
      IF(CHIMAX.LT.CHICUT) GOTO 100                                     00037200
      J = NTIND(NTMAX)                                                  00037300
      IT(J+1) = 1                                                       00037400
      NREJ = NREJ + 1                                                   00037500
      IF ((T(J+5)**2+T(J+6)**2).LT.RTANK**2) NREJV = NREJV + 1          00037600
C                                                                       00037700
      GOTO 1                                                            00037800
C                                                                       00037900
C                                           1-PRONG OR COLLINEAR 2-PRONG00038000
C                                                                       00038100
   50 CONTINUE                                                          00038200
      IV(LV+1) = 2                                                      00038300
      J = NTIND(1)                                                      00038400
      CALL VTXPNT(J,XB,YB,XT1,YT1,ZT1,DXT21,DYT21,DZT21,PHIT,DPHIT,ST)  00038500
      IT(J+1) = 3                                                       00038600
      IF(NTR.EQ.2) GOTO 52                                              00038700
      V(LV+2) = XT1                                                     00038800
      V(LV+3) = YT1                                                     00038900
      V(LV+4) = ZT1                                                     00039000
      V(LV+5) = SQRT(DXT21)                                             00039100
      V(LV+6) = SQRT(DYT21)                                             00039200
      V(LV+7) = SQRT(DZT21)                                             00039300
      IV(LV+8) = 1                                                      00039400
      V(LV+9) = 0.                                                      00039500
      IV(LV+10) = 1                                                     00039600
      GOTO 100                                                          00039700
   52 J = NTIND(2)                                                      00039800
      CALL VTXPNT(J,XB,YB,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT,DPHIT,ST)  00039900
      IT(J+1) = 3                                                       00040000
      V(LV+2) = (XT1+XT2)/2.                                            00040100
      V(LV+3) = (YT1+YT2)/2.                                            00040200
      V(LV+4) = (ZT1+ZT2)/2.                                            00040300
      V(LV+5) = SQRT((DXT21+DXT22)/2.)                                  00040400
      V(LV+6) = SQRT((DYT21+DYT22)/2.)                                  00040500
      V(LV+7) = SQRT((DZT21+DZT22)/2.)                                  00040600
      IV(LV+8) = 2                                                      00040700
      V(LV+9) = 0.                                                      00040800
      V(LV+11) = 0.                                                     00040900
      V(LV+12) = 0.                                                     00041000
      V(LV+13) = 0.                                                     00041100
      IV(LV+10) = 2                                                     00041200
      SDXY1 = SQRT(((XT1-V(LV+2))**2/DXT21 + (YT1-V(LV+3))**2/DYT21)/2.)00041300
      IF(SDXY1.GT.3.) IV(LV+1)=1                                        00041400
      SDXY2 = SQRT(((XT2-V(LV+2))**2/DXT22 + (YT2-V(LV+3))**2/DYT22)/2.)00041500
      IF(SDXY2.GT.3.) IV(LV+1)=1                                        00041600
      SDZ1 = ABS(ZT1-V(LV+4))/SQRT(DZT21)                               00041700
      IF(SDZ1.GT.3.) IV(LV+1)=1                                         00041800
      SDZ2 = ABS(ZT2-V(LV+4))/SQRT(DZT22)                               00041900
      IF(SDZ2.GT.3.) IV(LV+1)=1                                         00042000
C                                                                       00042100
  100 CONTINUE                                                          00042200
      IF (.NOT.LOCSTA) GOTO 120                                         00042300
      IF (IERR.LE.0) GOTO 110                                           00042400
      CALL VTXERR(IERR)                                                 00042500
      GOTO 120                                                          00042600
  110 CONTINUE                                                          00042700
      WRITE(6,9345) LRVST,LRVCON,LAXIS,LNOZ,NTR,NTRV,NREJ,NREJV,        00042800
     &              ITER,DSMAX,NDF,CHI2                                 00042900
 9345 FORMAT(' START AT RV, RV-CON., AXIS-CON., NO Z : ',4L2/           00043000
     &       ' NTR,NREJ           : ',4I6/                              00043100
     &       ' ITER,DSMAX,NDF,CHI2 : ',I6,G13.4,I6,G13.4)               00043200
C                                                                       00043300
  120 CONTINUE                                                          00043400
      HVTXST( 1) = IERR                                                 00043500
      HVTXST(19) = ITER                                                 00043600
      IDSMAX = 30000                                                    00043700
      IF (DSMAX.LT.30.) IDSMAX = IFIX( DSMAX * 1000. )                  00043800
      HVTXST(20) = IDSMAX                                               00043900
      HVTXST( 2) = HVTXST(2) + 1                                        00044000
      HVTXST(4+IERR) = HVTXST(4+IERR) + 1                               00044100
      IF (LRVST)  HVTXST(14) = HVTXST(14) + 1                           00044200
      IF (LRVCON) HVTXST(15) = HVTXST(15) + 1                           00044300
      IF (LAXIS)  HVTXST(16) = HVTXST(16) + 1                           00044400
      IF (LNOZ)   HVTXST(17) = HVTXST(17) + 1                           00044500
      IF (IERR.GT.0) RETURN                                             00044600
C                                                                       00044700
      HVTXST(18) = IFIX(PR*10000.)                                      00044800
      IF (NTR .GT.19) NTR  = 19                                         00044900
      IF (NTRV.GT.19) NTRV = 19                                         00045000
      HVTXST(21+NTR)  = HVTXST(21+NTR)  + 1                             00045100
      HVTXST(41+NTRV) = HVTXST(41+NTRV) + 1                             00045200
      IF (NREJ .GT.19) NREJ  = 19                                       00045300
      IF (NREJV.GT.19) NREJV = 19                                       00045400
      HVTXST(61+NREJ)  = HVTXST(61+NREJ)  + 1                           00045500
      HVTXST(81+NREJV) = HVTXST(81+NREJV) + 1                           00045600
      IF (ITER.GT.20) ITER = 20                                         00045700
      II = 100                                                          00045800
      IF (IERR.GE.0) II = 120                                           00045900
      HVTXST(II+ITER)  = HVTXST(II+ITER)  + 1                           00046000
C                                                                       00046100
      RETURN                                                            00046200
      END                                                               00046300
***HEADER*** MEMBER  VERTEX9        SAVED BY F22KLE  ON 87/02/06  AT 10:29      
"   06/02/87 702061029  MEMBER NAME  VERTEX9  (S)           MORTRA34 "          
      SUBROUTINE VERTEX;                                                        
"*800623*DITTMANN****************************************************           
C*                                                                  *           
C*  !!! TO SEE LAST UPDATE : POINT 861215 !!!                       *           
C*                                                                  *           
C*  UPDATES :  860217 C.K. : PROPER ERRORS DDX,DDY (SPHI,CPHI)      *           
C*                           (SPHI,CPHI -DEPENDENCE) INTRODUCED     *           
C*                                                                  *           
C*  UPDATES :  860316 C.K. : PROPER ERRORS DXY,DPHI INTRODUCED      *           
C*                           ( ACCOUNTING OF CURVATURE-ERROR )      *           
C*                                                                  *           
C*  MODIFICATION OF 20.5.86                  KLE/RAM                *           
C*  MAX NO OF TRACKS FOR VERTEX-FIT NOW 20 ( OLD 7)                 *           
C*  COMMON CWORK1 NOW IN MACRO MVERTEX                              *           
C*  MODIFICATION OF 27.5.86                  KLE/RAM                *           
C*  MODES 2, 3, 4 AND STATISTICS                                    *           
C*                                                                  *           
C*  MODIFICATION OF 03.06.86                 KLE                    *           
C*     END OF ITERAION IF MAX(|DS|) NOT SUM(|DS|) < DSCONV          *           
C*                                                                  *           
C*    +++ BIG MODIFICATION +++                    860611 C.K.       *           
C*                                                                  *           
C*    * FOR EACH TRACK NOW 40 INSTEAD OF 30 WORDS IN T()            *           
C*                                                                  *           
C*    * FITS IN RPHI AND ZS ARE TREATED INDEPENDENT                 *           
C*      ( DIFFERENT FIRST POINT, MULT. SCATTERING POSSIBLE,         *           
C*        THIS IS NECCESSARY FOR 'COMFIT'TED TRACKS         )       *           
C*                                                                  *           
C*                                                861215 C.K.       *           
C*    * FOR EACH VERTEX NOW 13 INSTEAD OF 31 WORDS IN V()           *           
C*      ( COVARIANCES ADDED )                                                   
C*                                                                  *           
C*    * NUMBER OF WORDS FOR EACH TRACK ( "ITDLEN" ) AND FOR EACH    *           
C*      VERTEX ( "IVDLEN" ) NOW AVAILABLE IN COMMON CVTXC           *           
C*                                                                  *           
C*    * VTXBNK CREATES 'GVTX' WITH ONLY THE FIRST 10 WORDS          *           
C*      VTXBNC CREATES 'CVTX' WITH ALL "IVDLEN" WORDS               *           
C*                                                                  *           
C*    +++ END MODIFICATION +++                                      *           
C*                                                                  *           
C*    - HELIX- AND ERROR-CALCULATIONS WITH VTXS (SEE VTXPNT)        *           
C*                                                                  *"          
;                                                                               
%F                                                                              
%MACRO VTXDEF                                                                   
%M                                                                              
"*                                                                  *           
C*       THIS ROUTINE CALLS SUBROUTINE SMINVD FOR SOLVING THE       *           
C*       MATRIX EQUATION                                            *           
C*                                                                  *           
C*       MEANING OF TAXIS:                                          *           
C*              1,2,3: X,Y,Z OF RUN-VERTEX                          *           
C*              4,5,6: DX**2,DY**2,DZ**2 ERROR**2 OF RUN-VERTEX     *           
C*              7,8,9: EX,EY,EZ UNIT-VECTOR OF CONSTRAIN-AXIS       *           
C*              10,11,12: ERROR**2 OF CONSTRAIN-AXIS                *           
C*                                                                  *           
C*                                                                  *           
C*   FOR DETAILS OF STATISTICS SEE VTXSTA                           *           
C*                                                                  *           
C********************************************************************"          
      IMPLICIT INTEGER*2 (H)                                                    
;                                                                               
%F                                                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                              
%M                                                                              
;                                                                               
%F                                                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                              
%M                                                                              
;                                                                               
%F                                                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                              
%M                                                                              
""                                                                              
      REAL*8 DET;                                                               
""                                                                              
      LOGICAL LWARN;                                                            
      LOGICAL LOR, LAXIS, LRVCON, LRVST, LNOZ, LOCSTA;                          
"**"                                                                            
      DATA NCALL / 0 /,LWARN / .TRUE. /;                                        
""                                                                              
      LRVST  = TBIT(MODE,31);                                                   
      LRVCON = TBIT(MODE,30);                                                   
      LAXIS  = TBIT(MODE,29);                                                   
      LNOZ   = TBIT(MODE,28);                                                   
      LOCSTA = TBIT(MODE,27);                                                   
      LOR    = LRVCON .OR. LAXIS;                                               
""                                                                              
      IERR = 1;                                                                 
      IF(NV.LE.0 .OR. NV.GT.20) GOTO 100;                                       
""                                                                              
      NCALL = NCALL + 1;                                                        
      IF (NCALL.GT.1) GOTO 99;                                                  
      IF ((ITDLEN.GE.30).AND.(IVDLEN.GE.10)) GOTO 98;                           
         WRITE(6,9003);                                                         
 9003    FORMAT(/' ??? INVALID ITDLEN, IVDLEN ???'/);                           
         STOP;                                                                  
   98 CONTINUE;                                                                 
         WRITE(6,9000);                                                         
 9000 FORMAT(/                                                                  
      ' *** NEW VERSION OF VERTEX-PACKAGE IS RUNNING. 15.12.86 C.K. ***'        
      /                                                                         
      ' ( 40 WORDS PER TRACK IN T(), XY-ERRORS FROM COVARIANCE MATRIX )'        
      /                                                                         
      ' ( 13 WORDS PER VERTEX IN V() )'                                         
      /);                                                                       
   99 CONTINUE;                                                                 
      IF (NCALL.EQ.1 .AND. LAXIS) WRITE(6,9001);                                
 9001 FORMAT(                                                                   
       ' *******  SPECIAL VERSION OF VTXPRE/VERTEX  ********',/                 
       ' *******     AXIS-CONSTRAINT IS RUNNING     ********'/);                
      IF (NCALL.EQ.1 .AND. LRVCON) WRITE(6,9002);                               
 9002 FORMAT(                                                                   
       ' *******  SPECIAL VERSION OF VTXPRE/VERTEX  ********',/                 
       ' *******   RUNVERTEX-CONSTRAINT IS RUNNING  ********'/);                
""                                                                              
      LV = (NV-1)*IVDLEN;                                                       
      IV(LV+1) = 0;                                                             
      IERR = 2;                                                                 
      IF(NT.LE.0) GOTO 100;                                                     
"**"                                                                            
      IF(.NOT.LOR) GOTO 55;                                                     
         TERR = TAXIS(4)*TAXIS(5)*TAXIS(6);                                     
         IF(TERR .GT. 0.0) GOTO 55;                                             
         IF(LWARN) WRITE(6,881);                                                
 881     FORMAT(/' ==== WARNING FROM VERTEX: TAXIS NOT SET',                    
                ' , BUT REQUIRED --> FLAG IGNORED ==== '/);                     
         LWARN  = .FALSE.;                                                      
         LAXIS  = .FALSE.;                                                      
         LRVCON = .FALSE.;                                                      
 55   CONTINUE;                                                                 
"**"                                                                            
      NREJ  = 0;                                                                
      NREJV = 0;                                                                
"                                           ITERATION-LOOP"                     
    1 CONTINUE;                                                                 
      NTRV = 0;                                                                 
      ITER = 0;                                                                 
      CHI2 = 0.;                                                                
      ITFIN = 0;                                                                
"                                           CHECK TRACKS                        
C                                           IF MORE THAN 20,REJECT              
C                                           WITH FEWEST MEASURED POINTS"        
      N = 0;                                                                    
      J = 0;                                                                    
      DO 5 I=1,NT;                                                              
         IF(IT(J+1).LE.1) GOTO 5;                                               
         N = N + 1;                                                             
         IF(N.GT.20) GOTO 2;                                                    
            K = N;                                                              
            GOTO 4;                                                             
    2    MINPT = 48;                                                            
         DO 3 K=1,20;                                                           
            L = NTIND(K);                                                       
            IF(IT(L+13).GE.MINPT) GOTO 3;                                       
            IMIN = K;                                                           
            MINPT = IT(L+13);                                                   
    3    CONTINUE;                                                              
         IF(IT(J+13).LE.MINPT) GOTO 5;                                          
         K = IMIN;                                                              
    4    NTIND(K) = J;                                                          
"        S(K) = 0."                                                             
         S(K) = T(J+15);                                                        
    5    J = J + ITDLEN;                                                        
"**"                                                                            
      SVR  = 0.0;                                                               
      DSMAX = 0.0;                                                              
      IMAX = 0;                                                                 
"**"                                                                            
      IF(N.GT.20) N=20;                                                         
      NTR = N;                                                                  
      B(1) = 0.0D0;                                                             
      B(2) = 0.0D0;                                                             
      IF (LAXIS) N = N + 1;                                                     
      IERR = 3;                                                                 
      IF(N.LE.0) GOTO 100;                                                      
      IF (LRVCON) GOTO 10;                                                      
      IERR = 8;                                                                 
      IF(N.EQ.1) GOTO 50;                                                       
      IF(N.NE.2) GOTO 10;                                                       
"                                           CHECK IF COLLINEAR 2-PRONG"         
      J1 = NTIND(1);                                                            
      J2 = NTIND(2);                                                            
      COSW = T(J1+24)*T(J2+24) * (T(J1+21)*T(J2+21)+T(J1+22)*T(J2+22))          
             + SIN(T(J1+4))*SIN(T(J2+4));                                       
      COSW = ABS(COSW);                                                         
      IERR = 9;                                                                 
      IF(COSW.GT.COLL2) GOTO 50;                                                
"                                                                               
C                                           VERTEX FIT"                         
   10 CONTINUE;                                                                 
         N = NTR + 3;                                                           
"**"                                                                            
         IF (LOR) N = N + 1;                                                    
"**"                                                                            
         L = (N*(N+1))/2;                                                       
         DO 11 I=1,L;                                                           
   11       A(I) = 0.D0;                                                        
         IF(ITFIN.EQ.1) GOTO 13;                                                
            DO 12 I=1,N;                                                        
   12          B(I) = 0.D0;                                                     
   13    CONTINUE;                                                              
"**"                                                                            
         IF(.NOT.LOR) GOTO 130;                                                 
            DDAX = 1./(TAXIS(4) + SVR**2*TAXIS(10));                            
            DDAY = 1./(TAXIS(5) + SVR**2*TAXIS(11));                            
            DDAZ = 1./(TAXIS(6) + SVR**2*TAXIS(12));                            
            XAXIS = TAXIS(1) + SVR*TAXIS(7);                                    
            YAXIS = TAXIS(2) + SVR*TAXIS(8);                                    
            ZAXIS = TAXIS(3) + SVR*TAXIS(9);                                    
            DDAZZ = DDAZ;                                                       
            IF (LNOZ) DDAZ = 0.;                                                
 130     CONTINUE;                                                              
"**"                                                                            
         DO 19 I=1,NTR;                                                         
            J = NTIND(I);                                                       
            N = I + 3;                                                          
            L = (N*(N-1))/2;                                                    
""                                                                              
            CALL VTXS(J,S(I),XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT);               
""                                                                              
            SPHI = SIN(PHIT);                                                   
            CPHI = COS(PHIT);                                                   
""                                                                              
            DDX = 1. / DXT2;                                                    
            DDY = 1. / DYT2;                                                    
            DDZ = 1. / DZT2;                                                    
""                                                                              
            DDZZ = DDZ;                                                         
            IF (LNOZ) DDZ = 0.;                                                 
            IF(ITFIN.EQ.0) GOTO 15;                                             
               IT(J+1) = 3;                                                     
               CHITR(I) = DDX*(XT-B(1))**2 + DDY*(YT-B(2))**2                   
                                           + DDZ*(ZT-B(3))**2;                  
               CHI2 = CHI2 + CHITR(I);                                          
               IF ((T(J+5)**2+T(J+6)**2).LT.RTANK**2) NTRV = NTRV + 1;          
               GOTO 16;                                                         
   15       CONTINUE;                                                           
            B(1) = B(1) + DBLE(XT)*DBLE(DDX);                                   
            B(2) = B(2) + DBLE(YT)*DBLE(DDY);                                   
            B(3) = B(3) + DBLE(ZT)*DBLE(DDZZ);                                  
            B(N) = - XT*CPHI*DDX - YT*SPHI*DDY - ZT*T(J+23)*DDZ;                
   16       A(1) = A(1) + DDX;                                                  
            A(3) = A(3) + DDY;                                                  
            A(6) = A(6) + DDZZ;                                                 
            A(L+1) = -CPHI*DDX;                                                 
            A(L+2) = -SPHI*DDY;                                                 
            A(L+3) = -T(J+23)*DDZ;                                              
            A(L+N) = CPHI**2*DDX + SPHI**2*DDY + T(J+23)**2*DDZ;                
   19    CONTINUE;                                                              
"**"                                                                            
         IF (.NOT.LOR) GOTO 200;                                                
            N = NTR + 4;                                                        
            L = N*(N-1)/2;                                                      
            IF(ITFIN .EQ. 1) GOTO 190;                                          
               B(1) = B(1) + DBLE(XAXIS)*DBLE(DDAX);                            
               B(2) = B(2) + DBLE(YAXIS)*DBLE(DDAY);                            
               B(3) = B(3) + DBLE(ZAXIS)*DBLE(DDAZZ);                           
               B(N) = - XAXIS*TAXIS(7)*DDAX                                     
                      - YAXIS*TAXIS(8)*DDAY                                     
                      - ZAXIS*TAXIS(9)*DDAZ;                                    
  190       CONTINUE;                                                           
            A(1) = A(1) + DDAX;                                                 
            A(3) = A(3) + DDAY;                                                 
            A(6) = A(6) + DDAZZ;                                                
            A(L+1) = -TAXIS(7)*DDAX;                                            
            A(L+2) = -TAXIS(8)*DDAY;                                            
            A(L+3) = -TAXIS(9)*DDAZ;                                            
            A(L+N) = TAXIS(7)**2*DDAX +                                         
                     TAXIS(8)**2*DDAY +                                         
                     TAXIS(9)**2*DDAZ;                                          
  200    CONTINUE;                                                              
"**"                                                                            
         IF(ITFIN.EQ.1) GOTO 30;                                                
"                                          SOLVE MATRIX EQUATION                
C======                                                                         
C        WRITE(6,8990)ITFIN,N                                                   
C8990    FORMAT(' ---> FOR SMINVD ITFIN,N: ',2I5)                               
C        WRITE(6,8997)(A(JJ),JJ= 1,L)                                           
C8997    FORMAT(' A: ',9G13.4)                                                  
C        WRITE(6,8998)(B(JJ),JJ= 1,N)                                           
C8998    FORMAT(' B: ',9G13.4)                                                  
C========"                                                                      
         CALL SMINVD(A,B,N,1,DET);                                              
         IERR = 4;                                                              
         IF(DET.EQ.0.0) GOTO 100;                                               
"======                                                                         
C        WRITE(6,8928)(B(JJ),JJ= 1,N)                                           
C8928    FORMAT(' B  ',9G13.4)                                                  
C========"                                                                      
         DSUM  = 0.;                                                            
         DSMAX = 0.;                                                            
         IMAX  = 0;                                                             
         DO 23 I=1,NTR;                                                         
            J = NTIND(I);                                                       
            DS  = B(I+3);                                                       
            ADS = ABS(DS);                                                      
            IF(ABS(DS/T(J+2)).GT.1.5) GOTO 25;                                  
            DSUM = DSUM + ADS;                                                  
            S(I) = S(I) + DS;                                                   
            T(J+15) = S(I);                                                     
            IF (ADS.LE.DSMAX) GOTO 23;                                          
               IMAX = I;                                                        
               DSMAX = ADS;                                                     
   23    CONTINUE;                                                              
"**"                                                                            
         IF (.NOT.LAXIS) GOTO 230;                                              
            DS = B(NTR + 4);                                                    
            ADS = ABS(DS);                                                      
            DSUM = DSUM + ADS;                                                  
            SVR = SVR + DS;                                                     
            IF (ADS.LE.DSMAX) GOTO 230;                                         
               IMAX = -IMAX;                                                    
               DSMAX = ADS;                                                     
  230    CONTINUE;                                                              
"**"                                                                            
         ITER = ITER + 1;                                                       
"HANGED  IF(ITER.LT.MITER .AND. DSUM.GT.DSCONV) GOTO 10"                        
         IF(ITER.LT.MITER .AND. DSMAX.GT.DSCONV) GOTO 10;                       
"                                          FIT FINISHED, REPEAT ONCE            
C                                          MORE WITH PROPER ERRORS"             
         ITFIN = 1;                                                             
""                                                                              
      GOTO 10;                                                                  
"                         EXTRAPOLATION OF TRACK I EXCEEDS 90 DEG               
C                         REMOVE TRACK AND RESTART IF MORE THAN ONE LEFT        
"                                                                               
   25 IERR = 5;                                                                 
      IF(NTR.LE.2) GOTO 100;                                                    
      IT(J+1) = 1;                                                              
      NREJ = NREJ + 1;                                                          
      IF ((T(J+5)**2+T(J+6)**2).LT.RTANK**2) NREJV = NREJV + 1;                 
""                                                                              
      GOTO 1;                                                                   
""                                                                              
   30 CALL SMINVD(A,DUMMY,N,0,DET);                                             
      IF (TBIT(MODE,24)) WRITE(6,9099) (A(K),K=1,6);                            
 9099 FORMAT(' *** A(1..6) : ',6G13.4);                                         
""                                                                              
      IERR = 6;                                                                 
      IF(A(1).LT.0.0 .OR. A(3).LT.0.0 .OR. A(6).LT.0.0) GOTO 100;               
      NDF = 2*NTR - 3;                                                          
      IF (LNOZ) NDF = NTR - 2;                                                  
"**"                                                                            
      IF (.NOT.LOR) GOTO 300;                                                   
         NDF = NDF + 2;                                                         
         CHI2 = CHI2 + DDAX*(XAXIS-B(1))**2                                     
                     + DDAY*(YAXIS-B(2))**2                                     
                     + DDAZ*(ZAXIS-B(3))**2;                                    
 300  CONTINUE;                                                                 
"**"                                                                            
      PR = 1.;                                                                  
      IF (NDF.GT.0) PR = PROB(CHI2,NDF);                                        
      IV(LV+1) = 1;                                                             
      IF(PR.GT.PRCUT) IV(LV+1)=3;                                               
      V(LV+2) = B(1);                                                           
      V(LV+3) = B(2);                                                           
      V(LV+4) = B(3);                                                           
      V(LV+5) = DSQRT(A(1));                                                    
      V(LV+6) = DSQRT(A(3));                                                    
      V(LV+7) = DSQRT(A(6));                                                    
      IV(LV+8) = NTR;                                                           
      V(LV+9) = CHI2;                                                           
      V(LV+11) = SNGL(A(2));                                                    
      V(LV+12) = SNGL(A(4));                                                    
      V(LV+13) = SNGL(A(5));                                                    
      IERR = -1;                                                                
      IF(IREJTR.EQ.0) GOTO 100;                                                 
      IF(IV(LV+1).EQ.3) GOTO 100;                                               
      IERR = 7;                                                                 
      IF(NTR.LE.2) GOTO 100;                                                    
"                                         BAD CHISQUARE                         
C                                         CHECK IF THERE IS ONE TRACK           
C                                         WHICH CONTRIBUTES MOST TO CHI2        
"                                                                               
      CHIMAX = 0.;                                                              
      DO 32 I=1,NTR;                                                            
         IF(CHITR(I).LT.CHIMAX) GOTO 32;                                        
         CHIMAX = CHITR(I);                                                     
         NTMAX = I;                                                             
   32 CONTINUE;                                                                 
      CHICUT = 3. / NTR;                                                        
      IF(CHICUT.GT..9) CHICUT=.9;                                               
      CHICUT = CHICUT * CHI2;                                                   
      IERR = 0;                                                                 
      IF(CHIMAX.LT.CHICUT) GOTO 100;                                            
      J = NTIND(NTMAX);                                                         
      IT(J+1) = 1;                                                              
      NREJ = NREJ + 1;                                                          
      IF ((T(J+5)**2+T(J+6)**2).LT.RTANK**2) NREJV = NREJV + 1;                 
""                                                                              
      GOTO 1;                                                                   
"                                                                               
C                                           1-PRONG OR COLLINEAR 2-PRONG        
"                                                                               
   50 CONTINUE;                                                                 
      IV(LV+1) = 2;                                                             
      J = NTIND(1);                                                             
      CALL VTXPNT(J,XB,YB,XT1,YT1,ZT1,DXT21,DYT21,DZT21,PHIT,DPHIT,ST);         
      IT(J+1) = 3;                                                              
      IF(NTR.EQ.2) GOTO 52;                                                     
      V(LV+2) = XT1;                                                            
      V(LV+3) = YT1;                                                            
      V(LV+4) = ZT1;                                                            
      V(LV+5) = SQRT(DXT21);                                                    
      V(LV+6) = SQRT(DYT21);                                                    
      V(LV+7) = SQRT(DZT21);                                                    
      IV(LV+8) = 1;                                                             
      V(LV+9) = 0.;                                                             
      IV(LV+10) = 1;                                                            
      GOTO 100;                                                                 
   52 J = NTIND(2);                                                             
      CALL VTXPNT(J,XB,YB,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT,DPHIT,ST);         
      IT(J+1) = 3;                                                              
      V(LV+2) = (XT1+XT2)/2.;                                                   
      V(LV+3) = (YT1+YT2)/2.;                                                   
      V(LV+4) = (ZT1+ZT2)/2.;                                                   
      V(LV+5) = SQRT((DXT21+DXT22)/2.);                                         
      V(LV+6) = SQRT((DYT21+DYT22)/2.);                                         
      V(LV+7) = SQRT((DZT21+DZT22)/2.);                                         
      IV(LV+8) = 2;                                                             
      V(LV+9) = 0.;                                                             
      V(LV+11) = 0.;                                                            
      V(LV+12) = 0.;                                                            
      V(LV+13) = 0.;                                                            
      IV(LV+10) = 2;                                                            
      SDXY1 = SQRT(((XT1-V(LV+2))**2/DXT21 + (YT1-V(LV+3))**2/DYT21)/2.)        
;                                                                               
      IF(SDXY1.GT.3.) IV(LV+1)=1;                                               
      SDXY2 = SQRT(((XT2-V(LV+2))**2/DXT22 + (YT2-V(LV+3))**2/DYT22)/2.)        
;                                                                               
      IF(SDXY2.GT.3.) IV(LV+1)=1;                                               
      SDZ1 = ABS(ZT1-V(LV+4))/SQRT(DZT21);                                      
      IF(SDZ1.GT.3.) IV(LV+1)=1;                                                
      SDZ2 = ABS(ZT2-V(LV+4))/SQRT(DZT22);                                      
      IF(SDZ2.GT.3.) IV(LV+1)=1;                                                
""                                                                              
  100 CONTINUE;                                                                 
      IF (.NOT.LOCSTA) GOTO 120;                                                
      IF (IERR.LE.0) GOTO 110;                                                  
      CALL VTXERR(IERR);                                                        
      GOTO 120;                                                                 
  110 CONTINUE;                                                                 
      WRITE(6,9345) LRVST,LRVCON,LAXIS,LNOZ,NTR,NTRV,NREJ,NREJV,                
                    ITER,DSMAX,NDF,CHI2;                                        
 9345 FORMAT(' START AT RV, RV-CON., AXIS-CON., NO Z : ',4L2/                   
             ' NTR,NREJ           : ',4I6/                                      
             ' ITER,DSMAX,NDF,CHI2 : ',I6,G13.4,I6,G13.4);                      
""                                                                              
  120 CONTINUE;                                                                 
      HVTXST( 1) = IERR;                                                        
      HVTXST(19) = ITER;                                                        
      IDSMAX = 30000;                                                           
      IF (DSMAX.LT.30.) IDSMAX = IFIX( DSMAX * 1000. );                         
      HVTXST(20) = IDSMAX;                                                      
      HVTXST( 2) = HVTXST(2) + 1;                                               
      HVTXST(4+IERR) = HVTXST(4+IERR) + 1;                                      
      IF (LRVST)  HVTXST(14) = HVTXST(14) + 1;                                  
      IF (LRVCON) HVTXST(15) = HVTXST(15) + 1;                                  
      IF (LAXIS)  HVTXST(16) = HVTXST(16) + 1;                                  
      IF (LNOZ)   HVTXST(17) = HVTXST(17) + 1;                                  
      IF (IERR.GT.0) RETURN;                                                    
""                                                                              
      HVTXST(18) = IFIX(PR*10000.);                                             
      IF (NTR .GT.19) NTR  = 19;                                                
      IF (NTRV.GT.19) NTRV = 19;                                                
      HVTXST(21+NTR)  = HVTXST(21+NTR)  + 1;                                    
      HVTXST(41+NTRV) = HVTXST(41+NTRV) + 1;                                    
      IF (NREJ .GT.19) NREJ  = 19;                                              
      IF (NREJV.GT.19) NREJV = 19;                                              
      HVTXST(61+NREJ)  = HVTXST(61+NREJ)  + 1;                                  
      HVTXST(81+NREJV) = HVTXST(81+NREJV) + 1;                                  
      IF (ITER.GT.20) ITER = 20;                                                
      II = 100;                                                                 
      IF (IERR.GE.0) II = 120;                                                  
      HVTXST(II+ITER)  = HVTXST(II+ITER)  + 1;                                  
""                                                                              
      RETURN;                                                                   
      END;                                                                      
%%                                                                              
***HEADER*** MEMBER  VTXAFT         SAVED BY F22KLE  ON 86/12/16  AT 10:51      
C   05/08/79 612161049  MEMBER NAME  VTXAFT   (S)           FORTRAN     00000000
      SUBROUTINE VTXAFT                                                 00000100
C*800124*DITTMANN***************************************************    00000200
C*                                                                 *    00000300
C*          F I N I S H   X Y Z   V E R T E X   F I T              *    00000400
C*                                                                 *    00000500
C*       CALCULATE TRACK PARAMETERS AT VERTEX-NEAREST POINT        *    00000600
C*       FOR DETAILS OF THE T,V-ARRAYS SEE COMMENT IN SUBR. VERTEX.*    00000700
C*                                                                 *    00000800
C*******************************************************************    00000900
C                                                                       00001000
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00001100
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001110
C                                                                       00001200
      IF(NV.EQ.0) RETURN                                                00001300
C****                                                                   00001400
C****    EXTRAPOLATE ALL TRACKS TO VERTEX                               00001500
      J = 0                                                             00001600
      DO 9 I=1,NT                                                       00001700
      IF(IT(J+1).EQ.0) GOTO 9                                           00001800
      IF(IT(J+14).EQ.0) GOTO 9                                          00001900
      LV = (IT(J+14)-1)*IVDLEN                                          00002000
      CALL VTXPNT(J,V(LV+2),V(LV+3),XT,YT,ZT,DXT2,DYT2,DZT2,PHI,DPHI,SS)00002100
      T(J+3) = PHI                                                      00002200
      T(J+5) = XT                                                       00002300
      T(J+6) = YT                                                       00002400
      T(J+7) = ZT                                                       00002500
C *** CORRECT ERROR OF PHI,THETA FOR MULT. SCATTERING                   00002600
      SSCOUL = SS - T(J+18)                                             00002700
      SSCVXC = SS - T(J+19)                                             00002800
      DPHMS2 = 0.                                                       00002900
      IF ((SSCOUL.LT.0.).AND.(T(J+18).LT.0.)) DPHMS2 = T(J+16)**2       00003000
      IF (SSCVXC.LT.0.) DPHMS2 = DPHMS2 + T(J+17)**2                    00003100
      T(J+8) = SQRT( DPHI**2 + DPHMS2 )                                 00003200
C                                                                       00003300
      SSCOUL = SS + T(J+39) - T(J+18)                                   00003400
      SSCVXC = SS + T(J+39) - T(J+19)                                   00003500
      DTHMS2 = 0.                                                       00003600
      IF(SSCOUL.LT.0.) DTHMS2 = T(J+16)**2                              00003700
      IF (SSCVXC.LT.0.) DTHMS2 = DTHMS2 + T(J+17)**2                    00003800
      T(J+9) = SQRT( T(J+9)**2 + DTHMS2 )                               00003900
C ***                                                                   00004000
      T(J+10) = SQRT(DXT2)                                              00004100
      T(J+11) = SQRT(DYT2)                                              00004200
      T(J+12) = SQRT(DZT2)                                              00004300
      T(J+15) = SS                                                      00004400
    9 J = J + ITDLEN                                                    00004500
C                                                                       00004600
  100 RETURN                                                            00004700
      END                                                               00004800
***HEADER*** MEMBER  VTXBNC         SAVED BY F22KLE  ON 86/12/16  AT 11:08      
C   05/02/80 612161106  MEMBER NAME  VTXBNC   (S)           FORTRAN     00000000
      SUBROUTINE VTXBNC(IPPATR)                                         00000100
C*800205*OLSSON*****************************************************    00000200
C*                                                                 *    00000300
C* C R E A T E  B A N K  CVTX  F R O M  V E R T E X  R E S U L T S *    00000400
C*                                                                 *    00000500
C*******************************************************************    00000600
C             IPPATR IS POINTER TO 'PATR' ;  SAME BOSBANK NR IS USED    00000700
      IMPLICIT INTEGER*2 (H)                                            00000800
%MACRO CDATA                                                            00000900
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00001000
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001100
C                                                                       00001200
      IF(NV.EQ.0) GO TO 100                                             00001300
C****                                                                   00001400
C                                                                       00001500
      NBNK = IDATA(IPPATR-2)                                            00001600
      NWRES = 3 + NV*IVDLEN + NT*15                                     00001700
      CALL CCRE(IPHT,'CVTX',NBNK,NWRES,IERR)                            00001800
      IF(IERR.NE.0) GO TO 100                                           00001900
      CALL BSAW(1,'CVTX')                                               00002000
      IDATA(IPHT+1) = NV                                                00002100
      IDATA(IPHT+2) = IVDLEN                                            00002200
      DO 1  INV = 1,NV                                                  00002300
      INVX = IPHT+2+(INV-1)*IVDLEN                                      00002400
      ISS = (INV-1)*IVDLEN                                              00002500
      DO 1  I = 1,IVDLEN                                                00002600
1     IDATA(INVX+I) = IV(ISS+I)                                         00002700
      IDATA(IPHT+3+NV*IVDLEN) = NT                                      00002800
C                                                                       00002900
      DO 2  INT = 1,NT                                                  00003000
      INTX = IPHT+3+NV*IVDLEN + (INT-1)*15                              00003100
      ISS = (INT-1)*ITDLEN                                              00003200
      DO 2  I = 1,15                                                    00003300
2     IDATA(INTX+I) = IT(ISS+I)                                         00003400
  100 RETURN                                                            00003500
      END                                                               00003600
***HEADER*** MEMBER  VTXBNK         SAVED BY F22KLE  ON 86/12/16  AT 11:10      
C   05/02/80 612161110  MEMBER NAME  VTXBNK   (S)           FORTRAN     00000000
      SUBROUTINE VTXBNK(IPPATR)                                         00000100
C*800205*OLSSON*****************************************************    00000200
C*                                                                 *    00000300
C* C R E A T E  B A N K  GVTX  F R O M  V E R T E X  R E S U L T S *    00000400
C* ( ONLY THE FIRST 10 WORDS FROM V() ARE SAVED )                  *    00000500
C*                                                                 *    00000600
C*******************************************************************    00000700
C             IPPATR IS POINTER TO 'PATR' ;  SAME BOSBANK NR IS USED    00000800
      IMPLICIT INTEGER*2 (H)                                            00000900
%MACRO CDATA                                                            00001000
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00001100
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001200
C                                                                       00001300
      IF(NV.EQ.0) GO TO 100                                             00001400
C****                                                                   00001500
C                                                                       00001600
      NBNK = IDATA(IPPATR-2)                                            00001700
      NWRES = 2 + NV*10 + NT*15                                         00001800
      CALL CCRE(IPHT,'GVTX',NBNK,NWRES,IERR)                            00001900
      IF(IERR.NE.0) GO TO 100                                           00002000
      CALL BSAW(1,'GVTX')                                               00002100
      IDATA(IPHT+1) = NV                                                00002200
      DO 1  INV = 1,NV                                                  00002300
      INVX = IPHT+1+(INV-1)*10                                          00002400
      ISS = (INV-1)*IVDLEN                                              00002500
      DO 1  I = 1,10                                                    00002600
1     IDATA(INVX+I) = IV(ISS+I)                                         00002700
      IDATA(IPHT+2+NV*10) = NT                                          00002800
C                                                                       00002900
      DO 2  INT = 1,NT                                                  00003000
      INTX = IPHT+2+NV*10 + (INT-1)*15                                  00003100
      ISS = (INT-1)*ITDLEN                                              00003200
      DO 2  I = 1,15                                                    00003300
2     IDATA(INTX+I) = IT(ISS+I)                                         00003400
  100 RETURN                                                            00003500
      END                                                               00003600
***HEADER*** MEMBER  VTXBOTH        SAVED BY F22KLE  ON 87/01/09  AT 10:18      
"   05/01/87 701091018  MEMBER NAME  VTXBOTH  (S)           MORTRA34 "          
%MACRO 'F22KLE.JVTXC.S(MORTMAC)'                                                
" PROGRAM VTXTST; "                                                             
                                                                                
REPLACE (*NPAR*) WITH (*2*)  " 2 PARAMETER XV, YV "                             
REPLACE (*N1*) WITH (*3*)    " NPAR+1 : XV, YV, CHI2 "                          
REPLACE (*N2*) WITH (*9*)    " N1*N1 "                                          
REPLACE (*NSUM*) WITH (*10*)                                                    
REPLACE (*NTR*) WITH (*3*)    " NUMBER OF TRACKS "                              
REPLACE (*MITER*) WITH (*100*) " MAX. NUMBER OF ITERATIONS "                    
                                                                                
LOGICAL*4 DOSMPL;                                                               
                                                                                
REAL*8 DATA,SUM,DVEC,RR,PHI,XX,YY,XM,YM,XS,YS;                                  
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(6),COV0(6),DVEC(3),GRAD9(3),IDIM,DET,DXY2,DZ2,D,S,IEV;              
                                                                                
DATA  NEV   / 5000 /,  " NUMBER OF EVENTS "                                     
      THETA /  10.0E-3 /,                                                       
      DOSMPL / .FALSE. / ;                                                      
                                                                                
   CALL GEPI;                                                                   
                                                                                
   CALL BINS0(90,80,'0 .01 100;');                                              
   CALL DST1(1,90,4,80,' PROB(CHI2,NDF);');                                     
   CALL DST1(2,90,4,80,' PROB(XV**2/VXX,1);');                                  
   CALL DST1(3,90,4,80,' PROB(YV**2/VYY,1);');                                  
   CALL DST1(4,90,4,80,' PROB(ZV**2/VZZ,1);');                                  
                                                                                
   IDIM = 3;                                                                    
   CALL CLRSUM;                                                                 
   XT = 0.0; YT = 0.0;                                                          
   STEP(1)= 2.0; STEP(2) = 1.0;                                                 
   AMERR(1)= 0.05; AMERR(2) = 0.05;                                             
                                                                                
   DO IEV = 1 , NEV                                                             
   <*                                                                           
      PHI0 = 1.57 - 3.14*RN(DUM);                                               
      XT = 5.0 * ( 1.0 - 2.0 * RN(DUM) );                                       
      YT = 5.0 * ( 1.0 - 2.0 * RN(DUM) );                                       
      ZT = 5.0 * ( 1.0 - 2.0 * RN(DUM) );                                       
      DO I = 1 , NTR                                                            
      <*                                                                        
         S   = -100.;                                                           
         PHI = DBLE( PHI0 + 0.3 * ( 1.0 - 2.0*RN(DUM) ) );                      
         ALM = 0.3 * ( 1.0 - 2.0*RN(DUM) );                                     
         Z0  = ZT - S * TAN( ALM );                                             
         RR  = DBLE( 99000.0*RN(DUM) + 1000.0 );                                
         IF (RN(DUM).LT.0.5) RR = -RR;                                          
         DXY = 0.1 + 0.4*RN(DUM);                                               
         CALL NVERT(DXY, 0.0, DERR);                                            
         DZ  = 20. + 20.*RN(DUM);                                               
         CALL NVERT(DZ , Z0, Z0SM);                                             
         XM        = DBLE(XT) - (RR+DBLE(DERR)) * DSIN(PHI);                    
         YM        = DBLE(YT) + (RR+DBLE(DERR)) * DCOS(PHI);                    
         DATA(I,1) = XM;                                                        
         DATA(I,2) = YM;                                                        
         DATA(I,3) = DABS(RR);                                                  
         DATA(I,4) = DBLE(DXY**2);                                              
" MULT. SCATT. "                                                                
         PHI = PHI - DBLE(S) / RR;                                              
         XS = XM + RR * DSIN( PHI );                                            
         YS = YM - RR * DCOS( PHI );                                            
         CALL NVERT(THETA, 0.0, DPHI ); PHI = PHI + DBLE( DPHI );               
         XM = XM - XS; YM = YM - YS;                                            
         TRANSBACK DATA(I,1);DATA(I,2);XM;YM;                                   
                   XS;YS;DCOS(DBLE(DPHI));DSIN(DBLE(DPHI));                     
         DATA(I,5)  = DCOS( PHI );                                              
         DATA(I,6)  = DSIN( PHI );                                              
         DATA(I,7)  = DBLE( THETA**2 );                                         
         DATA(I,8)  = DBLE( TAN( ALM + DPHI ) );                                
         DATA(I,9)  = DBLE( Z0SM );                                             
         DATA(I,10) = DBLE( DZ**2 );                                            
      *>                                                                        
      IF IEV <= 5 <* CALL GRDTST( 0.0,0.0,0.0, 0.001,0.001,1.0E-1); *>          
                                                                                
      CALL ERRTST( XT, YT, ZT, 5 );                                             
      CALL COVAR0( 0.0, 0.0, 0.0 );                                             
" SIMPLEX "                                                                     
      IF (DOSMPL)                                                               
      <*                                                                        
         CALL SIMPLX( 0.0, 0.0, IFAIL);                                         
         IF IEV <= 10                                                           
         <*                                                                     
            OUTPUT IFAIL,(AMEAN(K),K=1,3);                                      
                (' S IFAIL,XV,YV,CHI2 : ', I4, 3G13.4 );                        
            OUTPUT ERR(1),ERR(2),DET;                                           
                (' S  ERR(XV,YV),DET  :     ', 3G13.4 );                        
         *>                                                                     
                                                                                
         CALL SUMUP(1,FLOAT(IFAIL));                                            
         CALL SUMUP(2,ABS(DET));                                                
         XV = AMEAN(1); YV = AMEAN(2);                                          
         XX = DBLE(XV); YY = DBLE(YV);                                          
         DO I = 1 , 3  <* COV(I) = 0.0; *>                                      
         DO I = 1 , NTR                                                         
         <*                                                                     
            XM = DATA(I,1); YM = DATA(I,2);                                     
            RR = DSQRT( ( XX - XM )**2 + ( YY - YM )**2 );                      
            CALL CADXY2( I, XV, YV, ZV );                                       
            DXY = SQRT( DXY2 );                                                 
            DR = DXY;                                                           
            DATA(I,1) = XM + DBLE(DR) * ( XX - XM ) / RR;                       
            DATA(I,2) = YM + DBLE(DR) * ( YY - YM ) / RR;                       
            CALL SIMPLX( XV, YV, JFAIL );                                       
            DX = ( AMEAN(1) - XV ) * DXY / DR;                                  
            DY = ( AMEAN(2) - YV ) * DXY / DR;                                  
            COV(1) = COV(1) + DX*DX;                                            
            COV(2) = COV(2) + DY*DY;                                            
            COV(3) = COV(3) + DX*DY;                                            
            DATA(I,1) = XM;                                                     
            DATA(I,2) = YM;                                                     
         *>                                                                     
         IF IEV < 10                                                            
         <*                                                                     
            OUTPUT (COV0(K),K=1,3);                                             
                   (' S  COV0            :     ',3G13.4 );                      
            OUTPUT (COV(K),K=1,3);                                              
                   (' S  COV             :     ',3G13.4 );                      
         *>                                                                     
         CALL SUMUP(3, PROB( (XV-XT)**2 /  COV(1), 1 ) );                       
         CALL SUMUP(4, PROB( (YV-YT)**2 /  COV(2), 1 ) );                       
      *>                                                                        
" DAVIDON "                                                                     
      CALL DAVIDN( 0.0, 0.0, ITER);                                             
      IF IEV <= 10                                                              
      <*                                                                        
         OUTPUT ITER,(AMEAN(K),K=1,3);                                          
                (' D ITER,XV,YV,CHI2  : ', I4, 3G13.4 );                        
      *>                                                                        
                                                                                
      CALL SUMUP(7,FLOAT(ITER));                                                
      XV = AMEAN(1); YV = AMEAN(2); ZV = DET; CH2 = AMEAN(3);                   
                                                                                
      NDF = NTR*(IDIM-1) - IDIM;                                                
      CALL HIST(1,PROB(CH2,NDF));                                               
      CALL HIST(2,PROB((XV-XT)**2/COV(1),1));                                   
      CALL HIST(3,PROB((YV-YT)**2/COV(2),1));                                   
      CALL HIST(4,PROB((ZV-ZT)**2/COV(4),1));                                   
                                                                                
      IF IEV < 10                                                               
      <*                                                                        
         IF (.NOT. DOSMPL)                                                      
            OUTPUT (COV0(K),K=1,6);                                             
                   (' D  COV0            :     ',3G13.4 /                       
                    '                    :     ',3G13.4 );                      
            OUTPUT (COV(K),K=1,6);                                              
                   (' D  COV             :     ',3G13.4 /                       
                    '                    :     ',3G13.4 );                      
      *>                                                                        
      CALL SUMUP(8, PROB( (XV-XT)**2 / COV(1), 1 ) );                           
      CALL SUMUP(9, PROB( (YV-YT)**2 / COV(2), 1 ) );                           
      CALL SUMUP(10, PROB( (ZV-ZT)**2 / COV(4), 1 ) );                          
   "- CALL SUMUP(8, (XV-XT) / SQRT( COV(1) ) );                                 
      CALL SUMUP(9, (YV-YT) / SQRT( COV(2) ) );                                 
      CALL SUMUP(10, (ZV-ZT) / SQRT( COV(4) ) ); -"                             
   *>                                                                           
                                                                                
   IF DOSMPL                                                                    
   <*                                                                           
      CALL MEANX(1); OUTPUT (SUM(1,K),K=1,3); (' S ITER : ',3G13.4);            
      CALL MEANX(2); OUTPUT (SUM(2,K),K=1,3); (' S DET  : ',3G13.4);            
      CALL MEANX(3); OUTPUT (SUM(3,K),K=1,3); (' S DX   : ',3G13.4);            
      CALL MEANX(4); OUTPUT (SUM(4,K),K=1,3); (' S DY   : ',3G13.4);            
   *>                                                                           
                                                                                
   CALL MEANX(5); OUTPUT (SUM(5,K),K=1,3); ('   ERRXY: ',3G13.4);               
   CALL MEANX(6); OUTPUT (SUM(6,K),K=1,3); ('   ERRZ : ',3G13.4);               
   CALL MEANX(7); OUTPUT (SUM(7,K),K=1,3); (' D ITER : ',3G13.4);               
   CALL MEANX(8); OUTPUT (SUM(8,K),K=1,3); (' D DX   : ',3G13.4);               
   CALL MEANX(9); OUTPUT (SUM(9,K),K=1,3); (' D DY   : ',3G13.4);               
   CALL MEANX(10); OUTPUT (SUM(10,K),K=1,3); (' D DZ   : ',3G13.4);             
                                                                                
   CALL GEPW;                                                                   
                                                                                
   STOP;                                                                        
   END;                                                                         
                                                                                
SUBROUTINE CLRSUM;                                                              
                                                                                
REAL*8 DATA,SUM;                                                                
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3);                                       
                                                                                
      DO I = 1 , NSUM  <* DO J = 1 , 3  <* SUM(I,J) = 0.0; *> *>                
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE SUMUP( I, X );                                                       
                                                                                
REAL*8 DATA,SUM;                                                                
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3);                                       
                                                                                
      IF I <= NSUM                                                              
      <*                                                                        
         SUM(I,1) = SUM(I,1) + 1.0;                                             
         SUM(I,2) = SUM(I,2) + DBLE(X);                                         
         SUM(I,3) = SUM(I,3) + DBLE(X)**2;                                      
      *>                                                                        
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE MEANX( I );                                                          
                                                                                
REAL*8 DATA,SUM;                                                                
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3);                                       
                                                                                
      IF SUM(I,1) > 1.5D0                                                       
      <*                                                                        
         IF (SUM(I,3) * SUM(I,1)) .GT. (SUM(I,2)**2)                            
         <*                                                                     
            SUM(I,2) = SUM(I,2) / SUM(I,1);                                     
            SUM(I,3) = DSQRT( ( SUM(I,3) / SUM(I,1) - SUM(I,2)**2 )             
                              * SUM(I,1) / ( SUM(I,1) - 1.0 ) );                
         *>                                                                     
         ELSE <* OUTPUT I; (' DET < 0 DO INDEX ', I3 ); *>                      
      *>                                                                        
      RETURN;                                                                   
      END;                                                                      
                                                                                
FUNCTION CHI2( X ,Y, Z );                                                       
                                                                                
REAL*8 DATA,SUM,DVEC,R,DR,DIST;                                                 
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(6),COV0(6),DVEC(3),GRAD9(3),IDIM;                                   
                                                                                
      FZ = 0.0;                                                                 
      IF (IDIM.EQ.3) FZ = 1.0;                                                  
                                                                                
      CSUM = 0.0;                                                               
      GRAD9(1) = 0.0; GRAD9(2) = 0.0; GRAD9(3) = 0.0;                           
      DO I = 1 , NTR                                                            
      <*                                                                        
         DVEC(1) = DBLE(X) - DATA(I,1);                                         
         DVEC(2) = DBLE(Y) - DATA(I,2);                                         
         DIST = DSQRT( DVEC(1)**2 + DVEC(2)**2 );                               
         R = DATA(I,3); DR = DIST - R;                                          
                                                                                
" APPROX. PROJ. EXTRAPOLATION LENGTH "                                          
         S     = SNGL( ( DATA(I,5) * DVEC(1) + DATA(I,6) * DVEC(2) )            
               * R / DIST );                                                    
         SPERP = SNGL( ( DATA(I,5) * DVEC(2) - DATA(I,6) * DVEC(1) )            
               * R / DIST );                                                    
                                                                                
" EXTRAPOLATION ERROR SQUARED DXY2(S) "                                         
         DXY2 = DATA(I,4) + S*S * DATA(I,7);                                    
                                                                                
" DERIVATION  D(DXY2)/DS "                                                      
         DXY2DS = 2.0 * S * DATA(I,7);                                          
                                                                                
" DISTANCE IN Z "                                                               
         DVEC(3) = DBLE(Z) - ( DATA(I,9) + S * DATA(I,8) );                     
                                                                                
" EXTRAPOLATION ERROR SQUARED DZ2(S) "                                          
         DZ2 = DATA(I,10) + S*S * DATA(I,7);                                    
                                                                                
" DERIVATION  D(DZ2)/DS "                                                       
         DZ2DS = 2.0 * S * DATA(I,7);                                           
                                                                                
         F1 = SNGL( DR / DIST ) / DXY2;                                         
         F2 = F1*F1 * SPERP * DXY2DS;                                           
         F3 = FZ * SNGL( DVEC(3) ) / DZ2;                                       
         F4 = F3 * SPERP / SNGL( DIST**2 );                                     
                                                                                
         CSUM = CSUM + SNGL( DR*DR ) / DXY2 + F3*F3*DZ2;                        
         DO J = 1 , 2                                                           
         <*                                                                     
            F2 = -F2; F4 = -F4;                                                 
            GRAD9(J) = GRAD9(J) + F1 *SNGL( 2.0D0 * DVEC(J) ) +                 
               ( F2 + F4 * ( F3*DZ2DS + 2.0*SNGL(DATA(I,8)) ) ) *               
               SNGL( DVEC(3-J) );                                               
         *>                                                                     
         GRAD9(3) = GRAD9(3) + 2.0 * F3;                                        
      *>                                                                        
      CHI2 = CSUM;                                                              
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE GRDTST( X, Y, Z, DX, DY, DZ );                                       
                                                                                
REAL*8 DATA,SUM,DVEC;                                                           
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(6),COV0(6),DVEC(3),GRAD9(3);                                        
                                                                                
      CX = CHI2( X+DX, Y, Z );                                                  
      CY = CHI2( X, Y+DY, Z );                                                  
      CZ = CHI2( X, Y, Z+DZ );                                                  
      C  = CHI2( X, Y, Z );                                                     
      GX = ( CX - C ) / DX;                                                     
      GY = ( CY - C ) / DY;                                                     
      GZ = ( CZ - C ) / DZ;                                                     
      OUTPUT GX,GY,GZ, GRAD9(1), GRAD9(2), GRAD9(3);                            
            (' GX,GY,GZ, GRAD : ', 6G13.4 );                                    
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE CADXY2( I, X,Y,Z );                                                  
                                                                                
REAL*8 DATA,SUM,DVEC,R,DR,DIST;                                                 
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(6),COV0(6),DVEC(3),GRAD9(3),IDIM,DET,DXY2,DZ2,D,S,IEV;              
                                                                                
      DVEC(1) = DBLE(X) - DATA(I,1);                                            
      DVEC(2) = DBLE(Y) - DATA(I,2);                                            
      D = DSQRT( DVEC(1)**2 + DVEC(2)**2 );                                     
      S = SNGL ( ( DATA(I,5) * DVEC(1) + DATA(I,6) * DVEC(2) ) *                
                   DATA(I,3) / D );                                             
      DXY2 = DATA(I,4) + S*S * DATA(I,7);                                       
                                                                                
      DVEC(3) = DBLE(Z) - ( DATA(I,9) + S * DATA(I,8) );                        
      DZ2 = DATA(I,10) + S*S * DATA(I,7);                                       
                                                                                
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE COVAR0( X,Y,Z );                                                     
                                                                                
REAL*8 DATA,SUM,DVEC,R,DR,DIST;                                                 
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(6),COV0(6),DVEC(3),GRAD9(3),IDIM,DET,DXY2,DZ2,D,S,IEV;              
                                                                                
   DIMENSION ASUM(4);                                                           
                                                                                
      DO I = 1 , 4 <* ASUM(I) = 0.0; *>                                         
      DO I = 1 , NTR                                                            
      <*                                                                        
         CALL CADXY2( I, X, Y, Z );                                             
                                                                                
         SN = -SNGL( DVEC(1) / D); CS = SNGL( DVEC(2) / D);                     
         ASUM(1) = ASUM(1) + SN*SN / DXY2;                                      
         ASUM(2) = ASUM(2) + CS*CS / DXY2;                                      
         ASUM(3) = ASUM(3) + SN*CS / DXY2;                                      
         ASUM(4) = ASUM(4) +  1.0  / DZ2;                                       
      *>                                                                        
      DET = ASUM(1) * ASUM(2) - ASUM(3)**2;                                     
      X = ABS(DET/(ASUM(1)*ASUM(3)));                                           
      IF (IEV.LE.10) OUTPUT X; (' COLLINEARITY : ',G13.4);                      
      IF X.LT.1.E-5                                                             
      <*                                                                        
         COV0(1) = 1.0; COV0(2) = 1.0; COV0(3) = 0.0;                           
      *> ELSE                                                                   
      <*                                                                        
         COV0(1) = ASUM(2) / DET;                                               
         COV0(2) = ASUM(1) / DET;                                               
         COV0(3) = ASUM(3) / DET;                                               
      *>                                                                        
      COV0(4) =   1.0   / ASUM(4);                                              
      COV0(5) = 0.0;                                                            
      COV0(6) = 0.0;                                                            
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE ERRTST( X,Y,Z ,IDX );                                                
                                                                                
REAL*8 DATA,SUM,DVEC;                                                           
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(6),COV0(6),DVEC(3),GRAD9(3),IDIM,DET,DXY2,DZ2,D,S,IEV;              
                                                                                
      DO I = 1 , NTR                                                            
      <*                                                                        
         CALL CADXY2( I, X, Y, Z );                                             
                                                                                
         CALL SUMUP( IDX  , PROB( ( D - DATA(I,3) )**2 / DXY2, 1 ) );           
         CALL SUMUP( IDX+1, PROB(   DVEC(3)**2 / DZ2, 1 ) );                    
                                                                                
      *>                                                                        
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE DAVIDN( X0, Y0, ITER );                                              
                                                                                
LOGICAL DONE;                                                                   
                                                                                
REAL*8 DATA,SUM,DVEC,RR,PHI,XX,YY,XM,YM,XS,YS;                                  
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(6),COV0(6),DVEC(3),GRAD9(3),IDIM,DET,DXY2,DZ2,D,S,IEV;              
                                                                                
   DATA                                                                         
         ALFA  / 1.0E-3/,                                                       
         BETA  / 10.0/,                                                         
         AH    /  1.0E-3/,                                                      
         AL    / -1.0E-3/,                                                      
         BH    / -0.9091/,                                                      
         BL    / -1.1111/,                                                      
         EPS   / 1.0E-6/;                                                       
                                                                                
   REAL*4 LAM;                                                                  
   DIMENSION  XVEC(3), XVEC9(3), GRAD(3), R(3), V(3,3);                         
                                                                                
      ITER = 0; DONE = .FALSE.;                                                 
      XVEC(1) = X0; XVEC(2) = Y0; XVEC(3) = 0.0;                                
      F = CHI2( X0, Y0, Z0 );                                                   
      GRAD(1) = GRAD9(1); GRAD(2) = GRAD9(2); GRAD(3) = GRAD9(3);               
                                                                                
   "- V(1,1) = 1.0; V(2,2) = 1.0; V(1,2) = 0.0; V(2,1) = 0.0;                   
      V(3,3) = 1.0; V(1,3) = 0.0; V(2,3) = 0.0;                                 
                    V(3,1) = 0.0; V(3,2) = 0.0; -"                              
      V(1,1) = COV0(1); V(2,2) = COV0(2); V(3,3) = COV0(4);                     
      V(1,2) = COV0(3); V(2,1) = COV0(3);                                       
      V(1,3) = COV0(5); V(3,1) = COV0(5);                                       
      V(2,3) = COV0(6); V(3,2) = COV0(6);                                       
                                                                                
      UNTIL ( ITER .GE. MITER ) .OR. DONE                                       
      <*                                                                        
         ITER = ITER + 1;                                                       
" X* = X - 0.5 V G "                                                            
         DO I = 1 , IDIM                                                        
         <*                                                                     
            XVEC9(I) = XVEC(I);                                                 
            DO J = 1 , IDIM                                                     
                <* XVEC9(I) = XVEC9(I) - 0.5 * V(I,J) * GRAD(J); *>             
         *>                                                                     
         F9 = CHI2( XVEC9(1), XVEC9(2), XVEC9(3) );                             
" R =  V G* "                                                                   
         DO I = 1 , IDIM                                                        
         <*                                                                     
            R(I) = 0.0;                                                         
            DO J = 1 , IDIM <* R(I) = R(I) + V(I,J) * GRAD9(J); *>              
         *>                                                                     
" RHO = G* R "                                                                  
         RHO = 0.0;                                                             
         DO J = 1 , IDIM <* RHO = RHO + GRAD9(J) * R(J); *>                     
                                                                                
       "-OUTPUT (' F, RHO : ',F,RHO); -"                                        
                                                                                
         DONE = RHO .LT. EPS;                                                   
         IF RHO .NE. 0.0                                                        
         <*                                                                     
" GAM = -G R / RHO "                                                            
            GAM = 0.0;                                                          
            DO J = 1 , IDIM <* GAM = GAM - GRAD(J) * R(J); *>                   
            GAM = GAM / RHO;                                                    
" DEFINE LAM "                                                                  
            IF ( AL <= GAM ) .AND. ( GAM < AH )  <* LAM = ALFA; *>              
            ELSEIF ( BH <= GAM ) .AND. ( GAM < AL )                             
                <* LAM = -GAM / ( GAM + 1.0 ); *>                               
            ELSEIF ( BL <= GAM ) .AND. ( GAM < BH ) <* LAM = BETA; *>           
            ELSE <* LAM = GAM / ( GAM + 1.0 ); *>                               
" UPDATE V "                                                                    
            LAM = ( LAM - 1.0 ) / RHO;                                          
            DO I = 1 , IDIM                                                     
            <* DO J = 1 , IDIM                                                  
               <* V(I,J) = V(I,J) + LAM * R(I) * R(J); *>                       
            *>                                                                  
" IMPROVEMENT  ? "                                                              
            IF F9 < F                                                           
            <*                                                                  
               F = F9;                                                          
               DO J = 1 , IDIM                                                  
               <*                                                               
                  XVEC(J) = XVEC9(J);                                           
                  GRAD(J) = GRAD9(J);                                           
               *>                                                               
            *>                                                                  
         *>                                                                     
      *>                                                                        
      COV(1) = V(1,1); COV(2) = V(2,2); COV(3) = V(1,2);                        
      COV(4) = V(3,3); COV(5) = V(1,3); COV(6) = V(2,3);                        
      AMEAN(1) = XVEC(1); AMEAN(2) = XVEC(2); AMEAN(3) = F;                     
      DET = XVEC(3);                                                            
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE SIMPLX( X0, Y0, IFAIL );                                             
                                                                                
LOGICAL DONE;                                                                   
INTEGER H,HIGH;                                                                 
                                                                                
REAL*8 DATA,SUM,DVEC,RR,PHI,XX,YY,XM,YM,XS,YS;                                  
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(6),COV0(6),DVEC(3),GRAD9(3),IDIM,DET,DXY2,DZ2,D,S,IEV;              
                                                                                
   DATA ROOT2 / 1.4159 /,                                                       
" TRANSFORMATION COEFFICIENTS "                                                 
         ALFA  / 1.0 /,                                                         
         BETA  / 0.5 /,                                                         
         GAMMA / 2.0 /,                                                         
         DELTA / 0.5 /;                                                         
                                                                                
   DIMENSION P(10),QZ(10),ANEXT(10),CENTER(10),                                 
       IND(11),L(11),H(11);                                                     
                                                                                
      DO I = 1 , N1 <* IND(I) = (I-1)*N1; *>                                    
                                                                                
      SN = FLOAT(N1); SN = SQRT(SN);                                            
      RM = FLOAT(NPAR);                                                         
      DO I = 1 , NPAR                                                           
      <*                                                                        
         P(I)  = STEP(I) * (SN + RM - 1.0) / (RM*ROOT2);                        
         QZ(I) = STEP(I) * (SN      - 1.0) / (RM*ROOT2);                        
      *>                                                                        
" BUILD FULL START SIMPLEX "                                                    
      SIMP(1) = X0; SIMP(2) = Y0;                                               
      DO I = 2 , N1                                                             
      <*                                                                        
         II = IND(I);                                                           
         DO J = 1 , NPAR <* SIMP(II+J) = SIMP(J) + QZ(J); *>                    
         SIMP(II+I-1) = SIMP(I-1) + P(I-1);                                     
      *>                                                                        
" CALC INITIAL CHI2'S "                                                         
      DO I = 1 , N1                                                             
      <*                                                                        
         II = IND(I); L(I) = 0; H(I) = 0;                                       
         SIMP(II+N1) = CHI2( SIMP(II+1), SIMP(II+2) );                          
      *>                                                                        
" ORDER SIMPLEX "                                                               
      DO J = 1 , N1                                                             
      <*                                                                        
         DO I = 1 , N1                                                          
         <*                                                                     
            II = IND(I);                                                        
            IF SIMP(II+J) < SIMP( L(J) + J ) <* L(J) = II; *>                   
            ELSEIF SIMP(II+J) > SIMP( H(J) + J ) <* H(J) = II; *>               
         *>                                                                     
      *>                                                                        
" MAIN ITERATION LOOP "                                                         
      ITER = 0;                                                                 
      LOOP                                                                      
      <*                                                                        
         ITER = ITER + 1; HIGH = H(N1); LOW = L(N1);                            
" CALC CENTER WITHOUT WORST "                                                   
         DO I = 1 , NPAR <* CENTER(I) = 0.0; *>                                 
         DO I = 1 , N1                                                          
         <*                                                                     
            II = IND(I);                                                        
            IF II .NE. HIGH                                                     
            <* DO J = 1 , NPAR                                                  
               <* CENTER(J) = CENTER(J) + SIMP(II+J); *>                        
            *>                                                                  
         *>                                                                     
" CALC REFLECTION OF WORST "                                                    
         DO I = 1 , NPAR                                                        
         <*                                                                     
            CENTER(I) = CENTER(I) / RM;                                         
            ANEXT(I) = CENTER(I) + ALFA * ( CENTER(I) - SIMP(HIGH+I) );         
         *>                                                                     
         ANEXT(N1) = CHI2( ANEXT(1), ANEXT(2) );                                
         IF ANEXT(N1) < SIMP(LOW+N1)                                            
" REFLECTED VERTEX BETTER THAN BEST, CALC EXPANDED VERTEX "                     
         <*                                                                     
            DO I = 1 , N1 <* SIMP(HIGH+I) = ANEXT(I); *> IOP = 1;               
            DO I = 1 , NPAR                                                     
            <* ANEXT(I) = CENTER(I) + GAMMA *                                   
                        ( SIMP(HIGH+I) - CENTER(I) ); *>                        
            ANEXT(N1) = CHI2( ANEXT(1), ANEXT(2) );                             
            IF ANEXT(N1) < SIMP(LOW+N1)                                         
" EXPANDED VERTEX BETTER THAN BEST "                                            
            <*                                                                  
               DO I = 1 , N1 <* SIMP(HIGH+I) = ANEXT(I); *> IOP = 2;            
            *>                                                                  
         *>                                                                     
         ELSEIF ANEXT(N1) < SIMP(HIGH+N1)                                       
         <*                                                                     
            DO I = 1 , N1 <* SIMP(HIGH+I) = ANEXT(I); *> IOP = 3                
         *>                                                                     
         ELSE                                                                   
" REFLECTED VERTEX NOT BETTER THAN WORST, CALC RESTRICTED VERTEX "              
         <*                                                                     
            DO I = 1 , NPAR                                                     
            <* ANEXT(I) = CENTER(I) + BETA *                                    
                        ( SIMP(HIGH+I) - CENTER(I) ); *>                        
            ANEXT(N1) = CHI2( ANEXT(1), ANEXT(2) );                             
            IF ANEXT(N1) < SIMP(HIGH+N1)                                        
" RESTRICTED VERTEX BETTER THAN WORST "                                         
            <*                                                                  
               DO I = 1 , N1 <* SIMP(HIGH+I) = ANEXT(I); *> IOP = 4;            
            *>                                                                  
            ELSE                                                                
" NOTHING WORKS, SHRINK VERTEX TOWARDS BEST "                                   
            <*                                                                  
               DO I = 1 , N1                                                    
               <*                                                               
                  II = IND(I);                                                  
                  DO J = 1 , NPAR                                               
                  <* SIMP(II+J) = DELTA * SIMP(LOW+J) + (1.0-DELTA)             
                                * SIMP(II+J); *>                                
               *>                                                               
                  SIMP(II+N1) = CHI2( SIMP(II+1), SIMP(II+2) ); IOP = 5;        
            *>                                                                  
         *>                                                                     
" ORDER SIMPLEX "                                                               
         DO J = 1 , N1                                                          
         <* DO I = 1 , N1                                                       
            <*                                                                  
               II = IND(I);                                                     
               IF SIMP(II+J) < SIMP( L(J) + J ) <* L(J) = II; *>                
               ELSEIF SIMP(II+J) > SIMP( H(J) + J ) <*  H(J) = II; *>           
            *>                                                                  
         *>                                                                     
" CONVERGENCE ? "                                                               
         DONE = .TRUE.;                                                         
         DO I = 1 , NPAR                                                        
         <*                                                                     
            ERR(I) = ABS( SIMP( H(N1) + I ) - SIMP( L(N1) + I ) );              
            DONE = DONE .AND. ( ERR(I) .LT. AMERR(I) );                         
         *>                                                                     
         ERR(N1) = ABS( SIMP( H(N1) + N1 ) - SIMP( L(N1) + N1 ) );              
                                                                                
      "- WRITE(IOP:2);  -"                                                      
                                                                                
      *>                                                                        
      UNTIL DONE .OR. ( ITER .GE. MITER );                                      
" CALC CENTER OF SIMPLEX "                                                      
      RN = FLOAT(N1);                                                           
      DO I = 1 , N1                                                             
      <*                                                                        
         AMEAN(I) = 0.0;                                                        
         DO J = 1 , N1 <* AMEAN(I) = AMEAN(I) + SIMP( IND(J) + I ); *>          
         AMEAN(I) = AMEAN(I) / RN;                                              
      *>                                                                        
                                                                                
   "- OUTPUT (' DET = ',DET); -"                                                
      DET = ( SIMP(IND(2)+1) - SIMP(1) ) * ( SIMP(IND(3)+2) - SIMP(2) )         
          - ( SIMP(IND(3)+1) - SIMP(1) ) * ( SIMP(IND(2)+2) - SIMP(2) );        
                                                                                
      IFAIL = ITER;                                                             
                                                                                
   RETURN;                                                                      
   END;                                                                         
                                                                                
%%                                                                              
***HEADER*** MEMBER  VTXBOTH0       SAVED BY F22KLE  ON 87/01/05  AT 16:41      
"   05/01/87 701051641  MEMBER NAME  VTXBOTH0 (S)           MORTRA34 "          
%MACRO 'F22KLE.JVTXC.S(MORTMAC)'                                                
" PROGRAM VTXTST; "                                                             
                                                                                
REPLACE (*NPAR*) WITH (*2*)  " 2 PARAMETER XV, YV "                             
REPLACE (*N1*) WITH (*3*)    " NPAR+1 : XV, YV, CHI2 "                          
REPLACE (*N2*) WITH (*9*)    " N1*N1 "                                          
REPLACE (*NSUM*) WITH (*8*)                                                     
REPLACE (*NTR*) WITH (*4*)    " NUMBER OF TRACKS "                              
REPLACE (*MITER*) WITH (*100*) " MAX. NUMBER OF ITERATIONS "                    
                                                                                
LOGICAL*4 DOSMPL;                                                               
                                                                                
REAL*8 DATA,SUM,DVEC,RR,PHI,XX,YY,XM,YM,XS,YS;                                  
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(3),COV0(3),DVEC(2),GRAD9(2),DET,DXY2,D,S,IEV;                       
                                                                                
DATA  NEV   / 5000 /,  " NUMBER OF EVENTS "                                     
      THETA /  10.0E-3 /,                                                       
      DOSMPL / .FALSE. / ;                                                      
                                                                                
                                                                                
   CALL CLRSUM;                                                                 
   XT = 0.0; YT = 0.0;                                                          
   STEP(1)= 2.0; STEP(2) = 1.0;                                                 
   AMERR(1)= 0.05; AMERR(2) = 0.05;                                             
                                                                                
   DO IEV = 1 , NEV                                                             
   <*                                                                           
      PHI0 = 1.57 - 3.14*RN(DUM);                                               
      XT = 5.0 * ( 1.0 - 2.0 * RN(DUM) );                                       
      YT = 5.0 * ( 1.0 - 2.0 * RN(DUM) );                                       
      ZT = 5.0 * ( 1.0 - 2.0 * RN(DUM) );                                       
      DO I = 1 , NTR                                                            
      <*                                                                        
         SS  = -100.                                                            
         PHI = DBLE( PHI0 + 0.3 * ( 1.0 - 2.0*RN(DUM) ) );                      
         ALM = 0.3 * ( 1.0 - 2.0*RN(DUM) );                                     
         Z0  = ZT - SS * TAN( ALM );                                            
         RR  = DBLE( 99000.0*RN(DUM) + 1000.0 );                                
         IF (RN(DUM).LT.0.5) RR = -RR;                                          
         DXY = 0.1 + 0.4*RN(DUM);                                               
         CALL NVERT(DXY, 0.0, DERR);                                            
         DZ  = 20. + 20.*RN(DUM);                                               
         CALL NVERT(DZ , Z0, Z0SM);                                             
         XM        = DBLE(XT) - (RR+DBLE(DERR)) * DSIN(PHI);                    
         YM        = DBLE(YT) + (RR+DBLE(DERR)) * DCOS(PHI);                    
         DATA(I,1) = XM;                                                        
         DATA(I,2) = YM;                                                        
         DATA(I,3) = DABS(RR);                                                  
         DATA(I,4) = DBLE(DXY**2);                                              
" MULT. SCATT. "                                                                
         PHI = PHI + 100.0D0 / RR;                                              
         XS = XM + RR * DSIN( PHI );                                            
         YS = YM - RR * DCOS( PHI );                                            
         CALL NVERT(THETA, 0.0, DPHI ); PHI = PHI + DBLE( DPHI );               
         XM = XM - XS; YM = YM - YS;                                            
         TRANSBACK DATA(I,1);DATA(I,2);XM;YM;                                   
                   XS;YS;DCOS(DBLE(DPHI));DSIN(DBLE(DPHI));                     
         DATA(I,5)  = DCOS( PHI );                                              
         DATA(I,6)  = DSIN( PHI );                                              
         DATA(I,7)  = DBLE( THETA**2 );                                         
         DATA(I,8)  = DBLE( TAN( ALM + DPHI ) );                                
         DATA(I,9)  = DBLE( Z0SM );                                             
         DATA(I,10) = DBLE( DZ**2 );                                            
      *>                                                                        
   "- IF IEV <= 1 <* GRDTST( 0.0, 0.0, 0.001, 0.001 ); *> -"                    
                                                                                
      CALL ERRTST( XT, YT, 5 );                                                 
      CALL COVAR0( 0.0, 0.0 );                                                  
" SIMPLEX "                                                                     
      IF (DOSMPL)                                                               
      <*                                                                        
         CALL SIMPLX( 0.0, 0.0, IFAIL);                                         
         IF IEV <= 10                                                           
         <*                                                                     
            OUTPUT IFAIL,(AMEAN(K),K=1,3);                                      
                (' S IFAIL,XV,YV,CHI2 : ', I4, 3G13.4 );                        
            OUTPUT ERR(1),ERR(2),DET;                                           
                (' S  ERR(XV,YV),DET  :     ', 3G13.4 );                        
         *>                                                                     
                                                                                
         CALL SUMUP(1,FLOAT(IFAIL));                                            
         CALL SUMUP(2,ABS(DET));                                                
         XV = AMEAN(1); YV = AMEAN(2);                                          
         XX = DBLE(XV); YY = DBLE(YV);                                          
         DO I = 1 , 3  <* COV(I) = 0.0; *>                                      
         DO I = 1 , NTR                                                         
         <*                                                                     
            XM = DATA(I,1); YM = DATA(I,2);                                     
            RR = DSQRT( ( XX - XM )**2 + ( YY - YM )**2 );                      
            CALL CADXY2( I, XV, YV );                                           
            DXY = SQRT( DXY2 );                                                 
            DR = DXY;                                                           
            DATA(I,1) = XM + DBLE(DR) * ( XX - XM ) / RR;                       
            DATA(I,2) = YM + DBLE(DR) * ( YY - YM ) / RR;                       
            CALL SIMPLX( XV, YV, JFAIL );                                       
            DX = ( AMEAN(1) - XV ) * DXY / DR;                                  
            DY = ( AMEAN(2) - YV ) * DXY / DR;                                  
            COV(1) = COV(1) + DX*DX;                                            
            COV(2) = COV(2) + DY*DY;                                            
            COV(3) = COV(3) + DX*DY;                                            
            DATA(I,1) = XM;                                                     
            DATA(I,2) = YM;                                                     
         *>                                                                     
         IF IEV < 10                                                            
         <*                                                                     
            OUTPUT (COV0(K),K=1,3);                                             
                   (' S  COV0            :     ',3G13.4 );                      
            OUTPUT (COV(K),K=1,3);                                              
                   (' S  COV             :     ',3G13.4 );                      
         *>                                                                     
         CALL SUMUP(3, PROB( (XV-XT)**2 /  COV(1), 1 ) );                       
         CALL SUMUP(4, PROB( (YV-YT)**2 /  COV(2), 1 ) );                       
      *>                                                                        
" DAVIDON "                                                                     
      CALL DAVIDN( 0.0, 0.0, ITER);                                             
      IF IEV <= 10                                                              
      <*                                                                        
         OUTPUT ITER,(AMEAN(K),K=1,3);                                          
                (' D ITER,XV,YV,CHI2  : ', I4, 3G13.4 );                        
      *>                                                                        
                                                                                
      CALL SUMUP(6,FLOAT(ITER));                                                
      XV = AMEAN(1); YV = AMEAN(2);                                             
      IF IEV < 10                                                               
      <*                                                                        
         IF (.NOT. DOSMPL)                                                      
            OUTPUT (COV0(K),K=1,3);                                             
                   (' D  COV0            :     ',3G13.4 );                      
         OUTPUT (COV(K),K=1,3);  (' D  COV             :     ',3G13.4 );        
      *>                                                                        
      CALL SUMUP(7, PROB( (XV-XT)**2 / COV(1), 1 ) );                           
      CALL SUMUP(8, PROB( (YV-YT)**2 / COV(2), 1 ) );                           
   *>                                                                           
                                                                                
   IF DOSMPL                                                                    
   <*                                                                           
      CALL MEANX(1); OUTPUT (SUM(1,K),K=1,3); (' S ITER : ',3G13.4);            
      CALL MEANX(2); OUTPUT (SUM(2,K),K=1,3); (' S DET  : ',3G13.4);            
      CALL MEANX(3); OUTPUT (SUM(3,K),K=1,3); (' S DX   : ',3G13.4);            
      CALL MEANX(4); OUTPUT (SUM(4,K),K=1,3); (' S DY   : ',3G13.4);            
   *>                                                                           
                                                                                
   CALL MEANX(5); OUTPUT (SUM(5,K),K=1,3); ('   ERR  : ',3G13.4);               
   CALL MEANX(6); OUTPUT (SUM(6,K),K=1,3); (' D ITER : ',3G13.4);               
   CALL MEANX(7); OUTPUT (SUM(7,K),K=1,3); (' D DX   : ',3G13.4);               
   CALL MEANX(8); OUTPUT (SUM(8,K),K=1,3); (' D DY   : ',3G13.4);               
                                                                                
   STOP;                                                                        
   END;                                                                         
                                                                                
SUBROUTINE CLRSUM;                                                              
                                                                                
REAL*8 DATA,SUM;                                                                
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3);                                       
                                                                                
      DO I = 1 , NSUM  <* DO J = 1 , 3  <* SUM(I,J) = 0.0; *> *>                
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE SUMUP( I, X );                                                       
                                                                                
REAL*8 DATA,SUM;                                                                
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3);                                       
                                                                                
      IF I <= NSUM                                                              
      <*                                                                        
         SUM(I,1) = SUM(I,1) + 1.0;                                             
         SUM(I,2) = SUM(I,2) + DBLE(X);                                         
         SUM(I,3) = SUM(I,3) + DBLE(X)**2;                                      
      *>                                                                        
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE MEANX( I );                                                          
                                                                                
REAL*8 DATA,SUM;                                                                
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3);                                       
                                                                                
      IF SUM(I,1) > 1.5D0                                                       
      <*                                                                        
         IF (SUM(I,3) * SUM(I,1)) .GT. (SUM(I,2)**2)                            
         <*                                                                     
            SUM(I,2) = SUM(I,2) / SUM(I,1);                                     
            SUM(I,3) = DSQRT( ( SUM(I,3) / SUM(I,1) - SUM(I,2)**2 )             
                              * SUM(I,1) / ( SUM(I,1) - 1.0 ) );                
         *>                                                                     
         ELSE <* OUTPUT I; (' DET < 0 DO INDEX ', I3 ); *>                      
      *>                                                                        
      RETURN;                                                                   
      END;                                                                      
                                                                                
FUNCTION CHI2( X ,Y );                                                          
                                                                                
REAL*8 DATA,SUM,DVEC,R,DR,DIST;                                                 
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(3),COV0(3),DVEC(2),GRAD9(2);                                        
                                                                                
      CSUM = 0.0;                                                               
      GRAD9(1) = 0.0; GRAD9(2) = 0.0;                                           
      DO I = 1 , NTR                                                            
      <*                                                                        
         DVEC(1) = DBLE(X) - DATA(I,1);                                         
         DVEC(2) = DBLE(Y) - DATA(I,2);                                         
         DIST = DSQRT( DVEC(1)**2 + DVEC(2)**2 );                               
         R = DATA(I,3); DR = DIST - R;                                          
                                                                                
" APPROX. PROJ. EXTRAPOLATION LENGTH "                                          
         S     = SNGL( ( DATA(I,5) * DVEC(1) + DATA(I,6) * DVEC(2) )            
               * R / DIST );                                                    
         SPERP = SNGL( ( DATA(I,5) * DVEC(2) - DATA(I,6) * DVEC(1) )            
               * R / DIST );                                                    
                                                                                
" EXTRAPOLATION ERROR SQUARED DXY2(S) "                                         
         DXY2 = DATA(I,4) + S*S * DATA(I,7);                                    
                                                                                
" DERIVATION  D(DXY2)/DS "                                                      
         DXY2DS = 2.0 * S * DATA(I,7);                                          
                                                                                
         F1 = SNGL( DR / DIST ) / DXY2;                                         
         F2 = F1 * SPERP * DXY2DS;                                              
                                                                                
         CSUM = CSUM + SNGL( DR*DR ) / DXY2;                                    
         DO J = 1 , 2                                                           
         <*                                                                     
            F2 = -F2;                                                           
            GRAD9(J) = GRAD9(J) + F1 *                                          
                       SNGL( 2.0D0 * DVEC(J) + DBLE(F2) * DVEC(3-J) );          
         *>                                                                     
      *>                                                                        
      CHI2 = CSUM;                                                              
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE GRDTST( X, Y, DX, DY );                                              
                                                                                
REAL*8 DATA,SUM,DVEC;                                                           
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(3),COV0(3),DVEC(2),GRAD9(2);                                        
                                                                                
      CX = CHI2( X+DX, Y );                                                     
      CY = CHI2( X, Y+DY );                                                     
      C  = CHI2( X, Y );                                                        
      GX = ( CX - C ) / DX;                                                     
      GY = ( CY - C ) / DY;                                                     
      OUTPUT GX,GY, GRAD9(1), GRAD9(2);                                         
            (' GX,GY, GRAD : ', 4G13.4 );                                       
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE CADXY2( I, X,Y );                                                    
                                                                                
REAL*8 DATA,SUM,DVEC,R,DR,DIST;                                                 
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(3),COV0(3),DVEC(2),GRAD9(2),DET,DXY2,D,S,IEV;                       
                                                                                
      DVEC(1) = DBLE(X) - DATA(I,1);                                            
      DVEC(2) = DBLE(Y) - DATA(I,2);                                            
      D = DSQRT( DVEC(1)**2 + DVEC(2)**2 );                                     
      S = SNGL ( ( DATA(I,5) * DVEC(1) + DATA(I,6) * DVEC(2) ) *                
                   DATA(I,3) / D );                                             
      DXY2 = DATA(I,4) + S*S * DATA(I,7);                                       
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE COVAR0( X,Y );                                                       
                                                                                
REAL*8 DATA,SUM,DVEC,R,DR,DIST;                                                 
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(3),COV0(3),DVEC(2),GRAD9(2),DET,DXY2,D,S,IEV;                       
                                                                                
   DIMENSION ASUM(3);                                                           
                                                                                
      DO I = 1 , 3 <* ASUM(I) = 0.0; *>                                         
      DO I = 1 , NTR                                                            
      <*                                                                        
         CALL CADXY2( I, X, Y );                                                
                                                                                
         SN = -SNGL( DVEC(1) / D); CS = SNGL( DVEC(2) / D);                     
         ASUM(1) = ASUM(1) + SN*SN / DXY2;                                      
         ASUM(2) = ASUM(2) + CS*CS / DXY2;                                      
         ASUM(3) = ASUM(3) + SN * CS   / DXY2;                                  
      *>                                                                        
      DET = ASUM(1) * ASUM(2) - ASUM(3)**2;                                     
      COV0(1) = ASUM(2) / DET;                                                  
      COV0(2) = ASUM(1) / DET;                                                  
      COV0(3) = ASUM(3) / DET;                                                  
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE ERRTST( X,Y ,IDX );                                                  
                                                                                
REAL*8 DATA,SUM,DVEC;                                                           
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(3),COV0(3),DVEC(2),GRAD9(2),DET,DXY2,D,S,IEV;                       
                                                                                
      DO I = 1 , NTR                                                            
      <*                                                                        
         CALL CADXY2( I, X, Y );                                                
                                                                                
         CALL SUMUP( IDX, PROB( ( D - DATA(I,3) )**2 / DXY2, 1 ) )              
                                                                                
      *>                                                                        
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE DAVIDN( X0, Y0, ITER );                                              
                                                                                
LOGICAL DONE;                                                                   
                                                                                
REAL*8 DATA,SUM,DVEC,RR,PHI,XX,YY,XM,YM,XS,YS;                                  
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(3),COV0(3),DVEC(2),GRAD9(2),DET,DXY2,D,S,IEV;                       
                                                                                
   DATA                                                                         
         ALFA  / 1.0E-3/,                                                       
         BETA  / 10.0/,                                                         
         AH    /  1.0E-3/,                                                      
         AL    / -1.0E-3/,                                                      
         BH    / -0.9091/,                                                      
         BL    / -1.1111/,                                                      
         EPS   / 0.01/;                                                         
                                                                                
   REAL*4 LAM;                                                                  
   DIMENSION  XVEC(2), XVEC9(2), GRAD(2), R(2), V(2,2);                         
                                                                                
      ITER = 0; DONE = .FALSE.;                                                 
      XVEC(1) = X0; XVEC(2) = Y0;                                               
      F = CHI2( X0, Y0 );                                                       
      GRAD(1) = GRAD9(1); GRAD(2) = GRAD9(2);                                   
                                                                                
   "- V(1,1) = 1.0; V(2,2) = 1.0; V(1,2) = 0.0; V(2,1) = 0.0; -"                
      V(1,1) = COV0(1); V(2,2) = COV0(2);                                       
      V(1,2) = COV0(3); V(2,1) = COV0(3);                                       
                                                                                
      UNTIL ( ITER .GE. MITER ) .OR. DONE                                       
      <*                                                                        
         ITER = ITER + 1;                                                       
" X* = X - 0.5 V G "                                                            
         DO I = 1 , 2                                                           
         <*                                                                     
            XVEC9(I) = XVEC(I);                                                 
            DO J = 1 , 2                                                        
                <* XVEC9(I) = XVEC9(I) - 0.5 * V(I,J) * GRAD(J); *>             
         *>                                                                     
         F9 = CHI2( XVEC9(1), XVEC9(2) );                                       
" R =  V G* "                                                                   
         DO I = 1 , 2                                                           
         <*                                                                     
            R(I) = 0.0;                                                         
            DO J = 1 , 2  <* R(I) = R(I) + V(I,J) * GRAD9(J); *>                
         *>                                                                     
" RHO = G* R "                                                                  
         RHO = 0.0;                                                             
         DO J = 1 , 2 <* RHO = RHO + GRAD9(J) * R(J); *>                        
                                                                                
       "-OUTPUT (' F, RHO : ',F,RHO); -"                                        
                                                                                
         DONE = RHO .LT. EPS;                                                   
         IF RHO .NE. 0.0                                                        
         <*                                                                     
" GAM = -G R / RHO "                                                            
            GAM = 0.0;                                                          
            DO J = 1 , 2  <* GAM = GAM - GRAD(J) * R(J); *>                     
            GAM = GAM / RHO;                                                    
" DEFINE LAM "                                                                  
            IF ( AL <= GAM ) .AND. ( GAM < AH )  <* LAM = ALFA; *>              
            ELSEIF ( BH <= GAM ) .AND. ( GAM < AL )                             
                <* LAM = -GAM / ( GAM + 1.0 ); *>                               
            ELSEIF ( BL <= GAM ) .AND. ( GAM < BH ) <* LAM = BETA; *>           
            ELSE <* LAM = GAM / ( GAM + 1.0 ); *>                               
" UPDATE V "                                                                    
            LAM = ( LAM - 1.0 ) / RHO;                                          
            DO I = 1 , 2                                                        
            <* DO J = 1 , 2                                                     
               <* V(I,J) = V(I,J) + LAM * R(I) * R(J); *>                       
            *>                                                                  
" IMPROVEMENT  ? "                                                              
            IF F9 < F                                                           
            <*                                                                  
               F = F9;                                                          
               DO J = 1 , 2                                                     
               <*                                                               
                  XVEC(J) = XVEC9(J);                                           
                  GRAD(J) = GRAD9(J);                                           
               *>                                                               
            *>                                                                  
         *>                                                                     
      *>                                                                        
      COV(1) = V(1,1); COV(2) = V(2,2); COV(3) = V(1,2);                        
      AMEAN(1) = XVEC(1); AMEAN(2) = XVEC(2); AMEAN(3) = F;                     
      RETURN;                                                                   
      END;                                                                      
                                                                                
SUBROUTINE SIMPLX( X0, Y0, IFAIL );                                             
                                                                                
LOGICAL DONE;                                                                   
INTEGER H,HIGH;                                                                 
                                                                                
REAL*8 DATA,SUM,DVEC,RR,PHI,XX,YY,XM,YM,XS,YS;                                  
                                                                                
COMMON / CTMP / DATA(NTR,10),SUM(NSUM,3),SIMP(N2),STEP(N1),                     
        AMERR(N1),ERR(N1),AMEAN(N1),                                            
        COV(3),COV0(3),DVEC(2),GRAD9(2),DET,DXY2,D,S,IEV;                       
                                                                                
   DATA ROOT2 / 1.4159 /,                                                       
" TRANSFORMATION COEFFICIENTS "                                                 
         ALFA  / 1.0 /,                                                         
         BETA  / 0.5 /,                                                         
         GAMMA / 2.0 /,                                                         
         DELTA / 0.5 /;                                                         
                                                                                
   DIMENSION P(10),QZ(10),ANEXT(10),CENTER(10),                                 
       IND(11),L(11),H(11);                                                     
                                                                                
      DO I = 1 , N1 <* IND(I) = (I-1)*N1; *>                                    
                                                                                
      SN = FLOAT(N1); SN = SQRT(SN);                                            
      RM = FLOAT(NPAR);                                                         
      DO I = 1 , NPAR                                                           
      <*                                                                        
         P(I)  = STEP(I) * (SN + RM - 1.0) / (RM*ROOT2);                        
         QZ(I) = STEP(I) * (SN      - 1.0) / (RM*ROOT2);                        
      *>                                                                        
" BUILD FULL START SIMPLEX "                                                    
      SIMP(1) = X0; SIMP(2) = Y0;                                               
      DO I = 2 , N1                                                             
      <*                                                                        
         II = IND(I);                                                           
         DO J = 1 , NPAR <* SIMP(II+J) = SIMP(J) + QZ(J); *>                    
         SIMP(II+I-1) = SIMP(I-1) + P(I-1);                                     
      *>                                                                        
" CALC INITIAL CHI2'S "                                                         
      DO I = 1 , N1                                                             
      <*                                                                        
         II = IND(I); L(I) = 0; H(I) = 0;                                       
         SIMP(II+N1) = CHI2( SIMP(II+1), SIMP(II+2) );                          
      *>                                                                        
" ORDER SIMPLEX "                                                               
      DO J = 1 , N1                                                             
      <*                                                                        
         DO I = 1 , N1                                                          
         <*                                                                     
            II = IND(I);                                                        
            IF SIMP(II+J) < SIMP( L(J) + J ) <* L(J) = II; *>                   
            ELSEIF SIMP(II+J) > SIMP( H(J) + J ) <* H(J) = II; *>               
         *>                                                                     
      *>                                                                        
" MAIN ITERATION LOOP "                                                         
      ITER = 0;                                                                 
      LOOP                                                                      
      <*                                                                        
         ITER = ITER + 1; HIGH = H(N1); LOW = L(N1);                            
" CALC CENTER WITHOUT WORST "                                                   
         DO I = 1 , NPAR <* CENTER(I) = 0.0; *>                                 
         DO I = 1 , N1                                                          
         <*                                                                     
            II = IND(I);                                                        
            IF II .NE. HIGH                                                     
            <* DO J = 1 , NPAR                                                  
               <* CENTER(J) = CENTER(J) + SIMP(II+J); *>                        
            *>                                                                  
         *>                                                                     
" CALC REFLECTION OF WORST "                                                    
         DO I = 1 , NPAR                                                        
         <*                                                                     
            CENTER(I) = CENTER(I) / RM;                                         
            ANEXT(I) = CENTER(I) + ALFA * ( CENTER(I) - SIMP(HIGH+I) );         
         *>                                                                     
         ANEXT(N1) = CHI2( ANEXT(1), ANEXT(2) );                                
         IF ANEXT(N1) < SIMP(LOW+N1)                                            
" REFLECTED VERTEX BETTER THAN BEST, CALC EXPANDED VERTEX "                     
         <*                                                                     
            DO I = 1 , N1 <* SIMP(HIGH+I) = ANEXT(I); *> IOP = 1;               
            DO I = 1 , NPAR                                                     
            <* ANEXT(I) = CENTER(I) + GAMMA *                                   
                        ( SIMP(HIGH+I) - CENTER(I) ); *>                        
            ANEXT(N1) = CHI2( ANEXT(1), ANEXT(2) );                             
            IF ANEXT(N1) < SIMP(LOW+N1)                                         
" EXPANDED VERTEX BETTER THAN BEST "                                            
            <*                                                                  
               DO I = 1 , N1 <* SIMP(HIGH+I) = ANEXT(I); *> IOP = 2;            
            *>                                                                  
         *>                                                                     
         ELSEIF ANEXT(N1) < SIMP(HIGH+N1)                                       
         <*                                                                     
            DO I = 1 , N1 <* SIMP(HIGH+I) = ANEXT(I); *> IOP = 3                
         *>                                                                     
         ELSE                                                                   
" REFLECTED VERTEX NOT BETTER THAN WORST, CALC RESTRICTED VERTEX "              
         <*                                                                     
            DO I = 1 , NPAR                                                     
            <* ANEXT(I) = CENTER(I) + BETA *                                    
                        ( SIMP(HIGH+I) - CENTER(I) ); *>                        
            ANEXT(N1) = CHI2( ANEXT(1), ANEXT(2) );                             
            IF ANEXT(N1) < SIMP(HIGH+N1)                                        
" RESTRICTED VERTEX BETTER THAN WORST "                                         
            <*                                                                  
               DO I = 1 , N1 <* SIMP(HIGH+I) = ANEXT(I); *> IOP = 4;            
            *>                                                                  
            ELSE                                                                
" NOTHING WORKS, SHRINK VERTEX TOWARDS BEST "                                   
            <*                                                                  
               DO I = 1 , N1                                                    
               <*                                                               
                  II = IND(I);                                                  
                  DO J = 1 , NPAR                                               
                  <* SIMP(II+J) = DELTA * SIMP(LOW+J) + (1.0-DELTA)             
                                * SIMP(II+J); *>                                
               *>                                                               
                  SIMP(II+N1) = CHI2( SIMP(II+1), SIMP(II+2) ); IOP = 5;        
            *>                                                                  
         *>                                                                     
" ORDER SIMPLEX "                                                               
         DO J = 1 , N1                                                          
         <* DO I = 1 , N1                                                       
            <*                                                                  
               II = IND(I);                                                     
               IF SIMP(II+J) < SIMP( L(J) + J ) <* L(J) = II; *>                
               ELSEIF SIMP(II+J) > SIMP( H(J) + J ) <*  H(J) = II; *>           
            *>                                                                  
         *>                                                                     
" CONVERGENCE ? "                                                               
         DONE = .TRUE.;                                                         
         DO I = 1 , NPAR                                                        
         <*                                                                     
            ERR(I) = ABS( SIMP( H(N1) + I ) - SIMP( L(N1) + I ) );              
            DONE = DONE .AND. ( ERR(I) .LT. AMERR(I) );                         
         *>                                                                     
         ERR(N1) = ABS( SIMP( H(N1) + N1 ) - SIMP( L(N1) + N1 ) );              
                                                                                
      "- WRITE(IOP:2);  -"                                                      
                                                                                
      *>                                                                        
      UNTIL DONE .OR. ( ITER .GE. MITER );                                      
" CALC CENTER OF SIMPLEX "                                                      
      RN = FLOAT(N1);                                                           
      DO I = 1 , N1                                                             
      <*                                                                        
         AMEAN(I) = 0.0;                                                        
         DO J = 1 , N1 <* AMEAN(I) = AMEAN(I) + SIMP( IND(J) + I ); *>          
         AMEAN(I) = AMEAN(I) / RN;                                              
      *>                                                                        
                                                                                
   "- OUTPUT (' DET = ',DET); -"                                                
      DET = ( SIMP(IND(2)+1) - SIMP(1) ) * ( SIMP(IND(3)+2) - SIMP(2) )         
          - ( SIMP(IND(3)+1) - SIMP(1) ) * ( SIMP(IND(2)+2) - SIMP(2) );        
                                                                                
      IFAIL = ITER;                                                             
                                                                                
   RETURN;                                                                      
   END;                                                                         
                                                                                
%%                                                                              
***HEADER*** MEMBER  VTXDAV         SAVED BY F22HAG  ON 87/11/19  AT 17:53      
"   05/01/87 711191753  MEMBER NAME  VTXDAV   (S)           MORTRA34 "          
%MACRO 'F22KLE.JVTXC.S(MORTMAC)'                                                
"                                                                               
**870106*KLEINWORT***************************************************           
*                                                                   *           
*   VERTEX FIT WITH DAVIDON'S VARIANCE ALGORITHM                    *           
*                                                                   *           
*   IRET >  0 : NUMBER OF ITERATIONS                                *           
*        = -1 : NV < 1 OR NV > 20                                   *           
*        = -2 : NT < 1                                              *           
*        = -3 : NO CONVERGENCE                                      *           
*        = -4 : DIAGONAL ELEMENT OF COVARIANCE MATRIX .LE. 0.       *           
*        = -5 : NDF = N*(IDIM-1) - IDIM < 1                         *           
*                                                                   *           
*    BIT 28 ON IN MODE --> NO FIT IN Z ( IDIM = 2 )                 *   00011000
*    BIT 24 ON IN MODE --> PENALTY FOR                              *   00011000
*       ST < S(ORIGIN) - SP0 OR ST > S(FIRST HIT) + SP0             *           
*                                                                   *           
*********************************************************************           
"                                                                               
      SUBROUTINE VTXDAV(IRET); ABORTUSE(IRET);                                  
"-                                                                              
      IMPLICIT INTEGER*2 (H);                                                   
-"                                                                              
;                                                                               
%F                                                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                              
%M                                                                              
""                                                                              
      LOGICAL DONE;                                                             
      REAL*4 LAM;                                                               
      REAL*8 XMD(20),YMD(20),RD(20),RR,DR,XD,YD,DIST;                           
""                                                                              
      DIMENSION S0(20), EX0(20), EY0(20);                                       
""                                                                              
      EQUIVALENCE (A(1),XMD(1)), (A(21),YMD(1)), (A(41),RD(1)),                 
                  (A(61),S0(1)), (A(71),EX0(1)), (A(81),EY0(1));                
""                                                                              
      DATA NCALL / 0 /;                                                         
                                                                                
      DATA                                                                      
         ALFA  / 1.0E-3/,                                                       
         BETA  / 10.0/,                                                         
         AH    /  1.0E-3/,                                                      
         AL    / -1.0E-3/,                                                      
         BH    / -0.9091/,                                                      
         BL    / -1.1111/,                                                      
         EPS   / 1.0E-6/,                                                       
         MXITER  / 30 /;                                                        
                                                                                
""                                                                              
      ABORT(-1) IF NV.LE.0 .OR. NV.GT.20;                                       
""                                                                              
      INC NCALL;                                                                
      IF NCALL.EQ.1                                                             
      <*                                                                        
         UNLESS (ITDLEN.GE.30).AND.(IVDLEN.GE.10)                               
         <*                                                                     
            OUTPUT; (/' ??? INVALID ITDLEN, IVDLEN ???'/);                      
            STOP;                                                               
         *>                                                                     
         OUTPUT;                                                                
         (/' === VERTEX FIT IS DONE BY THE DAVIDON',                            
           ' VARIANCE ALGORITHM === '/);                                        
         OUTPUT;                                                                
         (/' === 19.11.87 : IT(JT+1) IS SET TO 3 FOR EACH TRACK AFTER',         
           ' SUCCESSFUL VERTEX FIT === '/);                                     
         IF TBIT(MODE,24)                                                       
         <* OUTPUT; (' === PENALTY FUNCTION WILL BE USED === '/); *>            
      *>                                                                        
""                                                                              
      LV = (NV-1)*IVDLEN;                                                       
      IV(LV+1) = 0;                                                             
      ABORT(-2) IF NT.LE.0;                                                     
""                                                                              
      IVFLG = 1;                                                                
      N = 0;                                                                    
      J = -ITDLEN;                                                              
      DO I = 1, NT                                                              
      <*                                                                        
         J = J + ITDLEN;                                                        
         IF (IT(J+1).LE.1) NEXT;                                                
         INC N;                                                                 
         IF N.LE.20                                                             
         <* K = N; *>                                                           
         ELSE                                                                   
         <*                                                                     
            MINPT = 55;                                                         
            DO K = 1, 20                                                        
            <* L = NTIND(K);                                                    
               IF (IT(L+13).GE.MINPT) NEXT;                                     
               IMIN = K; MINPT = IT(L+13);                                      
            *>                                                                  
            IF (IT(J+13).LE.MINPT) NEXT;                                        
            K = IMIN;                                                           
         *>                                                                     
         NTIND(K) = J;                                                          
         S(K) = T(J+15);                                                        
      *>                                                                        
      IF (N.GT.20) N = 20;                                                      
""                                                                              
      IF TBIT(MODE,28) <* IDIM = 2; *> ELSE <* IDIM = 3; *>                     
      NDF = N*(IDIM-1) - IDIM;                                                  
      ABORT(-5) IF NDF.LT.1;                                                    
""                                                                              
      / SXX, SXY, SYY, SZZ / = 0.0;                                             
      DO I = 1, N                                                               
      <*                                                                        
         J = NTIND(I);                                                          
         RR = DBLE( T(J+2) );                                                   
         RD(I) = DABS(RR);                                                      
         XD = DBLE(T(J+5)) - RR*DBLE(T(J+21));                                  
         YD = DBLE(T(J+6)) + RR*DBLE(T(J+22));                                  
         XMD(I) = XD; YMD(I) = YD;                                              
         DR = DBLE(SIGN(1.,T(J+2)));                                            
         PHI = SNGL( DATAN2(-DR*(XD-DBLE(XB)),DR*(YD-DBLE(YB))) );              
         CS = COS(PHI); SN = SIN(PHI);                                          
         EX0(I) = CS; EY0(I) = SN;                                              
         PHI = PHI - T(J+3);                                                    
         IF (ABS(PHI).GT.3.141593) PHI = PHI - SIGN(1.0,PHI)*6.283185;          
         ST = SNGL(RR)*PHI; S0(I) = ST;                                         
""                                                                              
         PHI0 = SNGL( DATAN2(-DR*XD,DR*YD) );                                   
         PHI0 = PHI0 - T(J+3);                                                  
         IF (ABS(PHI0).GT.3.141593)                                             
            PHI0 = PHI0 - SIGN(1.0,PHI0)*6.283185;                              
         T(J+25) = SNGL(RR)*PHI0;                                               
""                                                                              
         CALL DXYZ2( J, ST, DXY2, DZ2 );                                        
         SXX = SXX + CS*CS / DXY2;                                              
         SXY = SXY + CS*SN / DXY2;                                              
         SYY = SYY + SN*SN / DXY2;                                              
         SZZ = SZZ +  1.0  / DZ2;                                               
""                                                                              
      *>                                                                        
"                                    INITIAL COVARIANCES "                      
      D12 = SXX*SYY;                                                            
      DET = D12 - SXY**2;                                                       
      IF ABS(DET/D12).LT.1.0E-4                                                 
"                                    COLLINEARITY "                             
      <* IVFLG = 2; VXX = 1.0; VXY = 0.0; VYY = 1.0; *> ELSE                    
      <* VXX = SXX / DET;                                                       
         VXY = SXY / DET;                                                       
         VYY = SYY / DET;                                                       
      *>                                                                        
      VXZ = 0.0;                                                                
      VYZ = 0.0;                                                                
      VZZ = 1.0 / SZZ;                                                          
"                                    INITIAL VERTEX "                           
      XV = XB; YV = YB; ZV = ZB;                                                
""                                                                              
      ITER = 0; DONE = .FALSE.;                                                 
      F = CHI2( N, XV, YV, ZV, GRADX, GRADY, GRADZ );                           
                                                                                
      UNTIL ( ITER .GE. MXITER ) .OR. DONE                                      
      <*                                                                        
         ITER = ITER + 1;                                                       
" X* = X - 0.5 V G "                                                            
         XV9 = XV - 0.5 * ( VXX*GRADX + VXY*GRADY + VXZ*GRADZ );                
         YV9 = YV - 0.5 * ( VXY*GRADX + VYY*GRADY + VYZ*GRADZ );                
         ZV9 = ZV - 0.5 * ( VXZ*GRADX + VYZ*GRADY + VZZ*GRADZ );                
         F9 = CHI2( N, XV9, YV9, ZV9, GRAD9X, GRAD9Y, GRAD9Z );                 
" R =  V G* "                                                                   
         RX = VXX * GRAD9X + VXY * GRAD9Y + VXZ * GRAD9Z;                       
         RY = VXY * GRAD9X + VYY * GRAD9Y + VYZ * GRAD9Z;                       
         RZ = VXZ * GRAD9X + VYZ * GRAD9Y + VZZ * GRAD9Z;                       
" RHO = G* R "                                                                  
         RHO = RX * GRAD9X + RY * GRAD9Y + RZ * GRAD9Z;                         
                                                                                
         IF RHO .LT. EPS <* DONE = .TRUE.; *> ELSE                              
         <*                                                                     
" GAM = -G R / RHO "                                                            
            GAM = - GRADX * RX - GRADY * RY - GRADZ * RZ;                       
            GAM = GAM / RHO;                                                    
" DEFINE LAM "                                                                  
            IF ( AL <= GAM ) .AND. ( GAM < AH )  <* LAM = ALFA; *>              
            ELSEIF ( BH <= GAM ) .AND. ( GAM < AL )                             
                <* LAM = -GAM / ( GAM + 1.0 ); *>                               
            ELSEIF ( BL <= GAM ) .AND. ( GAM < BH ) <* LAM = BETA; *>           
            ELSE <* LAM = GAM / ( GAM + 1.0 ); *>                               
" UPDATE V "                                                                    
            LAM = ( LAM - 1.0 ) / RHO;                                          
            VXX = VXX + LAM * RX * RX;                                          
            VXY = VXY + LAM * RX * RY;                                          
            VYY = VYY + LAM * RY * RY;                                          
            VXZ = VXZ + LAM * RX * RZ;                                          
            VYZ = VYZ + LAM * RY * RZ;                                          
            VZZ = VZZ + LAM * RZ * RZ;                                          
" IMPROVEMENT  ? "                                                              
            IF F9 < F                                                           
            <*                                                                  
               F = F9;                                                          
               XV = XV9;                                                        
               YV = YV9;                                                        
               ZV = ZV9;                                                        
               GRADX = GRAD9X;                                                  
               GRADY = GRAD9Y;                                                  
               GRADZ = GRAD9Z;                                                  
            *>                                                                  
         *>                                                                     
      *>                                                                        
""                                                                              
      ABORT(-3) UNLESS DONE;                                                    
      ABORT(-4) IF (VXX.LE.0.).OR.(VYY.LE.0.).OR.(VZZ.LE.0.);                   
""                                                                              
      DO I = 1, N                                                               
      <*                                                                        
         J = NTIND(I);                                                          
         IT(J+1) = 3;                                                           
      *>                                                                        
""                                                                              
      IRET = ITER;                                                              
      PR = PROB( F9, NDF );                                                     
      IV(LV+1) = IVFLG;                                                         
      IF ((PR.GT.PRCUT).AND.(IVFLG.EQ.1)) IV(LV+1) = 3;                         
      V(LV+2) = XV9;                                                            
      V(LV+3) = YV9;                                                            
      V(LV+4) = ZV9;                                                            
      V(LV+5) = SQRT(VXX);                                                      
      V(LV+6) = SQRT(VYY);                                                      
      V(LV+7) = SQRT(VZZ);                                                      
      IV(LV+8) = N;                                                             
      V(LV+9) = F9;                                                             
      IV(LV+10) = N;                                                            
      V(LV+11) = VXY;                                                           
      V(LV+12) = VXZ;                                                           
      V(LV+13) = VYZ;                                                           
""                                                                              
      RETURN;                                                                   
      END;                                                                      
""                                                                              
      SUBROUTINE DXYZ2( J, ST, DXY2, DZ2 );                                     
""                                                                              
;                                                                               
%F                                                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                              
%M                                                                              
""                                                                              
      DATA SFR2 / 1.0 /;  " ADDITIONAL SIGFAC**2 "                              
      DATA NDUMP / 0 /;                                                         
""                                                                              
                                                                                
      IDERIV = 0;                                                               
      GOTO :BEGIN:;                                                             
""                                                                              
      ENTRY DXYZ2D( J, ST, DXY2, DZ2 , DXY2DS, DZ2DS );                         
""                                                                              
      IDERIV = 1;                                                               
:BEGIN:;                                                                        
      SSPACE = ST;                                                              
      SSCOUL = SSPACE - T(J+18);                                                
      IF ((SSCOUL.GT.0.).OR.(T(J+18).GT.0.)) SSCOUL=0.;                         
      SSCVXC = SSPACE - T(J+19);                                                
      IF(SSCVXC.GT.0.) SSCVXC=0.;                                               
""                                                                              
      X = SSPACE - 0.5*T(J+20);                                                 
"                                     ERROR IN XY (SQUARED)                     
                                                                                
                                      MULTIPLE SCATTERRING ( TANKWALL )"        
      DXY2 = (( T(J+16) * SSCOUL )**2 +                                         
"                                     MULTIPLE SCATTERRING ( BEAMPIPE )"        
              ( T(J+17) * SSCVXC )**2 +                                         
"                                     PARABOLA FIT "                            
              ((( T(J+32)   *X + T(J+33) ) *X +                                 
                 T(J+34) ) *X + T(J+35) ) *X + T(J+36)) * SFR2;                 
"                                     DERIVATION OF DXY2 WITH S "               
      IF (IDERIV.EQ.1)                                                          
        DXY2DS = ( 2.0 * ( T(J+16)**2 * SSCOUL + T(J+17)**2 * SSCVXC ) +        
              (( 4.0*T(J+32)   *X + 3.0*T(J+33) ) *X +                          
                 2.0*T(J+34) ) *X +     T(J+35)) * SFR2;                        
"                                                                               
   PENALTY                                                                      
"                                                                               
      IF (TBIT(MODE,24))                                                        
      <* IF ST.GT.SP0                                                           
         <* SP = ST - SP0;                                                      
            DXY2   = DXY2 + (SP/SP1)**2;                                        
            DXY2DS = DXY2DS + 2.0*SP/SP1**2;                                    
            DUMP (NDUMP.LT.10) J, ST, SP, SP0, SP1;                             
            (' VTXDAV : PENALTY AT ',I4,4G13.4 );                               
         *>                                                                     
         ELSEIF ST.LT.(T(J+25)-SP0)                                             
         <* SP = ST - T(J+25) + SP0;                                            
            DXY2   = DXY2 + (SP/SP1)**2;                                        
            DXY2DS = DXY2DS + 2.0*SP/SP1**2;                                    
            DUMP (NDUMP.LT.10) J, ST, SP, SP0, SP1;                             
            (' VTXDAV : PENALTY AT ',I4,4G13.4 );                               
         *>                                                                     
      *>                                                                        
"                                                                               
  *** CALCULATION OF ZS-ERRORS                                                  
"                                                                               
      SSCOUL = SSPACE - T(J+18);                                                
      IF (SSCOUL.GT.0.) SSCOUL=0.;                                              
      SSCVXC = SSPACE - T(J+19);                                                
      IF (SSCVXC.GT.0.) SSCVXC=0.;                                              
""                                                                              
      SSPACE = SSPACE + T(J+39);                                                
""                                                                              
      X = SSPACE/T(J+38) - 0.5;                                                 
"                                      MULTIPLE SCATTERRING "                   
      DZ2 = ( ( T(J+16) * SSCOUL )**2 + ( T(J+17) * SSCVXC )**2 +               
"                                      LINE FIT (WITH TRIPLETS) "               
              T(J+37) * ( 1.5 + 18.*X**2 ) ) * SFR2;                            
"                                     DERIVATION OF DZ2 WITH S "                
      IF (IDERIV.EQ.1)                                                          
        DZ2DS = ( 2.0 * ( T(J+16)**2 * SSCOUL + T(J+17)**2 * SSCVXC ) +         
                  36.0*T(J+37) * X / T(J+38) ) * SFR2;                          
""                                                                              
      RETURN;                                                                   
""                                                                              
      ENTRY DXYZ2S( SFR );                                                      
      SFR2 = SFR**2;                                                            
      RETURN;                                                                   
      END;                                                                      
                                                                                
FUNCTION CHI2( N, X ,Y, Z, GRX, GRY, GRZ );                                     
                                                                                
;                                                                               
%F                                                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                              
%M                                                                              
""                                                                              
      REAL*8 XMD(20),YMD(20),RD(20),RR,DR,XD,YD,DIST;                           
""                                                                              
      DIMENSION S0(20), EX0(20), EY0(20);                                       
""                                                                              
      EQUIVALENCE (A(1),XMD(1)), (A(21),YMD(1)), (A(41),RD(1)),                 
                  (A(61),S0(1)), (A(71),EX0(1)), (A(81),EY0(1));                
                                                                                
      / CSUM, GX, GY, GZ /  = 0.0;                                              
""                                                                              
      DO I = 1 , N                                                              
      <*                                                                        
         J = NTIND(I);                                                          
         XD = DBLE(X) - XMD(I);                                                 
         YD = DBLE(Y) - YMD(I);                                                 
         DIST = DSQRT( XD**2 + YD**2 );                                         
         RR = RD(I); DR = DIST - RR;                                            
                                                                                
" APPROX. PROJ. EXTRAPOLATION LENGTH "                                          
         ST    = SNGL( ( DBLE(EX0(I)) * XD + DBLE(EY0(I)) * YD )                
               * RR / DIST );                                                   
         SPERP = SNGL( ( DBLE(EX0(I)) * YD - DBLE(EY0(I)) * XD )                
               * RR / DIST );                                                   
                                                                                
         ST = ST + S0(I); S(I) = ST;                                            
                                                                                
" EXTRAPOLATION ERROR SQUARED DXY2(S) "                                         
" DERIVATION  D(DXY2)/DS "                                                      
" EXTRAPOLATION ERROR SQUARED DZ2(S) "                                          
" DERIVATION  D(DZ2)/DS "                                                       
         CALL DXYZ2D( J, ST, DXY2, DZ2, DXY2DS, DZ2DS );                        
"                                                                               
  DISTANCE IN Z                                                                 
"                                                                               
         IF TBIT(MODE,28) <* ZDIFF = 0.0; *> ELSE                               
         <* ZDIFF = Z - T(J+7) - ST * T(J+23); *>                               
                                                                                
         F1 = SNGL( DR / DIST ) / DXY2;                                         
         F2 = F1*F1 * SPERP * DXY2DS;                                           
         F3 = ZDIFF / DZ2;                                                      
         F4 = F3 * SPERP / SNGL( DIST**2 );                                     
                                                                                
         CHITR(I) = SNGL( DR*DR ) / DXY2 + F3*F3*DZ2;                           
         CSUM = CSUM + CHITR(I);                                                
         GX = GX + F1 * SNGL( 2.0D0 * XD ) -                                    
                 ( F2 + F4 * ( F3*DZ2DS + 2.0*T(J+23) ) ) * SNGL( YD );         
         GY = GY + F1 * SNGL( 2.0D0 * YD ) +                                    
                 ( F2 + F4 * ( F3*DZ2DS + 2.0*T(J+23) ) ) * SNGL( XD );         
         GZ = GZ + 2.0 * F3;                                                    
      *>                                                                        
      CHI2 = CSUM; GRX = GX; GRY = GY; GRZ = GZ;                                
      RETURN;                                                                   
      END;                                                                      
%%                                                                              
***HEADER*** MEMBER  VTXDEF         SAVED BY F22KLE  ON 87/03/24  AT 17:49      
C********************************************************************   00000000
C*                                                                  *   00000100
C*             X - Y - Z   V E R T E X   F I T                      *   00000200
C*                                                                  *   00000300
C*       INPUT PARAMETERS IN /CWORK1/ (MM, MEV, RADIANS)            *   00000400
C*       ================                                           *   00000500
C*       NT    = TOTAL NR OF TRACKS OF EVENT                        *   00000600
C*       IT(1) =         FLAG (0 = TRACK INCOMPLETE OR BAD, NOT USED*   00000700
C*                             1 = GOOD, BUT DO NOT USE IN VERTEXFIT*   00000800
C*                             2 = GOOD)                            *   00000900
C*       T( 2) = +-R     RADIUS(+ MEANS ANTICLOCKWISE LOOKING TO -Z)*   00001000
C*          3  = PHI     AZIMUTH AT POINT XT,YT,ZT                  *   00001100
C*          4  = THETA   POLAR ANGLE TO XY-PLANE(0=VERTICAL TO BEAM)*   00001200
C*          5  = XT      .                                          *   00001300
C*          6  = YT      . FIRST MEASURED POINT ON TRACK            *   00001400
C*          7  = ZT      .                                          *   00001500
C*          8  = DPHI    ERROR OF PHI                               *   00001600
C*          9  = DTHETA  ERROR OF THETA                             *   00001700
C*         10  = DXT     .                                          *   00001800
C*         11  = DYT     . ERROR OF XT,YT,ZT                        *   00001900
C*         12  = DZT     .                                          *   00002000
C*         13  = NPT     NUMBER OF POINTS ON TRACK (INTEGER)        *   00002100
C*         14  = 0       NOT USED ON INPUT                          *   00002200
C*         15  = S0      INITIAL ARCLENGTH ( = 0. OR CLOSEST        *   00002300
C*                          APPROACH TO RUNVERTEX )                 *   00002400
C*         16-40         FOR INTERNAL USE (SEE BELOW)               *   00002500
C*        (41-80)        2. TRACK                                   *   00002600
C*         .....         ........                                   *   00002700
C*                                                                  *   00002800
C*       OUTPUT PARAMETERS IN /CWORK1/ (MM, MEV, RADIANS)           *   00002900
C*       =================                                          *   00003000
C*       FOR TRACKS WITH IT(1) GT 0                                 *   00003100
C*       IT(1) =         FLAG (3 = TRACK WAS USED IN VERTEXFIT)     *   00003200
C*       T( 3) = PHI     AZIMUTH AT POINT XT,YT,ZT                  *   00003300
C*          5  = XT      .                                          *   00003400
C*          6  = YT      . POINT ON TRACK NEAREST TO VERTEX         *   00003500
C*          7  = ZT      .                                          *   00003600
C*         10  = DXT     .                                          *   00003700
C*         11  = DYT     . ERROR OF XT,YT,ZT                        *   00003800
C*         12  = DZT     .                                          *   00003900
C*         14  = NV      NUMBER OF VERTEX TO WHICH TRACK BELONGS (I)*   00004000
C*         15  = S       EXTRAPOLATED ARC LENGTH (USUALLY NEGATIVE) *   00004100
C*       ALL OTHER T'S ARE UNCHANGED                                *   00004200
C*                                                                  *   00004300
C*       NV    = TOTAL NUMBER OF VERTICES                           *   00004400
C*       IV(1) =         FLAG (0 = NO VERTEX FIT                    *   00004500
C*                             1 = BAD VERTEX FIT                   *   00004600
C*                             2 = VERTEX OF 1- OR COLLINEAR 2-PRONG*   00004700
C*                             3 = GOOD VERTEX FIT                  *   00004800
C*                             4 = E+E- PAIR VERTEX                 *   00004900
C*                             5 = ISOLATED SINGLE TRACK VERTEX)    *   00005000
C*       V( 2) = X       .                                          *   00005100
C*          3  = Y       . VERTEX COORDINATES                       *   00005200
C*          4  = Z       .                                          *   00005300
C*          5  = DX      .                                          *   00005400
C*          6  = DY      . ERROR OF X,Y,Z                           *   00005500
C*          7  = DZ      .                                          *   00005600
C*       IV(8) = NTR     NUMBER OF TRACKS USED IN VERTEX FIT        *   00005700
C*       V( 9) = CHI2    CHISQARE OF FIT (N.D.F. = 2*NTR-3)         *   00005800
C*       IV(10)= NTRALL  NUMBER OF TRACKS BELONGING TO THIS VERTEX  *   00005900
C*                                                                  *   00006000
C*       NEW VERTEX RESULTS      ( 11 - 13 )               BY KLE   *   00006100
C*       -------------------                                        *   00006200
C*       V(11) = COVXY FOR VERTEX                                   *   00006300
C*       V(12) = COVXZ FOR VERTEX                                   *   00006400
C*       V(13) = COVYZ FOR VERTEX                                   *   00006500
C*                                                                  *   00006600
C*        (13-26)        2. VERTEX                                  *   00006700
C*         .....         .........                                  *   00006800
C*                                                                  *   00006900
C*       INTERNAL PARAMETERS                                        *   00007000
C*       ===================                                        *   00007100
C*       IT(1) IS SET NEGATIV TEMPORARILY IF TRACK BELONGS TO VERTEX*   00007200
C*       T(16) = COULOMB SCATTERING ERROR ( TANKWALL )              *   00007300
C*       T(17) = COULOMB SCATTERING ERROR ( NEW BEAMPIPE ONLY )     *   00007400
C*       T(18) = S TO TANKWALL NEAR                                 *   00007500
C*       T(19) = S TO BEAMPIPE NEAR                                 *   00007600
C*       T(20) = PROJ. TRACKLENGTH IN RPHI                          *   00007700
C*       T(21) = SIN(PHI0)                                          *   00007800
C*       T(22) = COS(PHI0)                                          *   00007900
C*       T(23) = TAN(THETA)                                         *   00008000
C*       T(24) = COS(THETA)                                         *   00008100
C*       T(25) = S TO ORIGIN ( VTXDAV ONLY )                        *   00008200
C*       T(26) = S TO TANKWALL FAR                                  *   00008300
C*       T(27) = S TO TANKWALL NEAR                                 *   00008400
C*       T(28) = S.D. X                                             *   00008500
C*       T(29) = S.D. Y                                             *   00008600
C*       T(30) = S.D. Z                                             *   00008700
C*                                                                  *   00008800
C*       NEW INTERNAL PARAMETERS ( 31 - 40 )               BY KLE   *   00008900
C*       -----------------------                                    *   00009000
C*       IT(31)= 1 FOR 'COMFIT'TED TRACKS, 0 ELSE                   *   00009100
C*                                      ( COVAR. DEFAULTS :   )     *   00009200
C*       T(32) = RPHI COVARIANCE : X**4 ( 180 SIG**2/N / L**4 )     *   00009300
C*       T(33) = RPHI COVARIANCE : X**3 ( 0.0 )                     *   00009400
C*       T(34) = RPHI COVARIANCE : X**2 ( -18 SIG**2/N / L**2 )     *   00009500
C*       T(35) = RPHI COVARIANCE : X**1 ( 0.0 )                     *   00009600
C*       T(36) = RPHI COVARIANCE : X**0 ( 9/4 SIG**2/N )            *   00009700
C*       T(37) = SIG**2/NPT IN ZS                                   *   00009800
C*       T(38) = PROJ. TRACKLENGTH IN ZS                            *   00009900
C*       T(39) = S0(ZS) - S0(RPHI)                                  *   00010000
C*       T(40) = COVARIANCE TERM FOR ANGULAR ERROR                  *   00010100
C*                                                                  *   00010200
C********************************************************************   00010300
C*                                                                  *   00010400
C*   MODES :                                                        *   00010500
C*  =========                                                       *   00010600
C*   BIT 31 ON --> STARTPOINT IS RUNVERTEX ( NOT FIRST MEASURED )   *   00010700
C*   BIT 30 ON --> RUNVERTEX CONSTRAIN                              *   00010800
C*   BIT 29 ON --> AXIS CONSTRAIN                                   *   00010900
C*   BIT 28 ON --> FITS IN RPHI AND Z ARE INDEPENDENT               *   00011000
C*   BIT 27 ON --> LOCAL STATISTICS FROM VERTEX                     *   00011100
C*   BIT 26 ON --> OVERWRITE PATR-BANK FOR TYP 2 WITH HELIX-        *   00011200
C*                 PARAMETERS                                       *   00011300
C*   BIT 25 ON --> MESSAGE FROM VTXEE IF FAILED                     *   00011400
C*                                                                  *   00011500
C********************************************************************   00011600
***HEADER*** MEMBER  VTXDVN         SAVED BY F22KLE  ON 87/07/18  AT 18:22      
"   05/01/87 707181822  MEMBER NAME  VTXDVN   (S)           MORTRA34 "          
%MACRO 'F22KLE.JVTXC.S(MORTMAC)'                                                
"                                                                               
**870719*KLEINWORT***************************************************           
*                                                                   *           
*   VERTEX FIT WITH DAVIDON'S VARIANCE ALGORITHM                    *           
*                                                                   *           
*   WITH NEUTRALS ( LINEAR CONSTRAINTS ) ( UP TO 10 )               *           
*                                                                   *           
*   ( STORED IN TNEUT(1..10,INEUT), STARTING AT A(92) :             *           
*        TNEUT( 1,) : X0                                            *           
*        TNEUT( 2,) : Y0                                            *           
*        TNEUT( 3,) : Z0                                            *           
*        TNEUT( 4,) : DX                                            *           
*        TNEUT( 5,) : DY                                            *           
*        TNEUT( 6,) : DZ/DS                                         *           
*        TNEUT( 7,) : DXY2                                          *           
*        TNEUT( 8,) : DPHI2                                         *           
*        TNEUT( 9,) : DZ2                                           *           
*        TNEUT(10,) : D(DZ/DS)**2                                   *           
*     NUMBER OF NEUTRALS INTERNALY KEEPT IN A(91) )                 *           
*                                                                   *           
*   IRET >  0 : NUMBER OF ITERATIONS                                *           
*        = -1 : NV < 1 OR NV > 20                                   *           
*        = -2 : NT < 1                                              *           
*        = -3 : NO CONVERGENCE                                      *           
*        = -4 : DIAGONAL ELEMENT OF COVARIANCE MATRIX .LE. 0.       *           
*        = -5 : NDF = N*(IDIM-1) - IDIM < 1                         *           
*                                                                   *           
*    BIT 28 ON IN MODE --> NO FIT IN Z ( IDIM = 2 )                 *   00011000
*    BIT 24 ON IN MODE --> PENALTY FOR                              *   00011000
*       ST < S(ORIGIN) - SP0 OR ST > S(FIRST HIT) + SP0             *           
*                                                                   *           
*********************************************************************           
"                                                                               
      SUBROUTINE VTXDVN(MNEUT,IRET); ABORTUSE(IRET);                            
"-                                                                              
      IMPLICIT INTEGER*2 (H);                                                   
-"                                                                              
;                                                                               
%F                                                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                              
%M                                                                              
""                                                                              
      LOGICAL DONE;                                                             
      REAL*4 LAM;                                                               
      REAL*8 XMD(20),YMD(20),RD(20),RR,DR,XD,YD,DIST;                           
""                                                                              
      DIMENSION S0(20), EX0(20), EY0(20), TNEUT(10,10);                         
""                                                                              
      EQUIVALENCE (A(1),XMD(1)), (A(21),YMD(1)), (A(41),RD(1)),                 
                  (A(61),S0(1)), (A(71),EX0(1)), (A(81),EY0(1)),                
                  (A(91),NNEUT), (A(92),TNEUT(1,1));                            
""                                                                              
      DATA NCALL / 0 /;                                                         
      DATA NDUMP / 0 /;                                                         
                                                                                
      DATA                                                                      
         ALFA  / 1.0E-3/,                                                       
         BETA  / 10.0/,                                                         
         AH    /  1.0E-3/,                                                      
         AL    / -1.0E-3/,                                                      
         BH    / -0.9091/,                                                      
         BL    / -1.1111/,                                                      
         EPS   / 1.0E-6/,                                                       
         MXITER  / 30 /;                                                        
                                                                                
""                                                                              
      ABORT(-1) IF NV.LE.0 .OR. NV.GT.20;                                       
""                                                                              
      NNEUT = MIN0( MNEUT, 10 );                                                
""                                                                              
      INC NCALL;                                                                
      IF NCALL.EQ.1                                                             
      <*                                                                        
         UNLESS (ITDLEN.GE.30).AND.(IVDLEN.GE.10)                               
         <*                                                                     
            OUTPUT; (/' ??? INVALID ITDLEN, IVDLEN ???'/);                      
            STOP;                                                               
         *>                                                                     
         OUTPUT;                                                                
         (/' === VERTEX FIT IS DONE BY THE DAVIDON',                            
           ' VARIANCE ALGORITHM === '/);                                        
         IF TBIT(MODE,24)                                                       
         <* OUTPUT; (' === PENALTY FUNCTION WILL BE USED === '/); *>            
      *>                                                                        
""                                                                              
      LV = (NV-1)*IVDLEN;                                                       
      IV(LV+1) = 0;                                                             
      ABORT(-2) IF NT.LE.0;                                                     
""                                                                              
      IVFLG = 1;                                                                
      N = 0;                                                                    
      J = -ITDLEN;                                                              
      DO I = 1, NT                                                              
      <*                                                                        
         J = J + ITDLEN;                                                        
         IF (IT(J+1).LE.1) NEXT;                                                
         INC N;                                                                 
         IF N.LE.20                                                             
         <* K = N; *>                                                           
         ELSE                                                                   
         <*                                                                     
            MINPT = 55;                                                         
            DO K = 1, 20                                                        
            <* L = NTIND(K);                                                    
               IF (IT(L+13).GE.MINPT) NEXT;                                     
               IMIN = K; MINPT = IT(L+13);                                      
            *>                                                                  
            IF (IT(J+13).LE.MINPT) NEXT;                                        
            K = IMIN;                                                           
         *>                                                                     
         NTIND(K) = J;                                                          
         S(K) = T(J+15);                                                        
      *>                                                                        
      IF (N.GT.20) N = 20;                                                      
""                                                                              
      IF TBIT(MODE,28) <* IDIM = 2; *> ELSE <* IDIM = 3; *>                     
      NDF = (N+NNEUT)*(IDIM-1) - IDIM;                                          
      ABORT(-5) IF NDF.LT.1;                                                    
""                                                                              
      / SXX, SXY, SYY, SZZ / = 0.0;                                             
      DO I = 1, N                                                               
      <*                                                                        
         J = NTIND(I);                                                          
         RR = DBLE( T(J+2) );                                                   
         RD(I) = DABS(RR);                                                      
         XD = DBLE(T(J+5)) - RR*DBLE(T(J+21));                                  
         YD = DBLE(T(J+6)) + RR*DBLE(T(J+22));                                  
         XMD(I) = XD; YMD(I) = YD;                                              
         DR = DBLE(SIGN(1.,T(J+2)));                                            
         PHI = SNGL( DATAN2(-DR*(XD-DBLE(XB)),DR*(YD-DBLE(YB))) );              
         CS = COS(PHI); SN = SIN(PHI);                                          
         EX0(I) = CS; EY0(I) = SN;                                              
         PHI = PHI - T(J+3);                                                    
         IF (ABS(PHI).GT.3.141593) PHI = PHI - SIGN(1.0,PHI)*6.283185;          
         ST = SNGL(RR)*PHI; S0(I) = ST;                                         
""                                                                              
         PHI0 = SNGL( DATAN2(-DR*XD,DR*YD) );                                   
         PHI0 = PHI0 - T(J+3);                                                  
         IF (ABS(PHI0).GT.3.141593)                                             
            PHI0 = PHI0 - SIGN(1.0,PHI0)*6.283185;                              
         T(J+25) = SNGL(RR)*PHI0;                                               
""                                                                              
         CALL DXYZ2( J, ST, DXY2, DZ2 );                                        
         SXX = SXX + CS*CS / DXY2;                                              
         SXY = SXY + CS*SN / DXY2;                                              
         SYY = SYY + SN*SN / DXY2;                                              
         SZZ = SZZ +  1.0  / DZ2;                                               
""                                                                              
      *>                                                                        
""                                                                              
      IF NNEUT.GT.0                                                             
      <* DO IN = 1, NNEUT                                                       
""                                                                              
         <* CS = TNEUT(4,IN);                                                   
            SN = TNEUT(5,IN);                                                   
            DX = XB-TNEUT(1,IN);                                                
            DY = YB-TNEUT(2,IN);                                                
            ST = DX*CS + DY*SN;                                                 
            DXY2 = TNEUT(7,IN) + ST*ST*TNEUT(8,IN);                             
            DZ2  = TNEUT(9,IN) + ST*ST*TNEUT(10,IN);                            
            SXX = SXX + SN*SN / DXY2;                                           
            SXY = SXY - CS*SN / DXY2;                                           
            SYY = SYY + CS*CS / DXY2;                                           
            SZZ = SZZ + DZ2;                                                    
         *>                                                                     
""                                                                              
      *>                                                                        
"                                    INITIAL COVARIANCES "                      
      D12 = SXX*SYY;                                                            
      DET = D12 - SXY**2;                                                       
      IF ABS(DET/D12).LT.1.0E-4                                                 
"                                    COLLINEARITY "                             
      <* IVFLG = 2; VXX = 1.0; VXY = 0.0; VYY = 1.0; *> ELSE                    
      <* VXX = SXX / DET;                                                       
         VXY = SXY / DET;                                                       
         VYY = SYY / DET;                                                       
      *>                                                                        
      VXZ = 0.0;                                                                
      VYZ = 0.0;                                                                
      VZZ = 1.0 / SZZ;                                                          
"                                    INITIAL VERTEX "                           
      XV = XB; YV = YB; ZV = ZB;                                                
""                                                                              
      ITER = 0; DONE = .FALSE.;                                                 
      F = CHI2( N, XV, YV, ZV, GRADX, GRADY, GRADZ );                           
                                                                                
      UNTIL ( ITER .GE. MXITER ) .OR. DONE                                      
      <*                                                                        
         ITER = ITER + 1;                                                       
" X* = X - 0.5 V G "                                                            
         XV9 = XV - 0.5 * ( VXX*GRADX + VXY*GRADY + VXZ*GRADZ );                
         YV9 = YV - 0.5 * ( VXY*GRADX + VYY*GRADY + VYZ*GRADZ );                
         ZV9 = ZV - 0.5 * ( VXZ*GRADX + VYZ*GRADY + VZZ*GRADZ );                
         F9 = CHI2( N, XV9, YV9, ZV9, GRAD9X, GRAD9Y, GRAD9Z );                 
" R =  V G* "                                                                   
         RX = VXX * GRAD9X + VXY * GRAD9Y + VXZ * GRAD9Z;                       
         RY = VXY * GRAD9X + VYY * GRAD9Y + VYZ * GRAD9Z;                       
         RZ = VXZ * GRAD9X + VYZ * GRAD9Y + VZZ * GRAD9Z;                       
" RHO = G* R "                                                                  
         RHO = RX * GRAD9X + RY * GRAD9Y + RZ * GRAD9Z;                         
                                                                                
         IF RHO .LT. EPS <* DONE = .TRUE.; *> ELSE                              
         <*                                                                     
" GAM = -G R / RHO "                                                            
            GAM = - GRADX * RX - GRADY * RY - GRADZ * RZ;                       
            GAM = GAM / RHO;                                                    
" DEFINE LAM "                                                                  
            IF ( AL <= GAM ) .AND. ( GAM < AH )  <* LAM = ALFA; *>              
            ELSEIF ( BH <= GAM ) .AND. ( GAM < AL )                             
                <* LAM = -GAM / ( GAM + 1.0 ); *>                               
            ELSEIF ( BL <= GAM ) .AND. ( GAM < BH ) <* LAM = BETA; *>           
            ELSE <* LAM = GAM / ( GAM + 1.0 ); *>                               
" UPDATE V "                                                                    
            LAM = ( LAM - 1.0 ) / RHO;                                          
            VXX = VXX + LAM * RX * RX;                                          
            VXY = VXY + LAM * RX * RY;                                          
            VYY = VYY + LAM * RY * RY;                                          
            VXZ = VXZ + LAM * RX * RZ;                                          
            VYZ = VYZ + LAM * RY * RZ;                                          
            VZZ = VZZ + LAM * RZ * RZ;                                          
" IMPROVEMENT  ? "                                                              
            IF F9 < F                                                           
            <*                                                                  
               F = F9;                                                          
               XV = XV9;                                                        
               YV = YV9;                                                        
               ZV = ZV9;                                                        
               GRADX = GRAD9X;                                                  
               GRADY = GRAD9Y;                                                  
               GRADZ = GRAD9Z;                                                  
            *>                                                                  
         *>                                                                     
      *>                                                                        
""                                                                              
      ABORT(-3) UNLESS DONE;                                                    
      ABORT(-4) IF (VXX.LE.0.).OR.(VYY.LE.0.).OR.(VZZ.LE.0.);                   
""                                                                              
      IRET = ITER;                                                              
      PR = PROB( F9, NDF );                                                     
      IV(LV+1) = IVFLG;                                                         
      IF ((PR.GT.PRCUT).AND.(IVFLG.EQ.1)) IV(LV+1) = 3;                         
      V(LV+2) = XV9;                                                            
      V(LV+3) = YV9;                                                            
      V(LV+4) = ZV9;                                                            
      V(LV+5) = SQRT(VXX);                                                      
      V(LV+6) = SQRT(VYY);                                                      
      V(LV+7) = SQRT(VZZ);                                                      
      IV(LV+8) = N+NNEUT;                                                       
      V(LV+9) = F9;                                                             
      IV(LV+10) = N;                                                            
      V(LV+11) = VXY;                                                           
      V(LV+12) = VXZ;                                                           
      V(LV+13) = VYZ;                                                           
""                                                                              
      RETURN;                                                                   
      END;                                                                      
""                                                                              
      SUBROUTINE DXYZ2( J, ST, DXY2, DZ2 );                                     
""                                                                              
;                                                                               
%F                                                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                              
%M                                                                              
""                                                                              
      DATA SFR2 / 1.0 /;  " ADDITIONAL SIGFAC**2 "                              
""                                                                              
                                                                                
      IDERIV = 0;                                                               
      GOTO :BEGIN:;                                                             
""                                                                              
      ENTRY DXYZ2D( J, ST, DXY2, DZ2 , DXY2DS, DZ2DS );                         
""                                                                              
      IDERIV = 1;                                                               
:BEGIN:;                                                                        
      SSPACE = ST;                                                              
      SSCOUL = SSPACE - T(J+18);                                                
      IF ((SSCOUL.GT.0.).OR.(T(J+18).GT.0.)) SSCOUL=0.;                         
      SSCVXC = SSPACE - T(J+19);                                                
      IF(SSCVXC.GT.0.) SSCVXC=0.;                                               
""                                                                              
      X = SSPACE - 0.5*T(J+20);                                                 
"                                     ERROR IN XY (SQUARED)                     
                                                                                
                                      MULTIPLE SCATTERRING ( TANKWALL )"        
      DXY2 = ( T(J+16) * SSCOUL )**2 +                                          
"                                     MULTIPLE SCATTERRING ( BEAMPIPE )"        
             ( T(J+17) * SSCVXC )**2 +                                          
"                                     PARABOLA FIT "                            
            (((( T(J+32)   *X + T(J+33) ) *X +                                  
                 T(J+34) ) *X + T(J+35) ) *X + T(J+36)) * SFR2;                 
"                                     DERIVATION OF DXY2 WITH S "               
      IF (IDERIV.EQ.1)                                                          
          DXY2DS = 2.0 * ( T(J+16)**2 * SSCOUL + T(J+17)**2 * SSCVXC ) +        
             ((( 4.0*T(J+32)   *X + 3.0*T(J+33) ) *X +                          
                 2.0*T(J+34) ) *X +     T(J+35)) * SFR2;                        
"                                                                               
   PENALTY                                                                      
"                                                                               
      IF (TBIT(MODE,24))                                                        
      <* IF ST.GT.SP0                                                           
         <* SP = ST - SP0;                                                      
            DXY2   = DXY2 + (SP/SP1)**2;                                        
            DXY2DS = DXY2DS + 2.0*SP/SP1**2;                                    
            DUMP (NDUMP.LT.10) J, ST, SP, SP0, SP1;                             
            (' VTXDAV : PENALTY AT ',I4,4G13.4 );                               
         *>                                                                     
         ELSEIF ST.LT.(T(J+25)-SP0)                                             
         <* SP = ST - T(J+25) + SP0;                                            
            DXY2   = DXY2 + (SP/SP1)**2;                                        
            DXY2DS = DXY2DS + 2.0*SP/SP1**2;                                    
            DUMP (NDUMP.LT.10) J, ST, SP, SP0, SP1;                             
            (' VTXDAV : PENALTY AT ',I4,4G13.4 );                               
         *>                                                                     
      *>                                                                        
"                                                                               
  *** CALCULATION OF ZS-ERRORS                                                  
"                                                                               
      SSCOUL = SSPACE - T(J+18);                                                
      IF (SSCOUL.GT.0.) SSCOUL=0.;                                              
      SSCVXC = SSPACE - T(J+19);                                                
      IF (SSCVXC.GT.0.) SSCVXC=0.;                                              
""                                                                              
      SSPACE = SSPACE + T(J+39);                                                
""                                                                              
      X = SSPACE/T(J+38) - 0.5;                                                 
"                                      MULTIPLE SCATTERRING "                   
      DZ2 = ( T(J+16) * SSCOUL )**2 + ( T(J+17) * SSCVXC )**2 +                 
"                                      LINE FIT (WITH TRIPLETS) "               
              T(J+37) * ( 1.5 + 18.*X**2 ) * SFR2;                              
"                                     DERIVATION OF DZ2 WITH S "                
      IF (IDERIV.EQ.1)                                                          
          DZ2DS = 2.0 * ( T(J+16)**2 * SSCOUL + T(J+17)**2 * SSCVXC ) +         
                  36.0*T(J+37) * X / T(J+38) * SFR2;                            
""                                                                              
      RETURN;                                                                   
""                                                                              
      ENTRY DXYZ2S( SFR );                                                      
      SFR2 = SFR**2;                                                            
      RETURN;                                                                   
      END;                                                                      
                                                                                
FUNCTION CHI2( N, X ,Y, Z, GRX, GRY, GRZ );                                     
                                                                                
;                                                                               
%F                                                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                              
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                              
%M                                                                              
""                                                                              
      REAL*8 XMD(20),YMD(20),RD(20),RR,DR,XD,YD,DIST;                           
""                                                                              
      DIMENSION S0(20), EX0(20), EY0(20), TNEUT(6,10);                          
""                                                                              
      EQUIVALENCE (A(1),XMD(1)), (A(21),YMD(1)), (A(41),RD(1)),                 
                  (A(61),S0(1)), (A(71),EX0(1)), (A(81),EY0(1)),                
                  (A(91),NNEUT), (A(92),TNEUT(1,1));                            
                                                                                
      / CSUM, GX, GY, GZ /  = 0.0;                                              
""                                                                              
      DO I = 1 , N                                                              
      <*                                                                        
         J = NTIND(I);                                                          
         XD = DBLE(X) - XMD(I);                                                 
         YD = DBLE(Y) - YMD(I);                                                 
         DIST = DSQRT( XD**2 + YD**2 );                                         
         RR = RD(I); DR = DIST - RR;                                            
                                                                                
" APPROX. PROJ. EXTRAPOLATION LENGTH "                                          
         ST    = SNGL( ( DBLE(EX0(I)) * XD + DBLE(EY0(I)) * YD )                
               * RR / DIST );                                                   
         SPERP = SNGL( ( DBLE(EX0(I)) * YD - DBLE(EY0(I)) * XD )                
               * RR / DIST );                                                   
                                                                                
         ST = ST + S0(I); S(I) = ST;                                            
                                                                                
" EXTRAPOLATION ERROR SQUARED DXY2(S) "                                         
" DERIVATION  D(DXY2)/DS "                                                      
" EXTRAPOLATION ERROR SQUARED DZ2(S) "                                          
" DERIVATION  D(DZ2)/DS "                                                       
         CALL DXYZ2D( J, ST, DXY2, DZ2, DXY2DS, DZ2DS );                        
"                                                                               
  DISTANCE IN Z                                                                 
"                                                                               
         IF TBIT(MODE,28) <* ZDIFF = 0.0; *> ELSE                               
         <* ZDIFF = Z - T(J+7) - ST * T(J+23); *>                               
                                                                                
         F1 = SNGL( DR / DIST ) / DXY2;                                         
         F2 = F1*F1 * SPERP * DXY2DS;                                           
         F3 = ZDIFF / DZ2;                                                      
         F4 = F3 * SPERP / SNGL( DIST**2 );                                     
                                                                                
         CHITR(I) = SNGL( DR*DR ) / DXY2 + F3*F3*DZ2;                           
         CSUM = CSUM + CHITR(I);                                                
         GX = GX + F1 * SNGL( 2.0D0 * XD ) -                                    
                 ( F2 + F4 * ( F3*DZ2DS + 2.0*T(J+23) ) ) * SNGL( YD );         
         GY = GY + F1 * SNGL( 2.0D0 * YD ) +                                    
                 ( F2 + F4 * ( F3*DZ2DS + 2.0*T(J+23) ) ) * SNGL( XD );         
         GZ = GZ + 2.0 * F3;                                                    
      *>                                                                        
      IF NNEUT.GT.0                                                             
      <* DO IN = 1, NNEUT                                                       
         <* CS = TNEUT(4,IN);                                                   
            SN = TNEUT(5,IN);                                                   
            DX = X-TNEUT(1,IN);                                                 
            DY = Y-TNEUT(2,IN);                                                 
            D  = DX*SN - DY*CS;                                                 
            IF TBIT(MODE,28) <* ZDIFF = 0.0; *> ELSE                            
            <* ZDIFF = Z - TNEUT(3,IN) - ST * TNEUT(6,IN); *>                   
            ST = DX*CS + DY*SN;                                                 
            DXY2 = TNEUT(7,IN) + ST*ST*TNEUT(8,IN);                             
            DZ2  = TNEUT(9,IN) + ST*ST*TNEUT(10,IN);                            
            F0 = D/DXY2;                                                        
            F1 = ZDIFF/DZ2;                                                     
            CSUM = CSUM + D*F0 + ZDIFF*F1;                                      
            GX = GX + 2.0*F0 * (  SN - ST*F0 * CS )                             
                    - 2.0*F1*F1*ST*CS;                                          
            GY = GY + 2.0*F0 * ( -CS - ST*F0 * SN )                             
                    - 2.0*F1*F1*ST*SN;                                          
            GZ = GZ + 2.0*F1;                                                   
         *>                                                                     
      *>                                                                        
""                                                                              
      CHI2 = CSUM; GRX = GX; GRY = GY; GRZ = GZ;                                
      RETURN;                                                                   
      END;                                                                      
%%                                                                              
***HEADER*** MEMBER  VTXEE          SAVED BY F22KLE  ON 87/10/21  AT 13:19      
C   09/01/80 710211319  MEMBER NAME  VTXEE    (S)           FORTRAN     00000000
      SUBROUTINE VTXEE                                                  00000100
C*800604*DITTMANN********************************************           00000200
C*                                                          *           00000300
C*              X - Y - Z    E E   P A I R S                *           00000400
C*                                                          *           00000500
C*       A DESCRIPTION OF THE T AND V ARRAYS CAN BE FOUND   *           00000600
C*       IN SUBR. VERTEX                                    *           00000700
C*860612*KLEINWORT*******************************************           00000800
C*                                                          *           00000900
C*       MODIFIED TO BE USED WITH VTXC                      *           00001000
C*                                                          *           00001100
C************************************************************           00001200
      IMPLICIT INTEGER*2(H)                                             00001300
C                                                                       00001400
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00001500
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001600
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00001700
C                                                                       00001800
      IF(NT.LE.1) GOTO 100                                              00001900
C****                                                                   00002000
C****    LOOP OVER ALL TRACK PAIRS                                      00002100
      J1 = 0                                                            00002200
      ITEST = 0                                                         00002300
      NT1 = NT - 1                                                      00002400
      DO 9 I=1,NT1                                                      00002500
      IF(IT(J1+1).EQ.0) GOTO 9                                          00002600
      M = I + 1                                                         00002700
      J2 = I*ITDLEN                                                     00002800
      DO 28 K=M,NT                                                      00002900
      IPOINT = 1                                                        00003000
      IF(IT(J2+1).EQ.0) GOTO 28                                         00003100
C                                                                       00003200
      ITEST  = 1                                                        00003300
      IT1  = I                                                          00003400
      IT2  = K                                                          00003500
C        OPPOSITE CHARGE                                                00003600
      IF(T(J1+2)*T(J2+2).GT.0.) GOTO 8                                  00003700
C        MEASURED R-PHI OPENING                                         00003800
      ITEST  = 2                                                        00003900
      DPHI = T(J1+3) - T(J2+3)                                          00004000
      IF(T(J1+2).LT.0.) DPHI=-DPHI                                      00004100
      IF(ABS(DPHI).GT.3.141593) DPHI=DPHI-SIGN(1.,DPHI)*6.283185        00004200
      IF(DPHI.LT.EEDPMN .OR. DPHI.GT.EEDPMX) GOTO 8                     00004300
      ITANK = 0                                                         00004400
      IPOINT = 2                                                        00004500
      ITEST  = 6                                                        00004600
      XM1 = T(J1+5) - T(J1+2)*T(J1+21)                                  00004700
      YM1 = T(J1+6) + T(J1+2)*T(J1+22)                                  00004800
      XM2 = T(J2+5) - T(J2+2)*T(J2+21)                                  00004900
      YM2 = T(J2+6) + T(J2+2)*T(J2+22)                                  00005000
      ICFT1 = IT(J1+31)                                                 00005100
      ICFT2 = IT(J2+31)                                                 00005200
C        EXTRAPOLATION LENGTH                                           00005300
      IF(T(J1+18).EQ.0. .OR. T(J2+18).EQ.0.) GOTO 6                     00005400
      ITEST  = 7                                                        00005500
      IF(T(J1+18).LT.SEMAX .OR. T(J2+18).LT.SEMAX) GOTO 6               00005600
C        PAIR ORIGIN IN TANK (ADD SQRT(2/3)*COULOMB ERROR)              00005700
      ST1 = T(J1+18)                                                    00005800
      ST2 = T(J2+18)                                                    00005900
      CALL VTXS(J1,ST1,XT1,YT1,ZT1,DXT12,DYT12,DZT12,PHIT1,DPHIT1)      00006000
      CALL VTXS(J2,ST2,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT2,DPHIT2)      00006100
C        DISTANCE IN TANK                                               00006200
      DPHI = PHIT1 - PHIT2                                              00006300
      IF(T(J1+2).LT.0.) DPHI=-DPHI                                      00006400
      IF(ABS(DPHI).GT.3.141593) DPHI=DPHI-SIGN(1.,DPHI)*6.283185        00006500
      PTCFT2 =                                                          00006600
     &   (FLOAT(1-ICFT1)*T(J1+16)**2                                    00006700
     &   +FLOAT(1-ICFT2)*T(J2+16)**2) / 1.5                             00006800
      STCFT2 = 49. * PTCFT2                                             00006900
      PTANK2 = (T(J1+16)**2+T(J2+16)**2) / 1.5                          00007000
      STANK2 = 49. * PTANK2                                             00007100
      DX2 = (XT1-XT2)**2                                                00007200
      DY2 = (YT1-YT2)**2                                                00007300
      DXY = SQRT(DX2+DY2)                                               00007400
      DIST = SQRT((XT2-XM1)**2+(YT2-YM1)**2)                            00007500
      IF(DIST.LT.ABS(T(J1+2))) DXY=-DXY                                 00007600
      DZ = ABS(ZT1-ZT2)                                                 00007700
      DTH = ABS(T(J1+4)-T(J2+4))                                        00007800
      SDTH = DTH / SQRT(T(J1+9)**2+T(J2+9)**2+PTANK2)                   00007900
      ITEST  = 3                                                        00008000
      IF(SDTH.GT.EEDTMX) GOTO 6                                         00008100
      CTH = COS((T(J1+4)+T(J2+4))/2.)**2                                00008200
      SDZ = DZ / SQRT(DZT12+DZT22+STANK2/CTH**2)                        00008300
      ITEST  = 5                                                        00008400
      IF(SDZ.GT.EEDTMX) GOTO 5                                          00008500
      SDPHI = ABS(DPHI)/SQRT(DPHIT1**2+DPHIT2**2+PTCFT2)                00008600
      ITEST  = 2                                                        00008700
      IF(SDPHI.GT.EEDRMX) GOTO 5                                        00008800
      SDXY = ABS(DXY) / SQRT(1./(1./DXT12+1./DYT12)+                    00008900
     *                       1./(1./DXT22+1./DYT22)+STCFT2)             00009000
      ITEST  = 4                                                        00009100
      IF(SDXY.GT.EEDRMX .AND. (DXY.LT.0..OR.DXY.GT.EEXYMN)) GOTO 5      00009200
      ITANK = 1                                                         00009300
      GOTO 6                                                            00009400
C                                                                       00009500
    5 CONTINUE                                                          00009600
      IPOINT = 3                                                        00009700
      ITEST  = 6                                                        00009800
C        EXTRAPOLATION LENGTH                                           00009900
      IF(T(J1+19).EQ.0. .OR. T(J2+19).EQ.0.) GOTO 6                     00010000
      ITEST  = 7                                                        00010100
      IF(T(J1+19).LT.SEMAX .OR. T(J2+19).LT.SEMAX) GOTO 6               00010200
C        PAIR ORIGIN IN BEAMPIPE (ADD SQRT(2/3)*COULOMB ERROR)          00010300
      ST1 = T(J1+19)                                                    00010400
      ST2 = T(J2+19)                                                    00010500
      CALL VTXS(J1,ST1,XT1,YT1,ZT1,DXT12,DYT12,DZT12,PHIT1,DPHIT1)      00010600
      CALL VTXS(J2,ST2,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT2,DPHIT2)      00010700
C        DISTANCE IN BEAMPIPE                                           00010800
      DPHI = PHIT1 - PHIT2                                              00010900
      IF(T(J1+2).LT.0.) DPHI=-DPHI                                      00011000
      IF(ABS(DPHI).GT.3.141593) DPHI=DPHI-SIGN(1.,DPHI)*6.283185        00011100
      PTCFT2 =                                                          00011200
     &   (FLOAT(1-ICFT1)*T(J1+16)**2+T(J1+17)**2                        00011300
     &   +FLOAT(1-ICFT2)*T(J2+16)**2+T(J2+17)**2) / 1.5                 00011400
      STCFT2 = DRPIPE(DUM)**2 * (T(J1+17)**2+T(J2+17)**2) / 1.5         00011500
      PTANK2 = (T(J1+16)**2+T(J2+16)**2+T(J1+17)**2+T(J2+17)**2) / 1.5  00011600
      STANK2 = STCFT2                                                   00011700
      DX2 = (XT1-XT2)**2                                                00011800
      DY2 = (YT1-YT2)**2                                                00011900
      DXY = SQRT(DX2+DY2)                                               00012000
      DIST = SQRT((XT2-XM1)**2+(YT2-YM1)**2)                            00012100
      IF(DIST.LT.ABS(T(J1+2))) DXY=-DXY                                 00012200
      DZ = ABS(ZT1-ZT2)                                                 00012300
      CTH = COS((T(J1+4)+T(J2+4))/2.)**2                                00012400
      SDZ = DZ / SQRT(DZT12+DZT22+STANK2/CTH**2)                        00012500
      ITEST  = 5                                                        00012600
      IF(SDZ.GT.EEDTMX) GOTO 6                                          00012700
      SDPHI = ABS(DPHI)/SQRT(DPHIT1**2+DPHIT2**2+PTCFT2)                00012800
      ITEST  = 2                                                        00012900
      IF(SDPHI.GT.EEDRMX) GOTO 6                                        00013000
      SDXY = ABS(DXY) / SQRT(1./(1./DXT12+1./DYT12)+                    00013100
     *                       1./(1./DXT22+1./DYT22)+STCFT2)             00013200
      ITEST  = 4                                                        00013300
      IF(SDXY.GT.EEDRMX .AND. (DXY.LT.0..OR.DXY.GT.EEXYMN)) GOTO 6      00013400
      ITANK = 1                                                         00013500
C                                                                       00013600
    6 CONTINUE                                                          00013700
      IPOINT = 4                                                        00013800
      ITEST  = 4                                                        00013900
C        VERTEX WHERE TRACKS ARE PARALLEL                               00014000
      CALL VTXPNT                                                       00014100
     &   (J1,XM2,YM2,XT1,YT1,ZT1,DXT12,DYT12,DZT12,PHIT1,DPHIT1,ST1)    00014200
      CALL VTXPNT                                                       00014300
     &   (J2,XM1,YM1,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT2,DPHIT2,ST2)    00014400
      DX2 = (XT1-XT2)**2                                                00014500
      DY2 = (YT1-YT2)**2                                                00014600
      DXY = SQRT(DX2+DY2)                                               00014700
      DIST = SQRT((XT2-XM1)**2+(YT2-YM1)**2)                            00014800
      IF(DIST.LT.ABS(T(J1+2))) DXY=-DXY                                 00014900
      IF(ABS(DXY).GT.EEXYMX) GOTO 8                                     00015000
      DZ = ABS(ZT1-ZT2)                                                 00015100
      IF(ITANK.EQ.1) GOTO 7                                             00015200
C        PAIR ORIGIN IN CHAMBER                                         00015300
      IPOINT = 5                                                        00015400
      ITEST  = 7                                                        00015500
      IF(ST1.LT.SEMAX .OR. ST2.LT.SEMAX) GOTO 8                         00015600
      ITEST  = 8                                                        00015700
      IF(ST1.GT.SIMAX .OR. ST2.GT.SIMAX) GOTO 8                         00015800
      ITEST  = 9                                                        00015900
      IF(T(J1+18).NE.0. .AND. ST1-T(J1+18).LT.0.) GOTO 8                00016000
      IF(T(J2+18).NE.0. .AND. ST2-T(J2+18).LT.0.) GOTO 8                00016100
C        DISTANCE IN CHAMBER                                            00016200
      DTH = ABS(T(J1+4)-T(J2+4))                                        00016300
      SDTH = DTH / SQRT(T(J1+9)**2+T(J2+9)**2)                          00016400
      ITEST  = 3                                                        00016500
      IF(SDTH.GT.EEDTMX) GOTO 8                                         00016600
      SDZ = DZ / SQRT(DZT12+DZT22)                                      00016700
      ITEST  = 5                                                        00016800
      IF(SDZ.GT.EEDTMX) GOTO 8                                          00016900
      SDXY = ABS(DXY)/SQRT(1./(1./DXT12+1./DYT12)+1./(1./DXT22+         00017000
     *       1./DYT22))                                                 00017100
      ITEST  = 4                                                        00017200
      IF(SDXY.GT.EEDRMX .AND. (DXY.LT.0..OR.DXY.GT.EEXYMN)) GOTO 8      00017300
C                                                                       00017400
    7 ITEST = 0                                                         00017500
      IF(NV.EQ.20) GOTO 14                                              00017600
      NV = NV + 1                                                       00017700
      LV = (NV-1)*IVDLEN                                                00017800
      IV(LV+1) = 4                                                      00017900
      DT1 = SQRT(DXT12)                                                 00018000
      DT2 = SQRT(DXT22)                                                 00018100
      DXX2 = 1./(1./DT1+1./DT2)                                         00018200
      V(LV+2) = (XT1/DT1+XT2/DT2) * DXX2                                00018300
      DT1 = SQRT(DYT12)                                                 00018400
      DT2 = SQRT(DYT22)                                                 00018500
      DYY2 = 1./(1./DT1+1./DT2)                                         00018600
      V(LV+3) = (YT1/DT1+YT2/DT2) * DYY2                                00018700
      DT1 = SQRT(DZT12)                                                 00018800
      DT2 = SQRT(DZT22)                                                 00018900
      DZZ2 = 1./(1./DT1+1./DT2)                                         00019000
      V(LV+4) = (ZT1/DT1+ZT2/DT2) * DZZ2                                00019100
      V(LV+5) = SQRT(DXX2)                                              00019200
      V(LV+6) = SQRT(DYY2)                                              00019300
      V(LV+7) = SQRT(DZZ2)                                              00019400
      V(LV+8) = SQRT(DX2+DY2)                                           00019500
      V(LV+11) = 0.                                                     00019600
      V(LV+12) = 0.                                                     00019700
      V(LV+13) = 0.                                                     00019800
      IV(LV+9) = I                                                      00019900
      IV(LV+10) = K                                                     00020000
    8 CONTINUE                                                          00020100
C****                                                                   00020200
      IF (TBIT(MODE,25)) CALL VTXEER(IT1,IT2,IPOINT,ITEST)              00020300
C****L                                                                  00020400
   28 J2 = J2 + ITDLEN                                                  00020500
    9 J1 = J1 + ITDLEN                                                  00020600
      IF(NV.EQ.0) GOTO 100                                              00020700
   14 I = 1                                                             00020800
   15 LV1 = (I-1)*IVDLEN                                                00020900
      IF(I.EQ.NV) GOTO 19                                               00021000
      M = I + 1                                                         00021100
      LV2 = I*IVDLEN                                                    00021200
      DO 16 K=M,NV                                                      00021300
      IF ( IV(LV1+ 9).EQ.IV(LV2+ 9) .OR. IV(LV1+10).EQ.IV(LV2+ 9) .OR.  00021400
     *     IV(LV1+10).EQ.IV(LV2+10) ) GOTO 17                           00021500
   16 LV2 = LV2 + IVDLEN                                                00021600
      GOTO 19                                                           00021700
C        TWO PAIRS WITH SAME TRACK, TAKE PAIR WITH SMALLER DISTANCE     00021800
   17 M = I                                                             00021900
      IF(V(LV1+8).LT.V(LV2+8)) M=K                                      00022000
      NV = NV - 1                                                       00022100
      IF(M.GT.NV) GOTO 15                                               00022200
      DO 18 K=M,NV                                                      00022300
      LV2 = K*IVDLEN                                                    00022400
      LV1 = LV2 - IVDLEN                                                00022500
      DO 18 J=1,IVDLEN                                                  00022600
   18 V(LV1+J) = V(LV2+J)                                               00022700
      GOTO 15                                                           00022800
   19 J1 = (IV(LV1+9)-1)*ITDLEN                                         00022900
      J2 = (IV(LV1+10)-1)*ITDLEN                                        00023000
      V(LV1+9) = 0.                                                     00023100
      IV(LV1+8) = 2                                                     00023200
      IV(LV1+10) = 2                                                    00023300
      IT(J1+1) = 3                                                      00023400
      IT(J2+1) = 3                                                      00023500
      IT(J1+14) = I                                                     00023600
      IT(J2+14) = I                                                     00023700
      I = I + 1                                                         00023800
      IF(I.LE.NV) GOTO 15                                               00023900
C                                                                       00024000
  100 RETURN                                                            00024100
      END                                                               00024200
***HEADER*** MEMBER  VTXEER         SAVED BY F22KLE  ON 86/06/19  AT 13:00      
C   13/06/86 606191259  MEMBER NAME  VTXEER   (S)           FORTRAN     00000000
      SUBROUTINE VTXEER(IT1,IT2,IPOINT,ITEST)                           00000100
C*860529*KLEINWORT***************************************************   00000200
C*                                                                  *   00000300
C*   PRINT ERROR-TEXT FOR   V T X E E                               *   00000400
C*                                                                  *   00000500
C********************************************************************   00000600
C                                                                       00000700
      IMPLICIT INTEGER*2(H)                                             00000800
C                                                                       00000900
      %MACRO 'F11GOD.PATRECSR(CDATA)'                                   00001000
C                                                                       00001100
      REAL*8 DTEXT(14)                                                  00001200
C                                                                       00001300
      DATA DTEXT / 'PRETEST ', 'TANKWALL', 'BEAMPIPE', 'PAR.TEST',      00001400
                                                                        00001500
     & 'CHAMBER ', 'CHARGE  ', 'D(PHI)  ', 'D(THETA)', 'D(XY)   ',      00001600
     & 'D(Z)    ', 'INTRSECT', 'EXTRAP.S', 'INTERP.S', 'RADIUS  ' /     00001700
C                                                                       00001800
      IF (ITEST.EQ.0) GOTO 600                                          00001900
C                                                                       00002000
      IF ((IPOINT.LT.1).OR.(IPOINT.GT.5)) GOTO 500                      00002100
      IF ((ITEST.LT.0).OR.(ITEST.GT.9)) GOTO 500                        00002200
C                                                                       00002300
      WRITE(6,9000) DTEXT(IPOINT),DTEXT(ITEST+5),IT1,IT2                00002400
 9000 FORMAT(' VTXEE FAILED IN ',A8,' DUE TO INVALID ',A8,              00002500
     &' WITH TRACKS :',2I3)                                             00002600
C                                                                       00002700
      IH = IDATA(IBLN('HEAD'))                                          00002800
      IF (IH.LE.0) GOTO 600                                             00002900
C                                                                       00003000
      NRUN  = HDATA( 2*IH+ 10 )                                         00003100
      NREC  = HDATA( 2*IH+ 11 )                                         00003200
      WRITE(6,9010) NRUN,NREC                                           00003300
 9010 FORMAT(' RUN,REC : ',2I6)                                         00003400
C                                                                       00003500
      GOTO 600                                                          00003600
C                                                                       00003700
  500 CONTINUE                                                          00003800
      WRITE(6,9020) IPOINT,ITEST                                        00003900
 9020 FORMAT(' ??? STRANGE ENTRY TO VTXEER : ',2I5)                     00004000
C                                                                       00004100
  600 CONTINUE                                                          00004200
      RETURN                                                            00004300
      END                                                               00004400
***HEADER*** MEMBER  VTXEE9         SAVED BY F22KLE  ON 88/04/27  AT 13:27      
C   09/01/80 804271327  MEMBER NAME  VTXEE9   (S)           FORTRAN     00000000
      SUBROUTINE VTXEE9(RCUT)                                           00000100
C                                                                       00000200
C                                                                       00000300
C                   W A R N I N G !!!!                                  00000400
C                                                                       00000500
C     V(+9/10) CONTAINS NONSTANDARD INFORMATION                         00000600
C              ( = TRACKS NUMBERS FOR THE PAIR )                        00000700
C                                                                       00000800
C*800604*DITTMANN********************************************           00000900
C*                                                          *           00001000
C*              X - Y - Z    E E   P A I R S                *           00001100
C*                                                          *           00001200
C*       A DESCRIPTION OF THE T AND V ARRAYS CAN BE FOUND   *           00001300
C*       IN SUBR. VERTEX                                    *           00001400
C*860612*KLEINWORT*******************************************           00001500
C*                                                          *           00001600
C*       MODIFIED TO BE USED WITH VTXC                      *           00001700
C*                                                          *           00001800
C************************************************************           00001900
      IMPLICIT INTEGER*2(H)                                             00002000
C                                                                       00002100
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00002200
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00002300
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00002400
C                                                                       00002500
      IF(NT.LE.1) GOTO 100                                              00002600
C****                                                                   00002700
C****    LOOP OVER ALL TRACK PAIRS                                      00002800
      J1 = 0                                                            00002900
      ITEST = 0                                                         00003000
      NT1 = NT - 1                                                      00003100
      DO 9 I=1,NT1                                                      00003200
      IF(IT(J1+1).EQ.0) GOTO 9                                          00003300
      M = I + 1                                                         00003400
      J2 = I*ITDLEN                                                     00003500
      DO 28 K=M,NT                                                      00003600
      IPOINT = 1                                                        00003700
      IF(IT(J2+1).EQ.0) GOTO 8                                          00003800
C                                                                       00003900
      ITEST  = 1                                                        00004000
      IT1  = I                                                          00004100
      IT2  = K                                                          00004200
C        OPPOSITE CHARGE                                                00004300
      IF(T(J1+2)*T(J2+2).GT.0.) GOTO 8                                  00004400
C        MEASURED R-PHI OPENING                                         00004500
      ITEST  = 2                                                        00004600
      DPHI = T(J1+3) - T(J2+3)                                          00004700
      IF(T(J1+2).LT.0.) DPHI=-DPHI                                      00004800
      IF(ABS(DPHI).GT.3.141593) DPHI=DPHI-SIGN(1.,DPHI)*6.283185        00004900
      IF(DPHI.LT.EEDPMN .OR. DPHI.GT.EEDPMX) GOTO 8                     00005000
      ITANK = 0                                                         00005100
      IPOINT = 2                                                        00005200
      ITEST  = 6                                                        00005300
      XM1 = T(J1+5) - T(J1+2)*T(J1+21)                                  00005400
      YM1 = T(J1+6) + T(J1+2)*T(J1+22)                                  00005500
      XM2 = T(J2+5) - T(J2+2)*T(J2+21)                                  00005600
      YM2 = T(J2+6) + T(J2+2)*T(J2+22)                                  00005700
      ICFT1 = IT(J1+31)                                                 00005800
      ICFT2 = IT(J2+31)                                                 00005900
C        EXTRAPOLATION LENGTH                                           00006000
      IF(T(J1+18).EQ.0. .OR. T(J2+18).EQ.0.) GOTO 6                     00006100
      ITEST  = 7                                                        00006200
      IF(T(J1+18).LT.SEMAX .OR. T(J2+18).LT.SEMAX) GOTO 6               00006300
C        PAIR ORIGIN IN TANK (ADD SQRT(2/3)*COULOMB ERROR)              00006400
      ST1 = T(J1+18)                                                    00006500
      ST2 = T(J2+18)                                                    00006600
      CALL VTXS(J1,ST1,XT1,YT1,ZT1,DXT12,DYT12,DZT12,PHIT1,DPHIT1)      00006700
      CALL VTXS(J2,ST2,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT2,DPHIT2)      00006800
C        DISTANCE IN TANK                                               00006900
      DPHI = PHIT1 - PHIT2                                              00007000
      IF(T(J1+2).LT.0.) DPHI=-DPHI                                      00007100
      IF(ABS(DPHI).GT.3.141593) DPHI=DPHI-SIGN(1.,DPHI)*6.283185        00007200
      PTCFT2 =                                                          00007300
     &   (FLOAT(1-ICFT1)*T(J1+16)**2                                    00007400
     &   +FLOAT(1-ICFT2)*T(J2+16)**2) / 1.5                             00007500
      STCFT2 = 49. * PTCFT2                                             00007600
      PTANK2 = (T(J1+16)**2+T(J2+16)**2) / 1.5                          00007700
      STANK2 = 49. * PTANK2                                             00007800
      DX2 = (XT1-XT2)**2                                                00007900
      DY2 = (YT1-YT2)**2                                                00008000
      DXY = SQRT(DX2+DY2)                                               00008100
      DIST = SQRT((XT2-XM1)**2+(YT2-YM1)**2)                            00008200
      IF(DIST.LT.ABS(T(J1+2))) DXY=-DXY                                 00008300
      DZ = ABS(ZT1-ZT2)                                                 00008400
      DTH = ABS(T(J1+4)-T(J2+4))                                        00008500
      SDTH = DTH / SQRT(T(J1+9)**2+T(J2+9)**2+PTANK2)                   00008600
      ITEST  = 3                                                        00008700
      IF(SDTH.GT.EEDTMX) GOTO 6                                         00008800
      CTH = COS((T(J1+4)+T(J2+4))/2.)**2                                00008900
      SDZ = DZ / SQRT(DZT12+DZT22+STANK2/CTH**2)                        00009000
      ITEST  = 5                                                        00009100
      IF(SDZ.GT.EEDTMX) GOTO 5                                          00009200
      SDPHI = ABS(DPHI)/SQRT(DPHIT1**2+DPHIT2**2+PTCFT2)                00009300
      ITEST  = 2                                                        00009400
      IF(SDPHI.GT.EEDRMX) GOTO 5                                        00009500
      SDXY = ABS(DXY) / SQRT(1./(1./DXT12+1./DYT12)+                    00009600
     *                       1./(1./DXT22+1./DYT22)+STCFT2)             00009700
      ITEST  = 4                                                        00009800
      IF(SDXY.GT.EEDRMX .AND. (DXY.LT.0..OR.DXY.GT.EEXYMN)) GOTO 5      00009900
      ITANK = 1                                                         00010000
      GOTO 6                                                            00010100
C                                                                       00010200
    5 CONTINUE                                                          00010300
      IPOINT = 3                                                        00010400
      ITEST  = 6                                                        00010500
C        EXTRAPOLATION LENGTH                                           00010600
      IF(T(J1+19).EQ.0. .OR. T(J2+19).EQ.0.) GOTO 6                     00010700
      ITEST  = 7                                                        00010800
CCC NEW C.K. 21.10.87                                                   00010900
      SMX = SEMAX                                                       00011000
      IF ((ICFT1+ICFT2).EQ.1) SMX = SMX * 1.333                         00011100
      SMX1 = SMX                                                        00011200
      SMX2 = SMX                                                        00011300
      IF (ICFT1.EQ.1) SMX1 = SEMAX / 3.0                                00011400
      IF (ICFT2.EQ.1) SMX2 = SEMAX / 3.0                                00011500
CCC                                                                     00011600
      IF(T(J1+19).LT.SMX1 .OR. T(J2+19).LT.SMX2) GOTO 6                 00011700
C        PAIR ORIGIN IN BEAMPIPE (ADD SQRT(2/3)*COULOMB ERROR)          00011800
      ST1 = T(J1+19)                                                    00011900
      ST2 = T(J2+19)                                                    00012000
      CALL VTXS(J1,ST1,XT1,YT1,ZT1,DXT12,DYT12,DZT12,PHIT1,DPHIT1)      00012100
      CALL VTXS(J2,ST2,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT2,DPHIT2)      00012200
C        DISTANCE IN BEAMPIPE                                           00012300
      DPHI = PHIT1 - PHIT2                                              00012400
      IF(T(J1+2).LT.0.) DPHI=-DPHI                                      00012500
      IF(ABS(DPHI).GT.3.141593) DPHI=DPHI-SIGN(1.,DPHI)*6.283185        00012600
      PTCFT2 =                                                          00012700
     &   (FLOAT(1-ICFT1)*T(J1+16)**2+T(J1+17)**2                        00012800
     &   +FLOAT(1-ICFT2)*T(J2+16)**2+T(J2+17)**2) / 1.5                 00012900
      STCFT2 = DRPIPE(DUM)**2 * (T(J1+17)**2+T(J2+17)**2) / 1.5         00013000
      PTANK2 = (T(J1+16)**2+T(J2+16)**2+T(J1+17)**2+T(J2+17)**2) / 1.5  00013100
      STANK2 = STCFT2                                                   00013200
      DX2 = (XT1-XT2)**2                                                00013300
      DY2 = (YT1-YT2)**2                                                00013400
      DXY = SQRT(DX2+DY2)                                               00013500
      DIST = SQRT((XT2-XM1)**2+(YT2-YM1)**2)                            00013600
      IF(DIST.LT.ABS(T(J1+2))) DXY=-DXY                                 00013700
      DZ = ABS(ZT1-ZT2)                                                 00013800
      CTH = COS((T(J1+4)+T(J2+4))/2.)**2                                00013900
      SDZ = DZ / SQRT(DZT12+DZT22+STANK2/CTH**2)                        00014000
      ITEST  = 5                                                        00014100
      IF(SDZ.GT.EEDTMX) GOTO 6                                          00014200
      SDPHI = ABS(DPHI)/SQRT(DPHIT1**2+DPHIT2**2+PTCFT2)                00014300
      ITEST  = 2                                                        00014400
      IF(SDPHI.GT.EEDRMX) GOTO 6                                        00014500
      SDXY = ABS(DXY) / SQRT(1./(1./DXT12+1./DYT12)+                    00014600
     *                       1./(1./DXT22+1./DYT22)+STCFT2)             00014700
      ITEST  = 4                                                        00014800
      IF(SDXY.GT.EEDRMX .AND. (DXY.LT.0..OR.DXY.GT.EEXYMN)) GOTO 6      00014900
      ITANK = 2                                                         00015000
C                                                                       00015100
    6 CONTINUE                                                          00015200
      IPOINT = 4                                                        00015300
      ITEST  = 4                                                        00015400
C        VERTEX WHERE TRACKS ARE PARALLEL                               00015500
      CALL VTXPNT                                                       00015600
     &   (J1,XM2,YM2,XT1,YT1,ZT1,DXT12,DYT12,DZT12,PHIT1,DPHIT1,ST1)    00015700
      CALL VTXPNT                                                       00015800
     &   (J2,XM1,YM1,XT2,YT2,ZT2,DXT22,DYT22,DZT22,PHIT2,DPHIT2,ST2)    00015900
      DX2 = (XT1-XT2)**2                                                00016000
      DY2 = (YT1-YT2)**2                                                00016100
      DXY = SQRT(DX2+DY2)                                               00016200
      DIST = SQRT((XT2-XM1)**2+(YT2-YM1)**2)                            00016300
      IF(DIST.LT.ABS(T(J1+2))) DXY=-DXY                                 00016400
      IF(ABS(DXY).GT.EEXYMX) GOTO 8                                     00016500
      DZ = ABS(ZT1-ZT2)                                                 00016600
      IF(ITANK.GE.1) GOTO 7                                             00016700
C        PAIR ORIGIN IN CHAMBER                                         00016800
      IPOINT = 5                                                        00016900
      ITEST  = 7                                                        00017000
      IF(ST1.LT.SEMAX .OR. ST2.LT.SEMAX) GOTO 8                         00017100
      ITEST  = 8                                                        00017200
      IF(ST1.GT.SIMAX .OR. ST2.GT.SIMAX) GOTO 8                         00017300
      ITEST  = 9                                                        00017400
      IF(T(J1+18).NE.0. .AND. ST1-T(J1+18).LT.0.) GOTO 8                00017500
      IF(T(J2+18).NE.0. .AND. ST2-T(J2+18).LT.0.) GOTO 8                00017600
C        DISTANCE IN CHAMBER                                            00017700
      DTH = ABS(T(J1+4)-T(J2+4))                                        00017800
      SDTH = DTH / SQRT(T(J1+9)**2+T(J2+9)**2)                          00017900
      ITEST  = 3                                                        00018000
      IF(SDTH.GT.EEDTMX) GOTO 8                                         00018100
      SDZ = DZ / SQRT(DZT12+DZT22)                                      00018200
      ITEST  = 5                                                        00018300
      IF(SDZ.GT.EEDTMX) GOTO 8                                          00018400
      SDXY = ABS(DXY)/SQRT(1./(1./DXT12+1./DYT12)+1./(1./DXT22+         00018500
     *       1./DYT22))                                                 00018600
      ITEST  = 4                                                        00018700
      IF(SDXY.GT.EEDRMX .AND. (DXY.LT.0..OR.DXY.GT.EEXYMN)) GOTO 8      00018800
      SDPHI = 0.0                                                       00018900
C                                                                       00019000
    7 CONTINUE                                                          00019100
      DT1 = SQRT(DXT12)                                                 00019200
      DT2 = SQRT(DXT22)                                                 00019300
      DXX2 = 1./(1./DT1+1./DT2)                                         00019400
      XVEE = (XT1/DT1+XT2/DT2) * DXX2                                   00019500
      DT1 = SQRT(DYT12)                                                 00019600
      DT2 = SQRT(DYT22)                                                 00019700
      DYY2 = 1./(1./DT1+1./DT2)                                         00019800
      YVEE = (YT1/DT1+YT2/DT2) * DYY2                                   00019900
      ITEST = 0                                                         00020000
C CHECK CONVERSION RADIUS                                               00020100
      REE = SIGN(SQRT(XVEE**2+YVEE**2), XVEE*COS(PHIT1)+YVEE*SIN(PHIT1))00020200
      IF (REE.LT.RCUT) GOTO 8                                           00020300
C                                                                       00020400
      IF(NV.EQ.20) GOTO 14                                              00020500
      NV = NV + 1                                                       00020600
      LV = (NV-1)*IVDLEN                                                00020700
      V(LV+2) = XVEE                                                    00020800
      V(LV+3) = YVEE                                                    00020900
      IV(LV+1) = 4                                                      00021000
      DT1 = SQRT(DZT12)                                                 00021100
      DT2 = SQRT(DZT22)                                                 00021200
      DZZ2 = 1./(1./DT1+1./DT2)                                         00021300
      V(LV+4) = (ZT1/DT1+ZT2/DT2) * DZZ2                                00021400
      V(LV+5) = SQRT(DXX2)                                              00021500
      V(LV+6) = SQRT(DYY2)                                              00021600
      V(LV+7) = SQRT(DZZ2)                                              00021700
      V(LV+8) = SQRT(DX2+DY2)                                           00021800
      V(LV+11) = FLOAT(ITANK)                                           00021900
      V(LV+12) = SDPHI                                                  00022000
      V(LV+13) = SDXY                                                   00022100
      IV(LV+9) = I                                                      00022200
      IV(LV+10) = K                                                     00022300
    8 CONTINUE                                                          00022400
C****                                                                   00022500
      IF (TBIT(MODE,25)) CALL VTXEER(IT1,IT2,IPOINT,ITEST)              00022600
C****L                                                                  00022700
   28 J2 = J2 + ITDLEN                                                  00022800
    9 J1 = J1 + ITDLEN                                                  00022900
      IF(NV.EQ.0) GOTO 100                                              00023000
   14 I = 1                                                             00023100
   15 LV1 = (I-1)*IVDLEN                                                00023200
      IF(I.EQ.NV) GOTO 19                                               00023300
      M = I + 1                                                         00023400
      LV2 = I*IVDLEN                                                    00023500
      DO 16 K=M,NV                                                      00023600
      IF ( IV(LV1+ 9).EQ.IV(LV2+ 9) .OR. IV(LV1+10).EQ.IV(LV2+ 9) .OR.  00023700
     *     IV(LV1+10).EQ.IV(LV2+10) ) GOTO 17                           00023800
   16 LV2 = LV2 + IVDLEN                                                00023900
      GOTO 19                                                           00024000
C        TWO PAIRS WITH SAME TRACK, TAKE PAIR WITH SMALLER DISTANCE     00024100
   17 M = I                                                             00024200
      IF(V(LV1+8).LT.V(LV2+8)) M=K                                      00024300
      NV = NV - 1                                                       00024400
      IF(M.GT.NV) GOTO 15                                               00024500
      DO 18 K=M,NV                                                      00024600
      LV2 = K*IVDLEN                                                    00024700
      LV1 = LV2 - IVDLEN                                                00024800
      DO 18 J=1,IVDLEN                                                  00024900
   18 V(LV1+J) = V(LV2+J)                                               00025000
      GOTO 15                                                           00025100
   19 J1 = (IV(LV1+9)-1)*ITDLEN                                         00025200
      J2 = (IV(LV1+10)-1)*ITDLEN                                        00025300
CCC   V(LV1+9) = 0.                                                     00025400
      IV(LV1+8) = 2                                                     00025500
CCC   IV(LV1+10) = 2                                                    00025600
      IT(J1+1) = 3                                                      00025700
      IT(J2+1) = 3                                                      00025800
      IT(J1+14) = I                                                     00025900
      IT(J2+14) = I                                                     00026000
      I = I + 1                                                         00026100
      IF(I.LE.NV) GOTO 15                                               00026200
C                                                                       00026300
  100 RETURN                                                            00026400
      END                                                               00026500
***HEADER*** MEMBER  VTXERR         SAVED BY F22KLE  ON 86/06/11  AT 13:13      
C   27/05/86 605301230  MEMBER NAME  VTXERR   (S)           FORTRAN     00000000
      SUBROUTINE VTXERR(IERR)                                           00000100
C*860529*KLEINWORT***************************************************   00000200
C*                                                                  *   00000300
C*   PRINT ERROR-TEXT FOR   V E R T E X -FIT                        *   00000400
C*                                                                  *   00000500
C********************************************************************   00000600
      IMPLICIT INTEGER*2 (H)                                            00000700
%MACRO MVERTEX2                                                         00000800
C                                                                       00000900
      REAL*8 DTEXT(27)                                                  00001000
      DIMENSION NSTART(10)                                              00001100
C                                                                       00001200
      DATA NSTART / 1, 4, 5, 6, 8, 14, 19, 24, 25, 28 /                 00001300
      DATA DTEXT /                                                      00001400
     &'NV < 1 O','R NV > 2','0       ',                                 00001500
     &'NT  <= 0',                                                       00001600
     &'NTR <= 0',                                                       00001700
     &'DET = 0.','0       ',                                            00001800
     &'NTR < 2 ','AFTER RE','JECTING ','TRACK WI','TH DS/R ','> 90 DEG',00001900
     &'ERROR OF',' VERTEXC','OORDINAT','E(S) = 0','.0      ',           00002000
     &'NTR < 2 ','AFTER RE','JECTING ','BAD TRAC','K       ',           00002100
     &'NTR = 1 ',                                                       00002200
     &'COLLINEA','R 2-PRON','G       ' /                                00002300
C                                                                       00002400
      IF ((IERR.LT.1).OR.(IERR.GT.9)) GOTO 100                          00002500
C        IF (HVTXST(4+IERR).GT.0)                                       00002600
      N1 = NSTART(IERR)                                                 00002700
      N2 = NSTART(IERR+1)-1                                             00002800
      WRITE(6,9000) IERR,(DTEXT(K),K=N1,N2)                             00002900
 9000 FORMAT(' ERROR ',I2,' : ',10A8)                                   00003000
      GOTO 200                                                          00003100
C                                                                       00003200
  100 CONTINUE                                                          00003300
C                                                                       00003400
      WRITE(6,9010) IERR                                                00003500
 9010 FORMAT(' ERROR ',I6,' IS UNKNOWN ')                               00003600
C                                                                       00003700
  200 CONTINUE                                                          00003800
C                                                                       00003900
      RETURN                                                            00004000
      END                                                               00004100
***HEADER*** MEMBER  VTXFIT         SAVED BY F22KLE  ON 86/12/23  AT 10:44      
"   22/12/86 612231042  MEMBER NAME  VTXFIT   (S)           MORTRA34 "          
%MACRO 'F22KLE.JVTXC.S(MORTMAC)'                                                
REPLACE (*;ADD_CHI2((*ARB*),(*ARB*),(*ARB*))_TO(*FORTNAME*)(*ARB*);*)           
WITH                                                                            
(*;(*P4*)(*P5*)=(*P4*)(*P5*)+SNGL(DATA((*P3*),NVPP1)*(Q((*P1*),(*P2*),(*        
P4*),NVPP1,NP,(*P3*),DATA)-DATA((*P3*),NVP))**2);*)                             
""                                                                              
      SUBROUTINE VTXFIT(MITER,NVPP1,N,N2,NP,NFILL,DATA,                         
                        SIMP,STEP,MERR,ERR,MEAN,IFAIL);                         
      ABORTUSE(IFAIL);                                                          
"----------------------------------------------------------------------         
      VERSION OF 18.8.86               R.RAMCKE                                 
      THIS PROGRAM PERFORMS DATA-FITTING BY USING THE SIMPLEX-METHOD            
      FOR BETTER DISCRIPTION SEE ELSEWHERE                                      
      INPUT:  MITER   : MAX NO OF ITERATIONS.(>2)                               
              NVPP1   : VARIABLES + 1 (X,Y,DY)                                  
              N       : PARAMETERS + 1  N<10                                    
              N2      : N*N                                                     
              NP      : SIZE OF DATA-ARRAY                                      
              NFILL   : USED SIZE OF DATA-ARRAY <NP                             
              DATA    : DATA-ARRAY                                              
              STEP    : INITAL STEP-SIZE                                        
              SIMP    : (START) SIMPLEX                                         
              MERR    : MAX FRAC. ERROR                                         
      OUTPUT: ERR     : FRACTIONAL ERROR OF PARAMETERS                          
              MEAN    : MEAN-VALUE OF PARAMETERS                                
              IFAIL   : 0 O.K.                                                  
                      : < 0 ERROR LEADS TO TERMINATION OF PROGRAM               
                      : > 0 USED NO OF ITERATIONS                               
                                                                                
-----------------------------------------------------------------------         
"                                                                               
      REAL*8 Q;                                                                 
      REAL*8 DATA(NP,NVPP1);                                                    
      REAL*4 SIMP(N2),ERR(N),MERR(N),STEP(N),MEAN(N);                           
      REAL*4 P(10),QZ(10),ANEXT(10),CENTER(10);                                 
      INTEGER*4 H(11),L(11),IND(11);                                            
      INTEGER*2 HTRACE(200);                                                    
      LOGICAL DONE;                                                             
"                                      TRANSFORMATION COEFICIENTS"              
      DATA ALFA / 1.0 /,                                                        
           BETA / 0.5 /,                                                        
           GAMMA/ 2.0  /;                                                       
""                                                                              
      DATA ROOT2 / 1.414214 /;                                                  
""                                                                              
      ABORT(-1) IF N .LT. 2 .OR. N .GT. 10;                                     
      ABORT(-2) IF N2 .NE. N*N;                                                 
      ABORT(-3) IF (MITER .LE. 2) .OR. (MITER.GT.200);                          
      ABORT(-4) IF NVPP1 .LT. 2;                                                
      ABORT(-5) IF NP .LE. NVPP1+1;                                             
      IFAIL = 0;                                                                
      MINBIN = N;                                                               
"-                                     CHECK DATA ARRAY                         
      DO I = 1,NP                                                               
      <* OUTPUT I,DATA(I,1),DATA(I,2),DATA(I,3);                                
                (' I DATA: ',I5,3F10.4);                                        
      *>                                                                        
-"                                                                              
      M1 = 1;                                                                   
      M2 = NFILL;                                                               
      ABORT(-6) UNLESS M2 .GE. MINBIN;                                          
"                                      FILL INDEX - ARRAY"                      
      DO I = 1,N                                                                
      <* IND(I) = (I-1)*N; *>                                                   
"                                      NO OF VARABLES"                          
      NVP = NVPP1 - 1;                                                          
"                                      NO OF PARARMETERS"                       
      M = N - 1;                                                                
"                                      CALCULATE START RESIDUALS"               
      SIMP(N) = 0.0;                                                            
      DO I = M1,M2                                                              
      <* ADD_CHI2(N2,0,I)_TO SIMP(N);*>                                         
                                                                                
""                                                                              
      SN = SQRT(FLOAT(N));                                                      
      RM = FLOAT(M);                                                            
      DO I = 1,M                                                                
      <* P(I) = STEP(I)*(SN + RM - 1.0)/(RM*ROOT2);                             
         QZ(I) = STEP(I)*(SN - 1.0)/(RM*ROOT2);                                 
      *>                                                                        
"                                      BUILD FULL SIMPLEX FROM START"           
      DO I = 2,N                                                                
      <* II = IND(I);                                                           
         DO J = 1,M                                                             
         <* SIMP(II+J) = SIMP(J) + QZ(J); *>                                    
         SIMP(II+I-1)  = SIMP(I-1) + P(I-1);                                    
""                                                                              
         SIMP(II+N) = 0.0;                                                      
         DO K = M1,M2                                                           
         <* ADD_CHI2(N2,II,K)_TO SIMP(II+N); *>                                 
""                                                                              
      *>                                                                        
""                                                                              
      DO I = 1,N <* L(I) = 0; H(I) = 0; *>                                      
"                                      ORDER SIMPLEX"                           
      DO J = 1,N                                                                
      <* DO II = 1,N                                                            
         <* I = IND(II);                                                        
            IF SIMP(I+J) .LT. SIMP(L(J)+J)     <* L(J) = I; *>                  
            ELSEIF SIMP(I+J) .GT. SIMP(H(J)+J) <* H(J) = I; *>                  
         *>                                                                     
      *>                                                                        
""                                                                              
      NITER = 0;                                                                
      REVM = 1.0/FLOAT(M);                                                      
"                                      MAIN ITERATION LOOP"                     
      JUMP = 0;                                                                 
      LOOP                                                                      
      <*                                                                        
         DONE = .TRUE.;                                                         
         NITER = NITER + 1;                                                     
""                                                                              
         DO I = 1,N <* CENTER(I) = 0.0; *>                                      
""                                                                              
"        ---------------------------------------------                          
         CALCULATE  CENTER OF SIMPLEX, EXCLUDING WORST                          
         ---------------------------------------------"                         
""                                                                              
         DO II = 1,N                                                            
         <* I = IND(II);                                                        
            IF (I .EQ. H(N)) NEXT;                                              
            DO J = 1,M <* CENTER(J) = CENTER(J) + SIMP(I+J); *>                 
         *>                                                                     
""                                                                              
"        ---------------------------------------------                          
         CALCULATE  REFLECTION OF WORST :                                       
         ANEXT NOW REFLECTED VERTEX                                             
         ---------------------------------------------"                         
""                                                                              
         DO I = 1,M                                                             
         <* CENTER(I) = CENTER(I)*REVM;                                         
            ANEXT(I) = CENTER(I) + ALFA*(CENTER(I) - SIMP(H(N)+I));             
         *>                                                                     
""                                                                              
         ANEXT(N) = 0.0;                                                        
         DO K = M1,M2                                                           
         <* ADD_CHI2(11,0,K)_TO ANEXT(N); *>                                    
""                                                                              
         IF ANEXT(N) .LE. SIMP(L(N)+N)                                          
""                                                                              
"        ---------------------------------------------                          
         REFLECTED VERTEX BETTER THAN BEST                                      
         CALCULATE EXPANDED VERTEX                                              
         ---------------------------------------------"                         
""                                                                              
""                                                                              
         <* DO K = 1,N <* SIMP(H(N)+K) = ANEXT(K); *>                           
""                                                                              
            DO I = 1,M                                                          
            <* ANEXT(I) = GAMMA*(SIMP(H(N)+I) - CENTER(I)) + CENTER(I);         
            *>                                                                  
""                                                                              
            ANEXT(N) = 0.0;                                                     
            DO K = M1,M2                                                        
            <* ADD_CHI2(11,0,K)_TO ANEXT(N); *>                                 
""                                                                              
            JUMP = 1;                                                           
            IF ANEXT(N) .LE. SIMP(L(N)+N)                                       
""                                                                              
"           ---------------------------------------------                       
            REFLECTED VERTEX BETTER THAN BEST                                   
            CALCULATE EXPANDED VERTEX                                           
            ---------------------------------------------"                      
""                                                                              
            <* DO K = 1,N <* SIMP(H(N)+K) = ANEXT(K); *>                        
""                                                                              
               JUMP = 2;                                                        
            *>                                                                  
         *>                                                                     
         ELSE                                                                   
         <*                                                                     
            IF ANEXT(N) .LE. SIMP(H(N)+N)                                       
""                                                                              
            <* DO K = 1,N <* SIMP(H(N)+K) = ANEXT(K); *>                        
""                                                                              
               JUMP = 3;                                                        
            *>                                                                  
            ELSE                                                                
            <*                                                                  
               DO I = 1,M                                                       
               <* ANEXT(I) = BETA*(SIMP(H(N)+I)-CENTER(I)) + CENTER(I);         
               *>                                                               
""                                                                              
               ANEXT(N) = 0.0;                                                  
               DO K = M1,M2                                                     
               <* ADD_CHI2(11,0,K)_TO ANEXT(N); *>                              
""                                                                              
               IF ANEXT(N) .LE. SIMP(H(N)+N)                                    
""                                                                              
               <* DO K = 1,N <* SIMP(H(N)+K) = ANEXT(K); *>                     
""                                                                              
                  JUMP = 4;                                                     
               *>                                                               
               ELSE                                                             
               <*                                                               
                  DO II = 1,N                                                   
                  <* I = IND(II);                                               
                     DO J = 1,M                                                 
                     <* SIMP(I+J) = BETA*(SIMP(I+J) + SIMP(L(N)+J)); *>         
""                                                                              
                     SIMP(I+N) = 0.0;                                           
                     DO K = M1,M2                                               
                     <* ADD_CHI2(N2,I,K)_TO SIMP(I+N); *>                       
""                                                                              
                  *>                                                            
                  JUMP = 5;                                                     
""                                                                              
               *>                                                               
            *>                                                                  
         *>                                                                     
"                                      TRACE"                                   
         HTRACE(NITER) = JUMP;                                                  
"                                      ORDER SIMPLEX"                           
         DO J = 1,N                                                             
         <* DO II = 1,N                                                         
            <* I = IND(II);                                                     
               IF SIMP(I+J) .LT. SIMP(L(J)+J)     <* L(J) = I; *>               
               ELSEIF SIMP(I+J) .GT. SIMP(H(J)+J) <* H(J) = I; *>               
            *>                                                                  
         *>                                                                     
""                                                                              
         DO J = 1,M                                                             
         <* ERR(J) = ABS(SIMP(H(J)+J) - SIMP(L(J)+J));                          
            IF (ERR(J) .GT. MERR(J)) DONE = .FALSE.;                            
         *>                                                                     
         ERR(N) = ABS(SIMP(H(N)+N) - SIMP(L(N)+N));                             
""                                                                              
      *> WHILE .NOT. DONE .AND. NITER .LT. MITER;                               
""                                                                              
      IFAIL = NITER;                                                            
""                                                                              
      REVN = 1.0/FLOAT(N);                                                      
      DO J = 1,N                                                                
      <* MEAN(J) = 0.0;                                                         
         DO I = 1,N <* MEAN(J) = MEAN(J) + SIMP(IND(I)+J); *>                   
         MEAN(J) = MEAN(J)*REVN;                                                
      *>                                                                        
""                                                                              
      RETURN;                                                                   
      END;                                                                      
      REAL FUNCTION Q*8(N,I,A,NVPP1,NP,J,X);                                    
"-------------------------------------------------                              
      VERSION OF 18.8.86     R.RAMCKE                                           
      FUNCTION FOR VERTEX-FIT                                                   
                                                                                
 -------------------------------------------------                              
"                                                                               
      REAL*4  A(N);                                                             
      REAL*8  X(NP,NVPP1);                                                      
      Q = DSQRT((X(J,1)-DBLE(A(I+1)))**2 + (X(J,2)-DBLE(A(I+2)))**2);           
      RETURN;                                                                   
      END;                                                                      
%%                                                                              
***HEADER*** MEMBER  VTXINI         SAVED BY F22KLE  ON 88/08/02  AT 10:44      
C   04/07/79 808021044  MEMBER NAME  VTXINI   (S)        M  FORTRAN     00000100
      SUBROUTINE VTXINI                                                 00000200
C*800623*DITTMANN***************************************************    00000300
C*                                                                 *    00000400
C* I N I T I A L I S A T I O N   O F   X Y Z   V E R T E X   F I T *    00000500
C*                                                                 *    00000600
C*       TO BE CALLED ONCE AND BEFORE FIRST CALL TO VTXPRE, VERTEX *    00000700
C*                                                                 *    00000800
C*    MODIFIED FOR VERTEX CHAMBER HARDWARE     860211 C.K.         *    00000900
C*       ADDITIONAL CONSTANTS ARE TAKEN FROM COMMON /CGEOV/        *    00001000
C*       JADEBD MUST BE DECLARED AS EXTERNAL                       *    00001100
C*                                                                 *    00001200
C*    MODES AND STATISTICS                        860527 C.K.      *    00001300
C*                                                                 *    00001400
C*******************************************************************    00001500
      IMPLICIT INTEGER*2 (H)                                            00001600
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00001700
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00001800
C                                                                       00001900
      DATA NCALL / 0 /                                                  00002000
C                                                                       00002100
C     SET ITDLEN AND IVDLEN                                             00002200
C                                                                       00002300
      ITDLEN = 40                                                       00002400
      IVDLEN = 13                                                       00002500
C                                                                       00002600
C        RESET MODE AND CLEAR STATISTICS                                00002700
      MODE = 0                                                          00002800
      DO 10 I = 1, 140                                                  00002900
         HVTXST(I) = 0                                                  00003000
   10 CONTINUE                                                          00003100
C                                                                       00003200
C     SET MASS TO BE USED TO CALC BETA                                  00003300
      DFMASS = 0.0                                                      00003400
C                                                                       00003500
C        MEAN VERTEX COORDINATES                                        00003600
      XB = 0.                                                           00003700
      YB = 0.                                                           00003800
      ZB = 0.                                                           00003900
C        OUTER RADIUS OF INNER TANK WALL                                00004000
      RTANK = 174.                                                      00004100
C        OUTER DISTANCE BEAM PIPE TO TANK WALL                          00004200
      DTANK = 81.                                                       00004300
C        RADIATION LENGTH BETWEEN BEAM AND FIRST WIRE                   00004400
      X0INN = 0.1312                                                    00004500
C        MEAN TRACK RESIDUAL IN XY AND ZR PLANE                         00004600
      SIGX0 = 0.55                                                      00004700
      SIGZ0 = 30.                                                       00004800
C        ARTIFICIAL FACTOR TO ACCOUNT FOR SYSTEMATIC ERRORS             00004900
C        VARYING LIKE 1/P                                               00005000
      SFMUSC = 1.0                                                      00005100
C        ARTIFICIAL FACTOR TO ACCOUNT FOR SYSTEMATIC ERRORS             00005200
      SIGFAC = 1.0                                                      00005300
      SIGFCZ = 1.0                                                      00005400
C        MINIMUM NUMBER OF POINTS IN XY AND Z TRACK                     00005500
      PNTMIN = 5.                                                       00005600
C        MAXIMUM TRACK RESIDUAL IN XY AND Z (SIG<SIG1*SIGX0)            00005700
      SIG1 = 4.                                                         00005800
C        MAXIMUM DISTANCE OF TRACKS TO AVERAGE BEAM                     00005900
C        USED IN PRIMARY VERTEX SEARCH                                  00006000
      DISTB = 20.                                                       00006100
C        MAXIMUM OPENING ANGLE OF COLLINEAR 2-PRONGS                    00006200
      COLL2 = 0.999                                                     00006300
C        MAXIMUM NUMBER OF ITERATIONS IN VERTEX FIT                     00006400
      MITER = 12                                                        00006500
C        CONVERGENCE PARAMETER                                          00006600
      DSCONV = 0.05                                                     00006700
C        MINIMUM PROBABILITY FOR GOOD VERTEX                            00006800
      PRCUT = 0.001                                                     00006900
C        REJECT BAD TRACKS DURING VERTEX FIT (0=NO, 1=YES)              00007000
      IREJTR = 1                                                        00007100
C        EE PAIRS: MINIMUM AND MAXIMUM MEASURED PHI DIFFERENCE (RADIAN) 00007200
      EEDPMN = -0.07                                                    00007300
      EEDPMX =  0.8                                                     00007400
C        EE PAIRS: MAXIMUM THETA DIFFERENCE (STD.DEV.)                  00007500
      EEDTMX = 3.0                                                      00007600
C        EE PAIRS: MAXIMUM DISTANCE WHERE TRACKS ARE PARALLEL (STD.DEV.)00007700
      EEDRMX = 3.0                                                      00007800
C        EE PAIRS: MAXIMUM POSITIVE XY DISTANCE, NO ST.DEV. CUT (MM)    00007900
      EEXYMN = 4.0                                                      00008000
C        EE PAIRS: MAXIMUM XY DISTANCE WHERE TRACKS ARE PARALLEL (MM)   00008100
      EEXYMX = 20.                                                      00008200
C        MAXIMUM TRACK EXTRAPOLATION AND INTRAPOLATION(ARC LENGTH)      00008300
      SEMAX = -300.                                                     00008400
      SIMAX = 25.                                                       00008500
C        MAXIMUM TRACK EXTRAPOLATION (PHI)                              00008600
      PHEMAX = 1.0                                                      00008700
C        MAXIMUM TRACK DISTANCE TO VERTEX DURING FIT (STD.DEV.)         00008800
      SIG2 = 2.                                                         00008900
C        MAXIMUM TRACK DISTANCE TO VERTEX AFTER FIT (STD.DEV.)          00009000
      SIG3 = 4.                                                         00009100
C        SEC. VERTICES: MINIMUM COS OF TRACK TO MAIN VERTEX (OR XB,YB)  00009200
      CSECV = -0.15                                                     00009300
C                                                                       00009400
      SP0 = 50.                                                         00009500
      SP1 = 10.                                                         00009600
C                                                                       00009700
C PRINT NEWS                                                            00009800
C                                                                       00009900
      NCALL = NCALL + 1                                                 00010000
      IF (NCALL.EQ.1) WRITE(6,9000)                                     00010100
 9000 FORMAT(/                                                          00010200
     &' +--------------------------------------------------------+'/    00010300
     &' I  Dittmann/Kleinwort Vertex Finding Program called      I'/    00010400
     &' I ========= V e  r  s  i  o  n  02/08/1988 ==============I'/    00010500
     &' +--------------------------------------------------------+'/)   00010600
C                                                                       00010700
      RETURN                                                            00010800
      END                                                               00010900
***HEADER*** MEMBER  VTXPNT         SAVED BY F22HAG  ON 88/08/02  AT 10:30      
C   11/12/79 808021030  MEMBER NAME  VTXPNTC  (S)           FORTRAN     00000100
      SUBROUTINE VTXPNT(J,XP,YP,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT,ST)  00000200
C*800623*DITTMANN************************************************       00000300
C*                                                              *       00000400
C*     S U P P O R T   F O R   X Y Z   V E R T E X   F I T      *       00000500
C*                                                              *       00000600
C*860611*KLEINWORT***********************************************       00000700
C*                                                              *       00000800
C*  REWRITTEN FOR PROPER ERRORS AND USE WITH 'COMFIT'ED TRACKS  *       00000900
C*                                                              *       00001000
C*  - AS NEW PARAMETER DPHIT THE ERROR OF PHI IS CALCULATED     *       00001100
C*    ( WITHOUT MULTIPLE SCATTERING ! )                         *       00001200
C*    ( THIS IS DONE BY VTXDPM ! )                              *       00001300
C*                                                              *       00001400
C*    C.K. 870719 : DZ2 CORRECTED --> CI4                       *       00001500
C*    J.H. 880802 : ENTRY VTXIMC ADDED                                  00001600
C*                                                              *       00001700
C*       COMMON CWORK1 MUST BE FILLED PROPERLY                  *       00001800
C*                                                              *       00001900
C*       ENTRY: VTXS                                            *       00002000
C****************************************************************       00002100
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00002200
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00002300
C                                                                       00002400
      REAL*8 XM,YM,RR,PHI,SPHI,CPHI,SR                                  00002500
C        ENTRY VTXPNT                                                   00002600
C****    CALCULATE POINT XT,YT,ZT ON HELIX J WHICH IS NEAREST           00002700
C****    TO POINT XP,YP IN X-Y PROJECTION                               00002800
      IMPACT = 0                                                        00002900
      GOTO 10                                                           00003000
C****                                                                   00003100
      ENTRY VTXIMC(J,XS,YS,ZS,PHIS,RELSTR,XP,YP,                        00003200
     &             XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT,ST,EX,EY,AIMP)    00003300
      IMPACT = 1                                                        00003400
      FACSTR = 1.0/EXP(-RELSTR/ABS(T(J+24)))                            00003500
      RR = DBLE(T(J+2))*FACSTR                                          00003600
      XM = DBLE(XS) - RR*DSIN(DBLE(PHIS))                               00003700
      YM = DBLE(YS) + RR*DCOS(DBLE(PHIS))                               00003800
      PHIAC = PHIS                                                      00003900
      ZAC   = ZS                                                        00004000
      SAC   = T(J+18)                                                   00004100
      GOTO 20                                                           00004200
C                                                                       00004300
      ENTRY VTXIMP(J,XP,YP,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT,ST,       00004400
     &      EX,EY,AIMP)                                                 00004500
      IMPACT = 1                                                        00004600
   10 CONTINUE                                                          00004700
      RR = DBLE(T(J+2))                                                 00004800
      XM = DBLE(T(J+5)) - RR*DBLE(T(J+21))                              00004900
      YM = DBLE(T(J+6)) + RR*DBLE(T(J+22))                              00005000
      PHIAC = T(J+3)                                                    00005100
      ZAC   = T(J+7)                                                    00005200
      SAC   = 0.0                                                       00005300
   20 CONTINUE                                                          00005400
      SR = DBLE(SIGN(1.,T(J+2)))                                        00005500
      PHI = DATAN2(-SR*(XM-DBLE(XP)),SR*(YM-DBLE(YP)))                  00005600
      SPHI = DSIN(PHI)                                                  00005700
      CPHI = DCOS(PHI)                                                  00005800
      PHIT = SNGL(PHI)                                                  00005900
      PHI = PHI - DBLE(PHIAC)                                           00006000
      IF (DABS(PHI).GT.3.141593D0) PHI=PHI-DSIGN(1.D0,PHI)*6.283185D0   00006100
      ST = SNGL(RR*PHI)                                                 00006200
      XT = SNGL(XM + RR*SPHI)                                           00006300
      YT = SNGL(YM - RR*CPHI)                                           00006400
      ZT = ZAC + ST*T(J+23)                                             00006500
      SSPACE = ST + SAC                                                 00006600
      IF (IMPACT.NE.1) GOTO 100                                         00006700
      AIMP = SIGN( SQRT( (XT-XP)**2+(YT-YP)**2 )                        00006800
     &           , (XT-XP)*EX+(YT-YP)*EY )                              00006900
      GOTO 100                                                          00007000
C                                                                       00007100
C                                                                       00007200
         ENTRY VTXS(J,SJ,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT)            00007300
C****    CALCULATE POINT XT,YT,ZT ON HELIX J FOR A GIVEN                00007400
C****    PROJECTED ARC LENGTH SJ                                        00007500
      RR = DBLE(T(J+2))                                                 00007600
      PHI = DBLE(SJ) / RR + DBLE(T(J+3))                                00007700
      PHIT = SNGL(PHI)                                                  00007800
      SPHI = DSIN(PHI)                                                  00007900
      CPHI = DCOS(PHI)                                                  00008000
      XT = SNGL(DBLE(T(J+5)) + RR*(SPHI-DBLE(T(J+21))))                 00008100
      YT = SNGL(DBLE(T(J+6)) - RR*(CPHI-DBLE(T(J+22))))                 00008200
      ZT = T(J+7) + SJ*T(J+23)                                          00008300
      SSPACE = SJ                                                       00008400
C                                                                       00008500
C *** CALCULATION OF RPHI-ERRORS                                        00008600
C                                                                       00008700
  100 CONTINUE                                                          00008800
C                                                                       00008900
      SSCOUL = SSPACE - T(J+18)                                         00009000
      IF ((SSCOUL.GT.0.).OR.(T(J+18).GT.0.)) SSCOUL=0.                  00009100
      SSCVXC = SSPACE - T(J+19)                                         00009200
      IF(SSCVXC.GT.0.) SSCVXC=0.                                        00009300
C                                                                       00009400
      X = SSPACE - 0.5*T(J+20)                                          00009500
C                                      ERROR IN XY (SQUARED)            00009600
C                                                                       00009700
C                                      MULTIPLE SCATTERRING ( TANKWALL )00009800
      DXY = ( T(J+16) * SSCOUL )**2 +                                   00009900
C                                      MULTIPLE SCATTERRING ( BEAMPIPE )00010000
     &      ( T(J+17) * SSCVXC )**2 +                                   00010100
C                                      PARABOLA FIT                     00010200
     &      ((( T(J+32)   *X + T(J+33) ) *X +                           00010300
     &          T(J+34) ) *X + T(J+35) ) *X + T(J+36)                   00010400
C                                                                       00010500
C                                      ERROR IN PHI (NOT SQUARED)       00010600
C                                                                       00010700
C                                      NO MULTIPLE SCATTERRING          00010800
C                                      PARABOLA FIT                     00010900
      XX = 2.0 * X                                                      00011000
      DPHIT = ( T(J+32) *XX + T(J+33) ) *XX + T(J+40)                   00011100
CCC   IF (DPHIT.GE.0.) DPHIT = SQRT( DPHIT )                            00011200
      DPHIT = SQRT( DPHIT )                                             00011300
C                                                                       00011400
      DXYLIM = 1. / (2.*ABS(T(J+2))*SQRT(ABS(DXY)))                     00011500
      DXT2 = SNGL(SPHI**2) / DXY                                        00011600
      DYT2 = SNGL(CPHI**2) / DXY                                        00011700
      IF(ABS(DXT2).LT.DXYLIM) DXT2=DXYLIM                               00011800
      IF(ABS(DYT2).LT.DXYLIM) DYT2=DXYLIM                               00011900
      DXT2 = 1. / DXT2                                                  00012000
      DYT2 = 1. / DYT2                                                  00012100
C                                                                       00012200
C *** CALCULATION OF ZS-ERRORS                                          00012300
C                                                                       00012400
      SSCOUL = SSPACE - T(J+18)                                         00012500
      IF(SSCOUL.GT.0.) SSCOUL=0.                                        00012600
      SSCVXC = SSPACE - T(J+19)                                         00012700
      IF(SSCVXC.GT.0.) SSCVXC=0.                                        00012800
C                                                                       00012900
      SSPACE = SSPACE + T(J+39)                                         00013000
C                                                                       00013100
      X = SSPACE/T(J+38) - 0.5                                          00013200
C                                      1/COS(TH)**4                     00013300
      CI4 = ( 1.0 + T(JT+23)**2 )**2                                    00013400
C                                      MULTIPLE SCATTERRING             00013500
      DZT2 = ( ( T(J+16) * SSCOUL )**2 + ( T(J+17) * SSCVXC )**2 ) * CI400013600
C                                      LINE FIT (WITH TRIPLETS)         00013700
     &       + T(J+37) * ( 1.5 + 18.*X**2 )                             00013800
C                                                                       00013900
      RETURN                                                            00014000
C                                                                       00014100
      END                                                               00014200
C                                                                       00014300
      SUBROUTINE VTXDPM(J,SS,DPHI0,DPHIMS)                              00014400
C                                                                       00014500
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00014600
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00014700
C *** CORRECT ERROR OF PHI FOR MULT. SCATTERING                         00014800
      SSCOUL = SS - T(J+18)                                             00014900
      SSCVXC = SS - T(J+19)                                             00015000
      DPHMS2 = 0.                                                       00015100
      IF ((SSCOUL.LT.0.).AND.(T(J+18).LT.0.)) DPHMS2 = T(J+16)**2       00015200
      IF (SSCVXC.LT.0.) DPHMS2 = DPHMS2 + T(J+17)**2                    00015300
      DPHIMS = SQRT( DPHI0**2 + DPHMS2 )                                00015400
      RETURN                                                            00015500
      END                                                               00015600
C                                                                       00015700
      SUBROUTINE VTXDTM(J,SS,DTH0,DTHMS)                                00015800
C                                                                       00015900
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00016000
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00016100
C *** CORRECT ERROR OF THETA FOR MULT. SCATTERING                       00016200
      SSCOUL = SS + T(J+39) - T(J+18)                                   00016300
      SSCVXC = SS + T(J+39) - T(J+19)                                   00016400
      DTHMS2 = 0.0                                                      00016500
      IF (SSCOUL.LT.0.) DTHMS2 = T(J+16)**2                             00016600
      IF (SSCVXC.LT.0.) DTHMS2 = DTHMS2 + T(J+17)**2                    00016700
      DTHMS = SQRT( DTH0**2 + DTHMS2 )                                  00016800
      RETURN                                                            00016900
      END                                                               00017000
***HEADER*** MEMBER  VTXPNT0        SAVED BY F22KLE  ON 87/07/18  AT 19:10      
C   11/12/79 707181910  MEMBER NAME  VTXPNT   (S)           FORTRAN     00000000
      SUBROUTINE VTXPNT(J,XP,YP,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT,ST)  00000100
C*800623*DITTMANN************************************************       00000200
C*                                                              *       00000300
C*     S U P P O R T   F O R   X Y Z   V E R T E X   F I T      *       00000400
C*                                                              *       00000500
C*860611*KLEINWORT***********************************************       00000600
C*                                                              *       00000700
C*  REWRITTEN FOR PROPER ERRORS AND USE WITH 'COMFIT'ED TRACKS  *       00000800
C*                                                              *       00000900
C*  - AS NEW PARAMETER DPHIT THE ERROR OF PHI IS CALCULATED     *       00001000
C*    ( WITHOUT MULTIPLE SCATTERING ! )                         *       00001100
C*    ( THIS IS DONE BY VTXDPM ! )                              *       00001200
C*                                                              *       00001300
C*    C.K. 870719 : DZ2 CORRECTED --> CI4                       *       00001400
C*                                                              *       00001500
C*       COMMON CWORK1 MUST BE FILLED PROPERLY                  *       00001600
C*                                                              *       00001700
C*       ENTRY: VTXS                                            *       00001800
C****************************************************************       00001900
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00002000
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00002100
C                                                                       00002200
      REAL*8 XM,YM,RR,PHI,SPHI,CPHI,SR                                  00002300
C        ENTRY VTXPNT                                                   00002400
C****    CALCULATE POINT XT,YT,ZT ON HELIX J WHICH IS NEAREST           00002500
C****    TO POINT XP,YP IN X-Y PROJECTION                               00002600
      IMPACT = 0                                                        00002700
      GOTO 10                                                           00002800
C****                                                                   00002900
      ENTRY VTXIMP(J,XP,YP,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT,ST,       00003000
     &      EX,EY,AIMP)                                                 00003100
      IMPACT = 1                                                        00003200
   10 CONTINUE                                                          00003300
      RR = DBLE(T(J+2))                                                 00003400
      XM = DBLE(T(J+5)) - RR*DBLE(T(J+21))                              00003500
      YM = DBLE(T(J+6)) + RR*DBLE(T(J+22))                              00003600
      SR = DBLE(SIGN(1.,T(J+2)))                                        00003700
      PHI = DATAN2(-SR*(XM-DBLE(XP)),SR*(YM-DBLE(YP)))                  00003800
      SPHI = DSIN(PHI)                                                  00003900
      CPHI = DCOS(PHI)                                                  00004000
      PHIT = SNGL(PHI)                                                  00004100
      PHI = PHI - DBLE(T(J+3))                                          00004200
      IF (DABS(PHI).GT.3.141593D0) PHI=PHI-DSIGN(1.D0,PHI)*6.283185D0   00004300
      ST = SNGL(RR*PHI)                                                 00004400
      XT = SNGL(XM + RR*SPHI)                                           00004500
      YT = SNGL(YM - RR*CPHI)                                           00004600
      ZT = T(J+7) + ST*T(J+23)                                          00004700
      SSPACE = ST                                                       00004800
      IF (IMPACT.NE.1) GOTO 100                                         00004900
      AIMP = SIGN( SQRT( (XT-XP)**2+(YT-YP)**2 )                        00005000
     &           , (XT-XP)*EX+(YT-YP)*EY )                              00005100
      GOTO 100                                                          00005200
C                                                                       00005300
C                                                                       00005400
         ENTRY VTXS(J,SJ,XT,YT,ZT,DXT2,DYT2,DZT2,PHIT,DPHIT)            00005500
C****    CALCULATE POINT XT,YT,ZT ON HELIX J FOR A GIVEN                00005600
C****    PROJECTED ARC LENGTH SJ                                        00005700
      RR = DBLE(T(J+2))                                                 00005800
      PHI = DBLE(SJ) / RR + DBLE(T(J+3))                                00005900
      PHIT = SNGL(PHI)                                                  00006000
      SPHI = DSIN(PHI)                                                  00006100
      CPHI = DCOS(PHI)                                                  00006200
      XT = SNGL(DBLE(T(J+5)) + RR*(SPHI-DBLE(T(J+21))))                 00006300
      YT = SNGL(DBLE(T(J+6)) - RR*(CPHI-DBLE(T(J+22))))                 00006400
      ZT = T(J+7) + SJ*T(J+23)                                          00006500
      SSPACE = SJ                                                       00006600
C                                                                       00006700
C *** CALCULATION OF RPHI-ERRORS                                        00006800
C                                                                       00006900
  100 CONTINUE                                                          00007000
C                                                                       00007100
      SSCOUL = SSPACE - T(J+18)                                         00007200
      IF ((SSCOUL.GT.0.).OR.(T(J+18).GT.0.)) SSCOUL=0.                  00007300
      SSCVXC = SSPACE - T(J+19)                                         00007400
      IF(SSCVXC.GT.0.) SSCVXC=0.                                        00007500
C                                                                       00007600
      X = SSPACE - 0.5*T(J+20)                                          00007700
C                                      ERROR IN XY (SQUARED)            00007800
C                                                                       00007900
C                                      MULTIPLE SCATTERRING ( TANKWALL )00008000
      DXY = ( T(J+16) * SSCOUL )**2 +                                   00008100
C                                      MULTIPLE SCATTERRING ( BEAMPIPE )00008200
     &      ( T(J+17) * SSCVXC )**2 +                                   00008300
C                                      PARABOLA FIT                     00008400
     &      ((( T(J+32)   *X + T(J+33) ) *X +                           00008500
     &          T(J+34) ) *X + T(J+35) ) *X + T(J+36)                   00008600
C                                                                       00008700
C                                      ERROR IN PHI (NOT SQUARED)       00008800
C                                                                       00008900
C                                      NO MULTIPLE SCATTERRING          00009000
C                                      PARABOLA FIT                     00009100
      XX = 2.0 * X                                                      00009200
      DPHIT = ( T(J+32) *XX + T(J+33) ) *XX + T(J+40)                   00009300
CCC   IF (DPHIT.GE.0.) DPHIT = SQRT( DPHIT )                            00009400
      DPHIT = SQRT( DPHIT )                                             00009500
C                                                                       00009600
      DXYLIM = 1. / (2.*ABS(T(J+2))*SQRT(ABS(DXY)))                     00009700
      DXT2 = SNGL(SPHI**2) / DXY                                        00009800
      DYT2 = SNGL(CPHI**2) / DXY                                        00009900
      IF(ABS(DXT2).LT.DXYLIM) DXT2=DXYLIM                               00010000
      IF(ABS(DYT2).LT.DXYLIM) DYT2=DXYLIM                               00010100
      DXT2 = 1. / DXT2                                                  00010200
      DYT2 = 1. / DYT2                                                  00010300
C                                                                       00010400
C *** CALCULATION OF ZS-ERRORS                                          00010500
C                                                                       00010600
      SSCOUL = SSPACE - T(J+18)                                         00010700
      IF(SSCOUL.GT.0.) SSCOUL=0.                                        00010800
      SSCVXC = SSPACE - T(J+19)                                         00010900
      IF(SSCVXC.GT.0.) SSCVXC=0.                                        00011000
C                                                                       00011100
      SSPACE = SSPACE + T(J+39)                                         00011200
C                                                                       00011300
      X = SSPACE/T(J+38) - 0.5                                          00011400
C                                      1/COS(TH)**4                     00011500
      CI4 = ( 1.0 + T(JT+23)**2 )**2                                    00011600
C                                      MULTIPLE SCATTERRING             00011700
      DZT2 = ( ( T(J+16) * SSCOUL )**2 + ( T(J+17) * SSCVXC )**2 ) * CI400011800
C                                      LINE FIT (WITH TRIPLETS)         00011900
     &       + T(J+37) * ( 1.5 + 18.*X**2 )                             00012000
C                                                                       00012100
      RETURN                                                            00012200
C                                                                       00012300
      END                                                               00012400
C                                                                       00012500
      SUBROUTINE VTXDPM(J,SS,DPHI0,DPHIMS)                              00012600
C                                                                       00012700
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00012800
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00012900
C *** CORRECT ERROR OF PHI FOR MULT. SCATTERING                         00013000
      SSCOUL = SS - T(J+18)                                             00013100
      SSCVXC = SS - T(J+19)                                             00013200
      DPHMS2 = 0.                                                       00013300
      IF ((SSCOUL.LT.0.).AND.(T(J+18).LT.0.)) DPHMS2 = T(J+16)**2       00013400
      IF (SSCVXC.LT.0.) DPHMS2 = DPHMS2 + T(J+17)**2                    00013500
      DPHIMS = SQRT( DPHI0**2 + DPHMS2 )                                00013600
      RETURN                                                            00013700
      END                                                               00013800
C                                                                       00013900
      SUBROUTINE VTXDTM(J,SS,DTH0,DTHMS)                                00014000
C                                                                       00014100
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00014200
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00014300
C *** CORRECT ERROR OF THETA FOR MULT. SCATTERING                       00014400
      SSCOUL = SS + T(J+39) - T(J+18)                                   00014500
      SSCVXC = SS + T(J+39) - T(J+19)                                   00014600
      DTHMS2 = 0.0                                                      00014700
      IF (SSCOUL.LT.0.) DTHMS2 = T(J+16)**2                             00014800
      IF (SSCVXC.LT.0.) DTHMS2 = DTHMS2 + T(J+17)**2                    00014900
      DTHMS = SQRT( DTH0**2 + DTHMS2 )                                  00015000
      RETURN                                                            00015100
      END                                                               00015200
***HEADER*** MEMBER  VTXPRE         SAVED BY F22HAG  ON 88/05/24  AT 18:18      
C   04/07/79 805241807  MEMBER NAME  VTXPRE   (S)           FORTRAN     00000000
      SUBROUTINE VTXPRE(IH,IP)                                          00000100
C*800623*DITTMANN***************************************************    00000200
C*                                                                 *    00000300
C*   P R E P A R A T I O N   F O R   X Y Z   V E R T E X   F I T   *    00000400
C*                                                                 *    00000500
C*       IH = POINTER TO 'HEAD' BANK                               *    00000600
C*       IP = POINTER TO 'PATR' BANK (AS IN JADE COMP NOTE 12).    *    00000700
C*                                                                 *    00000800
C*       VTXPRE COPIES ALL TRACKS INTO /CWORK1/, FLAGS TRACKS WHICH*    00000900
C*       SHOULD NOT BE USED IN VERTEX FIT, AND ADDS COULOMB        *    00001000
C*       SCATTERING ERRORS IN MATERIAL BEFORE FIRST WIRE.          *    00001100
C*       FOR DETAILS OF THE T-ARRAY SEE COMMENT IN SUBR. VERTEX.   *    00001200
C*                                                                 *    00001300
C*       SUBR. VTXINI MUST BE CALLED BEFORE FIRST CALL TO VTXPRE   *    00001400
C*                                                                 *    00001500
C*    MODIFIED FOR VERTEX CHAMBER HARDWARE     860211 C.K.         *    00001600
C*                                                                 *    00001700
C*    MODIFIED COMFIT-ERROR OF SCATTERING-ANGLE   860217 C.K.      *    00001800
C*                                                                 *    00001900
C*    +++ BIG MODIFICATION +++                    860611 C.K.      *    00002000
C*                                                                 *    00002100
C*    * FOR EACH TRACK NOW 40 INSTEAD OF 30 WORDS IN T()           *    00002200
C*                                                                 *    00002300
C*    * FITS IN RPHI AND ZS ARE TREATED INDEPENDENT                *    00002400
C*      ( DIFFERENT FIRST POINT, MULT. SCATTERING POSSIBLE,        *    00002500
C*        THIS IS NECCESSARY FOR 'COMFIT'TED TRACKS         )      *    00002600
C*                                                                 *    00002700
C*    +++ END MODIFICATION +++                                     *    00002800
C*                                                                 *    00002900
C*    - CURVATURE-CORRECTION                                       *    00003000
C*    - RECALCULATION OF FIRST MEASURED POINT FOR TYP 2 TRACKS     *    00003100
C*                                                                 *    00003200
C*    ... COVARIANCES FOR ERROR CALCULATION ...   860714 C.K.      *    00003300
C*                                                                 *    00003400
C*    ... CALCULATE BETA FROM DFMASS        ...   870626 C.K.      *    00003500
C*                                                                 *    00003600
C*******************************************************************    00003700
C                                                                       00003800
C   MAGNETIC FIELD CORRECTION   16.8.1982     J.OLSSON                  00003900
C   MAGNETIC FIELD RECORRECTION  83/08/04     R.G.GLASSER               00004000
C                                                                       00004100
C*******************************************************************    00004200
      IMPLICIT INTEGER*2 (H)                                            00004300
%MACRO CDATA                                                            00004400
C                                                                       00004500
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00004600
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00004700
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00004800
      REAL*8 AA,BB,CC,DD,EE,RR,DR,DR1M                                  00004900
      REAL*8 PHI,SPHI,CPHI,XD,YD,PARCOR,DSR,DPHI                        00005000
      REAL H03                                                          00005100
C                  DEFAULT VALUES                                       00005200
      DATA LFIELD,LRUN/-4848,-1/                                        00005300
C                                                                       00005400
C                                                                       00005500
      NT = 0                                                            00005600
      IF(IH.EQ.0) RETURN                                                00005700
      IH2 = 2*IH                                                        00005800
      NRUN = HDATA(IH2+10)                                              00005900
      NVAV = HDATA(IH2+18)                                              00006000
C                                                                       00006100
C---- LOCATE RUN-VERTEX IF NEEDED                                       00006200
C                                                                       00006300
      IF (TBIT(MODE,31)) CALL VTXCRW(NRUN,RVX,RVY,RVDX,RVDY)            00006400
C     NOTE THIS CODING FIXES UP ONLY VERY LOW FIELDS                    00006500
         IFIELD = HDATA(IH2+30)                                         00006600
         IF(IABS(IFIELD).GT.100) GO TO 5408                             00006700
C    RESET MAGNETIC FIELD FOR PERIOD WHEN READ OUT SET IT TO 0          00006800
      IF(NRUN.EQ.11908) HDATA(IH2+30) = -4848                           00006900
      IF(NRUN.GE.12255.AND.NRUN.LE.12270) HDATA(IH2+30) = -4847         00007000
      IF(NRUN.GE.13651.AND.NRUN.LE.13653) HDATA(IH2+30) = -4844         00007100
         IFIELD = HDATA(IH2+30)                                         00007200
         IF(IABS(IFIELD).GT.100) GO TO 5408                             00007300
      IF (NRUN .NE. LRUN)  WRITE(6,5407) NRUN,IFIELD,LFIELD             00007400
5407  FORMAT(' * VTXPRE #### *   WARNING: RUN ',I6,' HAS MAGNETIC FIELD 00007500
     $ = ',I6,' GAUSS - USING ',I6)                                     00007600
      HDATA(IH2+30)=LFIELD                                              00007700
         IFIELD = HDATA(IH2+30)                                         00007800
      LRUN=NRUN                                                         00007900
5408  H03 = 0.299792E-4 * ABS(FLOAT(IFIELD))                            00008000
      IF(IP.EQ.0) RETURN                                                00008100
      NT = IDATA(IP+2)                                                  00008200
      IF(NT.LE.0) RETURN                                                00008300
      IF(NT.GT.50) NT=50                                                00008400
      L0 = IDATA(IP+1)                                                  00008500
      LT = IDATA(IP+3)                                                  00008600
C                                                                       00008700
      SIGF2 = SIGFAC**2                                                 00008800
C                                                                       00008900
      KT = IP + L0                                                      00009000
      JT = 0                                                            00009100
      DO 19 I=1,NT                                                      00009200
      DO 11 J=1,ITDLEN                                                  00009300
   11 IT(JT+J) = 0                                                      00009400
      IPFLAG = IDATA(KT+44)                                             00009500
C        MOST OF THE FOLLOWING TRACK REJECT CRITERIA ARE DUE            00009600
C        TO FAULTS IN THE PATR BANK                                     00009700
      IF(ADATA(KT+25).EQ.0.) GOTO 18                                    00009800
      PT = SQRT(ADATA(KT+8)**2+ADATA(KT+9)**2)                          00009900
      IF(PT.EQ.0.) GOTO 18                                              00010000
      IF(ADATA(KT+10).EQ.0.) GOTO 18                                    00010100
CCC   T(JT+2) = -1. / ADATA(KT+25)                                      00010200
      RR = -1.D0 / PARCOR(KT)                                           00010300
      T(JT+2) = SNGL(RR)                                                00010400
      T(JT+3) = ATAN2(ADATA(KT+9),ADATA(KT+8))                          00010500
      TTH = ADATA(KT+10) / PT                                           00010600
      CTH = 1. / SQRT(1.+TTH**2)                                        00010700
      T(JT+4) = ATAN(TTH)                                               00010800
      T(JT+5) = ADATA(KT+5)                                             00010900
      T(JT+6) = ADATA(KT+6)                                             00011000
      T(JT+7) = ADATA(KT+7)                                             00011100
      SR = SIGN(1.,T(JT+2))                                             00011200
      DSR = DBLE(SR)                                                    00011300
      ITYP = IDATA(KT+18)                                               00011400
      XP0  = ADATA(KT+20)                                               00011500
      YP0  = ADATA(KT+21)                                               00011600
C                                                                       00011700
C *** RECALCULATION OF FIRST MEASURED POINT WITH CORRECTED CURVATURE    00011800
C                                                                       00011900
      IF (ITYP.NE.2) GOTO 111                                           00012000
      XD = DBLE(XP0)                                                    00012100
      YD = DBLE(YP0)                                                    00012200
      SPHI = DSIN(DBLE(ADATA(KT+19)))                                   00012300
      CPHI = DCOS(DBLE(ADATA(KT+19)))                                   00012400
      AA = XD - RR*SPHI                                                 00012500
      BB = YD + RR*CPHI                                                 00012600
      DPHI = DATAN2( DSR*(DBLE(T(JT+5))-AA), DSR*(BB-DBLE(T(JT+6))) )   00012700
      XD = XD + RR*(DSIN(DPHI)-SPHI)                                    00012800
      YD = YD - RR*(DCOS(DPHI)-CPHI)                                    00012900
      T(JT+3) = SNGL(DPHI)                                              00013000
      T(JT+5) = SNGL(XD)                                                00013100
      T(JT+6) = SNGL(YD)                                                00013200
C                                                                       00013300
C     CHANGE TO TYP 1 ?                                                 00013400
C                                                                       00013500
      IF (ABS(T(JT+2)).GT.20000.) GOTO 111                              00013600
      IF (.NOT.TBIT(MODE,26)) GOTO 111                                  00013700
C                                                                       00013800
C     LIST OF CHANGED ITEMS IN PATR BANK                                00013900
C                                                                       00014000
      ADATA(KT+5) = T(JT+5)                                             00014100
      ADATA(KT+6) = T(JT+6)                                             00014200
      ADATA(KT+8) = COS(T(JT+3)) * PT                                   00014300
      ADATA(KT+9) = SIN(T(JT+3)) * PT                                   00014400
      IDATA(KT+18) = 1                                                  00014500
      ADATA(KT+19) = 1./ABS(T(JT+2))                                    00014600
      ADATA(KT+20) = SNGL( DSQRT(AA*AA+BB*BB) - DABS(RR) )              00014700
      ADATA(KT+21) = SNGL( DATAN2( BB, AA ) )                           00014800
      ADATA(KT+22) = 0.                                                 00014900
      ADATA(KT+25) = -1./T(JT+2)                                        00015000
C                                                                       00015100
  111 CONTINUE                                                          00015200
C                                                                       00015300
      SIGX = ADATA(KT+23)                                               00015400
      SIGZ = ADATA(KT+32)                                               00015500
C----     THIS CLUDGE SHOULD SOMEHOW ACCOUNT FOR SYSTEMATIC ERRORS      00015600
      SIGX = SIGX * SIGFAC                                              00015700
      SIGZ = SIGZ * SIGFCZ                                              00015800
C----                                                                   00015900
      XNPT = IDATA(KT+24)                                               00016000
      ZNPT = IDATA(KT+33)                                               00016100
C        CHECK RESIDUAL                                                 00016200
      IF(SIGX.EQ.0..OR.SIGZ.EQ.0.) GOTO 18                              00016300
      IF(SIGX.GT.SIG1*SIGX0*SIGFAC) GOTO 18                             00016400
      IF(SIGZ.GT.SIG1*SIGZ0*SIGFCZ) GOTO 18                             00016500
C        CHECK NUMBER OF POINTS ON TRACK                                00016600
      IF(XNPT.LT.PNTMIN .OR. ZNPT.LT.PNTMIN) GOTO 18                    00016700
CCC   PROJL = ABS((ADATA(KT+14)-ADATA(KT+7))/TTH)                       00016800
      PROJL = SQRT( (ADATA(KT+12)-ADATA(KT+5))**2 +                     00016900
     &              (ADATA(KT+13)-ADATA(KT+6))**2 )                     00017000
      IF(PROJL.LT.1.) GOTO 18                                           00017100
      SXNPT = SQRT(XNPT)                                                00017200
      SZNPT = SQRT(ZNPT)                                                00017300
      T(JT+8) = SIGX * 14./(PROJL*SXNPT)                                00017400
      T(JT+9) = SIGZ * 4.24*CTH**2/(PROJL*SZNPT)                        00017500
      T(JT+10) = SIGX * 3. / SXNPT                                      00017600
      T(JT+11) = T(JT+10)                                               00017700
      T(JT+12) = SIGZ * 2.45 / SZNPT                                    00017800
C *** FOR NEW ERROR-CALCULATION                                         00017900
C     RPHI DEFAULT COVARIANCES ( FROM ID WITH 48 WIRES )                00018000
      SIG2N    = SIGX*SIGX/XNPT                                         00018100
      T(JT+20) = PROJL                                                  00018200
      T(JT+32) = 154.0*SIG2N/PROJL**4                                   00018300
      T(JT+33) =   0.0                                                  00018400
      T(JT+34) = -19.6*SIG2N/PROJL**2                                   00018500
      T(JT+35) =   0.0                                                  00018600
      T(JT+36) =  2.45*SIG2N                                            00018700
      T(JT+40) =  10.7*SIG2N/PROJL**2                                   00018800
C     ZS PARAMETERS                                                     00018900
C *** NO TRIPLETT-ZS-FIT FOR MC AND REAL ???                            00019000
      T(JT+37) = SIGZ*SIGZ/ZNPT / 1.5                                   00019100
      T(JT+38) = PROJL                                                  00019200
C     TRUE COVARIANCES FROM COMFIT                                      00019300
      ITCODE = IDATA(KT+2)                                              00019400
C     FOR OLD COMFIT BANKS                                              00019500
      IF (ITCODE.EQ.301) ITCODE = 4096                                  00019600
      IF ((LT.LT.64).OR.(.NOT.(TBIT(ITCODE,19).OR.(TBIT(ITCODE,15))))   00019700
     &              .OR.(IDATA(KT+44).NE.3))                            00019800
     &   GOTO 139                                                       00019900
C                                                                       00020000
      IF (ADATA(KT+52).EQ.0.0) GOTO 139                                 00020100
      T(JT+32) = ADATA(KT+52)*SIGF2                                     00020200
      T(JT+33) = ADATA(KT+53)*SIGF2                                     00020300
      T(JT+34) = ADATA(KT+54)*SIGF2                                     00020400
      T(JT+35) = ADATA(KT+55)*SIGF2                                     00020500
      T(JT+36) = ADATA(KT+56)*SIGF2                                     00020600
      T(JT+40) = ADATA(KT+57)*SIGF2                                     00020700
  139 CONTINUE                                                          00020800
C ***                                                                   00020900
      IT(JT+13) = IDATA(KT+24)                                          00021000
      T(JT+15) = 0.                                                     00021100
      T(JT+21) = SIN(T(JT+3))                                           00021200
      T(JT+22) = COS(T(JT+3))                                           00021300
      T(JT+23) = TTH                                                    00021400
      T(JT+24) = CTH                                                    00021500
      IT(JT+1) = 2                                                      00021600
      IF(IPFLAG.EQ.2) GOTO 14                                           00021700
C----   THIS CLUDGE CORRECTS AN ERROR IN THE PATR BANK                  00021800
      AA = -DBLE(T(JT+5)) + RR*DBLE(T(JT+21))                           00021900
      BB = -DBLE(T(JT+6)) - RR*DBLE(T(JT+22))                           00022000
      IF(ITYP.EQ.2) AA=AA+DBLE(XP0)                                     00022100
      IF(ITYP.EQ.2) BB=BB+DBLE(YP0)                                     00022200
      DR1M = DSQRT(AA**2+BB**2)                                         00022300
      DR = DR1M - DABS(RR)                                              00022400
      IF(ITYP.NE.2) DR=DR-DBLE(ADATA(KT+20))                            00022500
      T(JT+5) = T(JT+5) + DR*AA/DR1M                                    00022600
      T(JT+6) = T(JT+6) + DR*BB/DR1M                                    00022700
      T(JT+7) = ADATA(KT+31) + ADATA(KT+30)*SQRT(T(JT+5)**2+T(JT+6)**2) 00022800
C----                                                                   00022900
C                                                                       00023000
   14 XM = T(JT+5) - T(JT+2)*T(JT+21)                                   00023100
      YM = T(JT+6) + T(JT+2)*T(JT+22)                                   00023200
C                                                                       00023300
C---- START ITERATION AT RUNVERTEX ?                                    00023400
C                                                                       00023500
      IF (TBIT(MODE,31)) T(JT+15) =                                     00023600
     &      ( ATAN2( SR*(RVX - XM), SR*(YM - RVY) )                     00023700
     &      - T(JT+3) ) * T(JT+2)                                       00023800
C                                                                       00023900
C---- MC WITHOUT MULTIPLE SCATTERING ?                                  00024000
C                                                                       00024100
      X0VX = XFWVXC(IH)                                                 00024200
      X0ID = XFWID(IH) - X0VX                                           00024300
      IF (NRUN.GT.100) GOTO 149                                         00024400
      IF (NVAV.NE.-1)  GOTO 149                                         00024500
         X0ID = 0.                                                      00024600
         X0VX = 0.                                                      00024700
  149 CONTINUE                                                          00024800
C                                                                       00024900
      PT = H03*T(JT+2)                                                  00025000
C                                                                       00025100
C     INTERSECT WITH INNER TANKWALL                                     00025200
C                                                                       00025300
      AA = XM                                                           00025400
      BB = YM                                                           00025500
      AA = AA**2 + BB**2                                                00025600
      BB = T(JT+2)                                                      00025700
      BB = BB**2                                                        00025800
      CC = RTANK**2                                                     00025900
      DD = (AA-BB+CC)/2.D0                                              00026000
      EE = AA*CC - DD**2                                                00026100
C        ANY INTERSECT ?                                                00026200
      IF(EE.LE.0.D0) GOTO 17                                            00026300
      EE = DSQRT(EE)                                                    00026400
      XT1 = (XM*DD + YM*EE) / AA                                        00026500
      YT1 = (YM*DD - XM*EE) / AA                                        00026600
      XT2 = (XM*DD - YM*EE) / AA                                        00026700
      YT2 = (YM*DD + XM*EE) / AA                                        00026800
      D1 = SQRT((XT1-T(JT+5))**2+(YT1-T(JT+6))**2)                      00026900
      D2 = SQRT((XT2-T(JT+5))**2+(YT2-T(JT+6))**2)                      00027000
      IF(D1.LT.D2) GOTO 16                                              00027100
      XT = XT2                                                          00027200
      YT = YT2                                                          00027300
      XT2 = XT1                                                         00027400
      YT2 = YT1                                                         00027500
      XT1 = XT                                                          00027600
      YT1 = YT                                                          00027700
   16 PHI = ATAN2(-SR*(XM-XT1),SR*(YM-YT1))                             00027800
      THETA = PHI - T(JT+3)                                             00027900
      IF(ABS(THETA).GT.3.141593) THETA=THETA-SIGN(1.,THETA)*6.283185    00028000
      T(JT+27) = T(JT+2)*THETA                                          00028100
      T(JT+18) = T(JT+27)                                               00028200
      PHI = ATAN2(-SR*(XM-XT2),SR*(YM-YT2))                             00028300
      THETA = PHI - T(JT+3)                                             00028400
      IF(ABS(THETA).GT.3.141593) THETA=THETA-SIGN(1.,THETA)*6.283185    00028500
      T(JT+26) = T(JT+2)*THETA                                          00028600
C        MULT. SCATTERING IN INNER TANK WALL (AND VTXC)                 00028700
      BETA = 1.                                                         00028800
      IF (DFMASS.GT.0.) BETA = PT / SQRT( PT**2 + DFMASS**2 )           00028900
      TH2 = 0.                                                          00029000
      IF (X0ID.GT.0.) TH2 = (14.1/(PT*BETA))**2 * X0ID * T(JT+24)       00029100
     &      * ( 1. + 1./9. * ALOG10( X0ID / T(JT+24) ) )**2             00029200
      T(JT+16) = SQRT(TH2)*SFMUSC                                       00029300
   17 CONTINUE                                                          00029400
C                                                                       00029500
C     INTERSECT WITH BEAMPIPE                                           00029600
C                                                                       00029700
      CC = (RBPIPE(DUM)+DRPIPE(DUM))**2                                 00029800
      DD = (AA-BB+CC)/2.D0                                              00029900
      EE = AA*CC - DD**2                                                00030000
C        ANY INTERSECT ?                                                00030100
      IF(EE.LE.0.D0) GOTO 172                                           00030200
      EE = DSQRT(EE)                                                    00030300
      XT1 = (XM*DD + YM*EE) / AA                                        00030400
      YT1 = (YM*DD - XM*EE) / AA                                        00030500
      XT2 = (XM*DD - YM*EE) / AA                                        00030600
      YT2 = (YM*DD + XM*EE) / AA                                        00030700
      D1 = SQRT((XT1-T(JT+5))**2+(YT1-T(JT+6))**2)                      00030800
      D2 = SQRT((XT2-T(JT+5))**2+(YT2-T(JT+6))**2)                      00030900
      IF(D1.LT.D2) GOTO 171                                             00031000
      XT = XT2                                                          00031100
      YT = YT2                                                          00031200
      XT2 = XT1                                                         00031300
      YT2 = YT1                                                         00031400
      XT1 = XT                                                          00031500
      YT1 = YT                                                          00031600
  171 PHI = ATAN2(-SR*(XM-XT1),SR*(YM-YT1))                             00031700
      THETA = PHI - T(JT+3)                                             00031800
      IF(ABS(THETA).GT.3.141593) THETA=THETA-SIGN(1.,THETA)*6.283185    00031900
      T(JT+19) = T(JT+2)*THETA                                          00032000
C        MULT. SCATTERING IN BEAMPIPE                                   00032100
      TH2VX = 0.                                                        00032200
      IF (X0VX.GT.0.) TH2VX = (14.1/(PT*BETA))**2 * X0VX * T(JT+24)     00032300
     &      * ( 1. + 1./9. * ALOG10( X0VX / T(JT+24) ) )**2             00032400
      T(JT+17) = SQRT(TH2VX)*SFMUSC                                     00032500
  172 CONTINUE                                                          00032600
C                                                                       00032700
C---- TRACK WITH VTXC ?                                                 00032800
C                                                                       00032900
      R1 = SQRT(T(JT+5)**2+T(JT+6)**2)                                  00033000
      IT(JT+31) = 0                                                     00033100
      T(JT+39) = 0.                                                     00033200
      IF (R1.GE.RTANK) GOTO 18                                          00033300
      IT(JT+31) = 1                                                     00033400
C     DISTANCE 1. WIRE VTXC TO 1. WIRE ID                               00033500
      DS = 120.                                                         00033600
      IF ((IDATA(KT+44).NE.1).AND.(IDATA(KT+44).NE.3)) GOTO 175         00033700
C     GET PROJ. TRACKLENGTH FROM ZS-FIT                                 00033800
      PROJLZ = ABS((ADATA(KT+45)-ADATA(KT+46))/TTH)                     00033900
      DS = T(JT+38) - PROJLZ                                            00034000
C                                                                       00034100
  175 CONTINUE                                                          00034200
      T(JT+38) = T(JT+38) - DS                                          00034300
      T(JT+39) = -DS                                                    00034400
C                                                                       00034500
   18 JT = JT + ITDLEN                                                  00034600
   19 KT = KT + LT                                                      00034700
C                                                                       00034800
C                                                                       00034900
      RETURN                                                            00035000
      END                                                               00035100
***HEADER*** MEMBER  VTXSMP         SAVED BY F22KLE  ON 88/04/27  AT 14:54      
C   21/12/86 804271454  MEMBER NAME  VTXSMP   (S)           FORTRAN     00000000
      SUBROUTINE VTXSMP(NPAT,IERR)                                      00000100
C----------------------------------------------------------             00000200
C     VERSION OF 21.12.86                   R.RAMCKE                    00000300
C     MAIN PROGRAM FOR VERTEX-FIT                                       00000400
C     INPUT :  NPAT = NO OF PATR-BANK                                   00000500
C                                                                       00000600
C     OUTPUT:                                                           00000700
C                                                                       00000800
C----------------------------------------------------------             00000900
C                                                                       00001000
      IMPLICIT INTEGER*2 (H)                                            00001100
C                                                                       00001200
%MACRO CDATA                                                            00001300
%MACRO 'F22KLE.JVTXC.S(MTRINF)'                                         00001400
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00001500
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001600
%MACRO 'F22KLE.VERTEX.S(MVERTEX2)'                                      00001700
C                                      COMMON FOR SIMPLX FIT            00001800
      REAL*8 DATA(30,4)                                                 00001900
      REAL*4 SIMP(9),STEP(3),MERR(3),ERR(3),MEAN(3)                     00002000
C                                      COMMON FOR VERTEX-FIT"           00002100
C                                      COMMON FOR VTXAF2"               00002200
      COMMON / CVRTX1 / TT(2000)                                        00002300
      DIMENSION ITT(2000)                                               00002400
      EQUIVALENCE (TT(1),ITT(1))                                        00002500
      DIMENSION TINF(100,4),VRES(120,9)                                 00002600
      COMMON /CKOPP / HKOPP(100)                                        00002700
C                                                                       00002800
      REAL*8 RR,XM,YM                                                   00002900
C                                                                       00003000
      NVPP1 = 4                                                         00003100
      N = NVPP1 - 1                                                     00003200
      N2 = N**2                                                         00003300
      NP = 30                                                           00003400
C                                                                       00003500
      NRUN = HKOPP(10)                                                  00003600
      CALL CLOC(IPAT,'PATR',NPAT)                                       00003700
      IERR = - 1                                                        00003800
      IF(IPAT .LE. 0) RETURN                                            00003900
C                                                                       00004000
      NUSE = 0                                                          00004100
      JJ = -ITDLEN                                                      00004200
      DO 100 I = 1,NT                                                   00004300
         JJ = JJ + ITDLEN                                               00004400
         IF(IT(JJ+1) .NE. 2) GOTO 100                                   00004500
         RR = DBLE(T(JJ+2))                                             00004600
         XM = DBLE(T(JJ+5)) - RR*DBLE(T(JJ+21))                         00004700
         YM = DBLE(T(JJ+6)) + RR*DBLE(T(JJ+22))                         00004800
C                                                                       00004900
         IF(NUSE .GE. 30) GOTO 100                                      00005000
         NUSE = NUSE + 1                                                00005100
         DATA(NUSE,1) = XM                                              00005200
         DATA(NUSE,2) = YM                                              00005300
         DATA(NUSE,3) = DABS(RR)                                        00005400
         CALL RVTXER(IPAT,I,DXY,ICDE)                                   00005500
         IF(ICDE .EQ. 0) GOTO 60                                        00005600
C                                                                       00005700
            WRITE(6,789) HKOPP(11),I,ICDE                               00005800
 789        FORMAT(' EVT SPUR,FERRXY -CODE: ',I5,2I3)                   00005900
C                                                                       00006000
            NUSE = NUSE - 1                                             00006100
            GOTO 100                                                    00006200
  60     CONTINUE                                                       00006300
C                                                                       00006400
         DATA(NUSE,4) = DBLE(1./DXY**2)                                 00006500
         WRITE(6,792) HKOPP(11),I,(DATA(NUSE,KJ),KJ=1,3),DXY            00006600
 792     FORMAT(' EVT SPUR,DATA: ',I5,I3,' ',4G14.4)                    00006700
C                                                                       00006800
 100  CONTINUE                                                          00006900
C                                                                       00007000
      IERR = -2                                                         00007100
      IF(NUSE .LT. 2) RETURN                                            00007200
C                                                                       00007300
      CALL VTXCRW( NRUN, XO, YO ,XDX, YDY)                              00007400
C                                                                       00007500
      SIMP(1) = XO                                                      00007600
      SIMP(2) = YO                                                      00007700
      STEP(1) = 5.0                                                     00007800
      STEP(2) = 5.0                                                     00007900
      MERR(1) = 1.0E-03                                                 00008000
      MERR(2) = 1.0E-03                                                 00008100
      MERR(3) = 1.0E-03                                                 00008200
C                                                                       00008300
      IERR = 0                                                          00008400
      CALL VTXFIT(200,NVPP1,N,N2,NP,NUSE,DATA,                          00008500
     *                SIMP,STEP,MERR,ERR,MEAN,IFAIL)                    00008600
C                                                                       00008700
      WRITE(6,790) NRUN,HKOPP(11),NUSE,IFAIL,MEAN(1),MEAN(2),ERR(1)     00008800
     *             ,ERR(2),ERR(3)                                       00008900
 790  FORMAT(/' RUN,EVT: ',2I5,'  NUSE,IFAIL: ',2I4,/,                  00009000
     *        ' XV,YV: ',2F9.3,'   ERRORS: ',3F10.4)                    00009100
C                                                                       00009200
      RETURN                                                            00009300
      END                                                               00009400
***HEADER*** MEMBER  VTXSRC         SAVED BY F22KLE  ON 86/12/16  AT 11:27      
C   07/11/79 612161125  MEMBER NAME  VTXSRC   (S)           FORTRAN     00000000
      SUBROUTINE VTXSRC                                                 00000100
C*800623*DITTMANN********************************************           00000200
C*                                                          *           00000300
C*        X - Y - Z    V E R T E X    S E A R C H           *           00000400
C*                                                          *           00000500
C*       1. SEARCH FOR E+E- PAIRS                           *           00000600
C*       2. SEARCH FOR MAIN VERTEX AROUND AVERAGE BEAM      *           00000700
C*       3. SEARCH FOR SECONDARY VERTICES                   *           00000800
C*                                                          *           00000900
C*       A DESCRIPTION OF THE T AND V ARRAYS CAN BE FOUND   *           00001000
C*       IN SUBR. VERTEX                                    *           00001100
C************************************************************           00001200
C                                                                       00001300
%MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                      00001400
%MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                      00001500
C                                                                       00001600
      DIMENSION IV2(20,20)                                              00001700
      EQUIVALENCE (V2(1,1),IV2(1,1))                                    00001800
C                                                                       00001900
      LOGICAL VREP,RESTOR                                               00002000
C                                                                       00002100
      NV = 0                                                            00002200
      IF(NT.LE.0) RETURN                                                00002300
      IPRVTX = 0                                                        00002400
C****                                                                   00002500
C****    SEARCH FOR GAMMA CONVERSIONS                                   00002600
      CALL VTXEE                                                        00002700
      IF(NV.EQ.0) GOTO 5                                                00002800
      LV = 0                                                            00002900
      DO 4 I=1,NV                                                       00003000
      J = 0                                                             00003100
      DO 3 K=1,NT                                                       00003200
      IF(IT(J+14).EQ.I) IT(J+1)=-IT(J+1)                                00003300
    3 J = J + ITDLEN                                                    00003400
    4 LV = LV + IVDLEN                                                  00003500
C****                                                                   00003600
C****    SEARCH FOR PRIMARY VERTEX AROUND AVERAGE BEAM                  00003700
    5 NTGOD = 0                                                         00003800
      NTBAD = 0                                                         00003900
      J = 0                                                             00004000
      DO 7 I=1,NT                                                       00004100
      IF(IT(J+1).LE.0) GOTO 7                                           00004200
      CALL VTXPNT(J,XB,YB,XT,YT,ZT,DXT2,DYT2,DZT2,PHI,DPHI,SS)          00004300
      DXY = SQRT((XT-XB)**2+(YT-YB)**2)                                 00004400
      IF(DXY.GT.DISTB) GOTO 6                                           00004500
      IF(SS.LT.SEMAX-RTANK) GOTO 6                                      00004600
      NTGOD = NTGOD + 1                                                 00004700
      JTGOD(NTGOD) = J                                                  00004800
      GOTO 7                                                            00004900
    6 IT(J+1) = 1                                                       00005000
      NTBAD = NTBAD + 1                                                 00005100
      JTBAD(NTBAD) = J                                                  00005200
    7 J = J + ITDLEN                                                    00005300
      IF(NTGOD.EQ.0) GOTO 39                                            00005400
      IF(NV.EQ.20) GOTO 90                                              00005500
      NV = NV + 1                                                       00005600
      LV = (NV-1)*IVDLEN                                                00005700
      VREP = .FALSE.                                                    00005800
      RESTOR = .FALSE.                                                  00005900
C****                                                                   00006000
C****    VERTEX FIT                                                     00006100
   10 CALL VERTEX                                                       00006200
      IF(IV(LV+1).GE.1) GOTO 20                                         00006300
      IF(VREP) GOTO 60                                                  00006400
      GOTO 40                                                           00006500
C****                                                                   00006600
C****    CHECK VERTEX AND ITS TRACKS                                    00006700
   20 NTBAD = 0                                                         00006800
      NTBAD3 = 0                                                        00006900
      NTGOD = 0                                                         00007000
      NTGOD3 = 0                                                        00007100
      J = 0                                                             00007200
      DO 25 I=1,NT                                                      00007300
      IF(IT(J+1).LE.0) GOTO 25                                          00007400
C        SMALLEST DISTANCE TO VERTEX                                    00007500
      CALL VTXPNT(J,V(LV+2),V(LV+3),XT,YT,ZT,DXT2,DYT2,DZT2,PHI,DPHI,SS)00007600
      DXT2 = DXT2 + V(LV+5)**2                                          00007700
      DYT2 = DYT2 + V(LV+6)**2                                          00007800
      DZT2 = DZT2 + V(LV+7)**2                                          00007900
      SDX = ABS(XT-V(LV+2)) / SQRT(DXT2)                                00008000
      SDY = ABS(YT-V(LV+3)) / SQRT(DYT2)                                00008100
      SDZ = ABS(ZT-V(LV+4)) / SQRT(DZT2)                                00008200
      T(J+15) = SS                                                      00008300
      T(J+28) = SDX                                                     00008400
      T(J+29) = SDY                                                     00008500
      T(J+30) = SDZ                                                     00008600
      IF(IT(J+1).EQ.1) GOTO 23                                          00008700
      IF(SDX.GT.SIG2 .OR. SDY.GT.SIG2 .OR. SDZ.GT.SIG2) GOTO 23         00008800
C        EXTRAPOLATION LENGTH                                           00008900
      IF(SS.GT.SIMAX) GOTO 23                                           00009000
      SSJC = SS                                                         00009100
      IF(T(J+27).EQ.0.) GOTO 22                                         00009200
      IF(SS.LT.T(J+26)-SIMAX) GOTO 23                                   00009300
      IF(SS.LT.T(J+27)) SSJC=T(J+27)                                    00009400
   22 IF(SSJC.LT.SEMAX) GOTO 23                                         00009500
      IF(ABS(SS/T(J+2)).GT.PHEMAX) GOTO 23                              00009600
      NTGOD = NTGOD + 1                                                 00009700
      JTGOD(NTGOD) = J                                                  00009800
      IF(IT(J+1).EQ.3) NTGOD3=NTGOD3+1                                  00009900
      GOTO 25                                                           00010000
   23 NTBAD = NTBAD + 1                                                 00010100
      JTBAD(NTBAD) = J                                                  00010200
      IF(IT(J+1).EQ.3) NTBAD3=NTBAD3+1                                  00010300
   25 J = J + ITDLEN                                                    00010400
      IF(RESTOR) GOTO 30                                                00010500
      IF(NTGOD3.EQ.20) GOTO 30                                          00010600
      IF(NTBAD3.EQ.0 .AND. NTGOD.EQ.NTGOD3) GOTO 30                     00010700
      IF(.NOT.VREP .AND. NTGOD.LT.3) GOTO 40                            00010800
      IF(NTGOD.LE.2) GOTO 60                                            00010900
C        REPEAT VERTEX FIT                                              00011000
      DO 27 I=1,NTGOD                                                   00011100
      J = JTGOD(I)                                                      00011200
   27 IT(J+1) = 2                                                       00011300
      IF(NTBAD.EQ.0) GOTO 10                                            00011400
      DO 28 I=1,NTBAD                                                   00011500
      J = JTBAD(I)                                                      00011600
   28 IT(J+1) = 1                                                       00011700
      GOTO 10                                                           00011800
C****                                                                   00011900
C****    GOOD VERTEX FOUND                                              00012000
   30 IF(NTBAD.EQ.0) GOTO 37                                            00012100
      IF(IV(LV+8).EQ.1) GOTO 37                                         00012200
C        COLLECT ALL TRACKS FITTING TO VERTEX                           00012300
      NTB = 0                                                           00012400
      DO 33 I=1,NTBAD                                                   00012500
      J = JTBAD(I)                                                      00012600
      IF(T(J+28).GT.SIG3.OR.T(J+29).GT.SIG3.OR.T(J+30).GT.SIG3) GOTO 32 00012700
      IF(T(J+15).GT.SIMAX) GOTO 32                                      00012800
      SSJC = T(J+15)                                                    00012900
      IF(T(J+27).EQ.0.) GOTO 31                                         00013000
      IF(T(J+15).LT.T(J+26)-SIMAX) GOTO 32                              00013100
      IF(T(J+15).LT.T(J+27)) SSJC=T(J+27)                               00013200
   31 IF(SSJC.LT.SEMAX) GOTO 32                                         00013300
      IF(ABS(T(J+15)/T(J+2)).GT.PHEMAX) GOTO 32                         00013400
      NTGOD = NTGOD + 1                                                 00013500
      JTGOD(NTGOD) = J                                                  00013600
      IT(J+1) = 1                                                       00013700
      GOTO 33                                                           00013800
   32 NTB = NTB + 1                                                     00013900
      JTBAD(NTB) = J                                                    00014000
   33 CONTINUE                                                          00014100
      NTBAD = NTB                                                       00014200
   37 IV(LV+10) = NTGOD                                                 00014300
      DO 38 I=1,NTGOD                                                   00014400
      J = JTGOD(I)                                                      00014500
      IT(J+1) = -IT(J+1)                                                00014600
      IT(J+14) = NV                                                     00014700
   38 CONTINUE                                                          00014800
      IF(IPRVTX.NE.0) GOTO 39                                           00014900
      IF(ABS(V(LV+2)-XB).LT.3.*DISTB .AND. ABS(V(LV+3)-YB).LT.3.*DISTB) 00015000
     *   IPRVTX=NV                                                      00015100
   39 IF(NTBAD.EQ.0) GOTO 90                                            00015200
      NTGOD = 0                                                         00015300
      IF(NV.EQ.20) GOTO 90                                              00015400
      NV = NV + 1                                                       00015500
      LV = (NV-1)*IVDLEN                                                00015600
C****                                                                   00015700
C****    VERTEX SEARCH                                                  00015800
   40 IF(NTBAD.EQ.0) GOTO 241                                           00015900
      DO 41 I=1,NTBAD                                                   00016000
      J = JTBAD(I)                                                      00016100
   41 IT(J+1) = 1                                                       00016200
  241 IF(NTGOD.EQ.0) GOTO 43                                            00016300
      DO 141 I=1,NTGOD                                                  00016400
      J = JTGOD(I)                                                      00016500
      NTBAD = NTBAD + 1                                                 00016600
      JTBAD(NTBAD) = J                                                  00016700
  141 IT(J+1) = 1                                                       00016800
   43 NVL = NV                                                          00016900
      NV2 = 0                                                           00017000
      N1 = 1                                                            00017100
      IF(NTBAD.LT.2) GOTO 50                                            00017200
C        TWO TRACK VERTEX                                               00017300
   42 J1 = JTBAD(N1)                                                    00017400
      IT(J1+1) = 2                                                      00017500
      N21 = N1 + 1                                                      00017600
      IF(N21.GT.NTBAD) GOTO 45                                          00017700
      DO 44 N2=N21,NTBAD                                                00017800
      J2 = JTBAD(N2)                                                    00017900
      IT(J2+1) = 2                                                      00018000
      CALL VERTEX                                                       00018100
      IF(IV(LV+1).LE.1) GOTO 44                                         00018200
C        CHECK THIS VERTEX                                              00018300
C        EXTRAPOLATION LENGTH TRACK 1                                   00018400
      CALL VTXPNT(J1,V(LV+2),V(LV+3),XT1,YT1,ZT1,DXT12,DYT12,DZT12,     00018500
     *            PHIT1,DPHIT1,ST1)                                     00018600
      IF(ST1.GT.SIMAX) GOTO 44                                          00018700
      SSJC = ST1                                                        00018800
      IF(T(J1+27).EQ.0.) GOTO 143                                       00018900
      IF(ST1.LT.T(J1+26)-SIMAX) GOTO 44                                 00019000
      IF(ST1.LT.T(J1+27)) SSJC=T(J1+27)                                 00019100
  143 IF(SSJC.LT.SEMAX) GOTO 44                                         00019200
      IF(ABS(ST1/T(J1+2)).GT.PHEMAX) GOTO 44                            00019300
C        EXTRAPOLATION LENGTH TRACK 2                                   00019400
      CALL VTXPNT(J2,V(LV+2),V(LV+3),XT2,YT2,ZT2,DXT22,DYT22,DZT22,     00019500
     *            PHIT2,DPHIT2,ST2)                                     00019600
      IF(ST2.GT.SIMAX) GOTO 44                                          00019700
      SSJC = ST2                                                        00019800
      IF(T(J2+27).EQ.0.) GOTO 243                                       00019900
      IF(ST2.LT.T(J2+26)-SIMAX) GOTO 44                                 00020000
      IF(ST2.LT.T(J2+27)) SSJC=T(J2+27)                                 00020100
  243 IF(SSJC.LT.SEMAX) GOTO 44                                         00020200
      IF(ABS(ST2/T(J2+2)).GT.PHEMAX) GOTO 44                            00020300
C        COMPARE TRACK DIRECTIONS WITH BEAM                             00020400
      DZ = ABS(ZT1-ZT2)                                                 00020500
      COSW12 = 0.                                                       00020600
      IF(IPRVTX.EQ.0) GOTO 147                                          00020700
      LPV = (IPRVTX-1)*IVDLEN                                           00020800
      DVX = V(LV+2) - V(LPV+2)                                          00020900
      DVY = V(LV+3) - V(LPV+3)                                          00021000
      DVZ = V(LV+4) - V(LPV+4)                                          00021100
      DV12 = SQRT(DVX**2+DVY**2+DVZ**2)                                 00021200
      COSW1 = (COS(PHIT1)*T(J1+24)*DVX + SIN(PHIT1)*T(J1+24)*DVY +      00021300
     *         SIN(T(J1+4))*DVZ) / DV12                                 00021400
      IF(COSW1.LT.CSECV) GOTO 44                                        00021500
      COSW2 = (COS(PHIT2)*T(J2+24)*DVX + SIN(PHIT2)*T(J2+24)*DVY +      00021600
     *        SIN(T(J2+4))*DVZ) / DV12                                  00021700
      IF(COSW2.LT.CSECV) GOTO 44                                        00021800
      COSW12 = COSW1 * COSW2                                            00021900
      GOTO 47                                                           00022000
  147 DVX = V(LV+2) - XB                                                00022100
      DVY = V(LV+3) - YB                                                00022200
      DV12 = SQRT(DVX**2+DVY**2)                                        00022300
      IF(DV12.LT.DISTB) GOTO 47                                         00022400
      COSW1 = (COS(PHIT1)*DVX + SIN(PHIT1)*DVY) / DV12                  00022500
      IF(COSW1.LT.CSECV) GOTO 44                                        00022600
      COSW2 = (COS(PHIT2)*DVX + SIN(PHIT2)*DVY) / DV12                  00022700
      IF(COSW2.LT.CSECV) GOTO 44                                        00022800
      COSW12 = COSW1 * COSW2                                            00022900
C        CHECK IF MORE TRACKS FIT                                       00023000
   47 NT2 = 2                                                           00023100
      DO 149 K=1,NTBAD                                                  00023200
      J = JTBAD(K)                                                      00023300
      IF(IT(J+1).EQ.3) GOTO 149                                         00023400
      CALL VTXPNT(J,V(LV+2),V(LV+3),XT,YT,ZT,DXT2,DYT2,DZT2,PHI,DPHI,SS)00023500
      SDX = ABS(XT-V(LV+2)) / SQRT(DXT2)                                00023600
      SDY = ABS(YT-V(LV+3)) / SQRT(DYT2)                                00023700
      SDZ = ABS(ZT-V(LV+4)) / SQRT(DZT2)                                00023800
      IF(SDX.GT.SIG2 .OR. SDY.GT.SIG2 .OR. SDZ.GT.SIG2) GOTO 149        00023900
      IF(SS.GT.SIMAX) GOTO 149                                          00024000
      SSJC = SS                                                         00024100
      IF(T(J+27).EQ.0.) GOTO 148                                        00024200
      IF(SS.LT.T(J+26)-SIMAX) GOTO 149                                  00024300
      IF(SS.LT.T(J+27)) SSJC=T(J+27)                                    00024400
  148 IF(SSJC.LT.SEMAX) GOTO 149                                        00024500
      IF(ABS(SS/T(J+2)).GT.PHEMAX) GOTO 149                             00024600
      NT2 = NT2 + 1                                                     00024700
  149 CONTINUE                                                          00024800
C        TEMPORARY STORE OF ALL TWO TRACK VERTICES                      00024900
      NV2 = NV2 + 1                                                     00025000
      IV2(NV2,1) = NV                                                   00025100
      IV2(NV2,2) = NT2                                                  00025200
      IV2(NV2,3) = J1                                                   00025300
      IV2(NV2,4) = J2                                                   00025400
      V2(NV2,5) = COSW12                                                00025500
      V2(NV2,6) = DZ                                                    00025600
      IV2(NV2,7) = IV(LV+1)                                             00025700
      IF(NV.EQ.20) GOTO 45                                              00025800
      NV = NV + 1                                                       00025900
      LV = (NV-1)*IVDLEN                                                00026000
C                                                                       00026100
   44 IT(J2+1) = 1                                                      00026200
      IT(J1+1) = 1                                                      00026300
      N1 = N1 + 1                                                       00026400
      IF(N1.LE.NTBAD) GOTO 42                                           00026500
C        CHOOSE BEST TWO TRACK VERTEX                                   00026600
   45 IT(J1+1) = 1                                                      00026700
      IT(J2+1) = 1                                                      00026800
      IF(NV2.EQ.0) GOTO 50                                              00026900
      NT2MAX = 0                                                        00027000
      DO 46 I=1,NV2                                                     00027100
      IF(IV2(I,2).LT.NT2MAX) GOTO 46                                    00027200
      IF(IV2(I,2).EQ.NT2MAX) GOTO 144                                   00027300
      NT2MAX = IV2(I,2)                                                 00027400
      LV2 = I                                                           00027500
      GOTO 46                                                           00027600
  144 IF(IV2(I,7).EQ.IV2(LV2,7)) GOTO 145                               00027700
      IF(IV2(I,7).GT.IV2(LV2,7)) LV2=I                                  00027800
      GOTO 46                                                           00027900
  145 IF(IPRVTX.EQ.0) GOTO 146                                          00028000
      IF(V2(I,5).GT.V2(LV2,5)) LV2=I                                    00028100
      GOTO 46                                                           00028200
  146 IF(V2(I,6).LT.V2(LV2,6)) LV2=I                                    00028300
   46 CONTINUE                                                          00028400
C        REPEAT VERTEX FIT                                              00028500
      J1 = IV2(LV2,3)                                                   00028600
      J2 = IV2(LV2,4)                                                   00028700
      NV = NVL                                                          00028800
      LV = (NVL-1)*IVDLEN                                               00028900
      LV2 = (IV2(LV2,1)-1)*IVDLEN                                       00029000
      J1SAVE = J1                                                       00029100
      J2SAVE = J2                                                       00029200
      DO 48 K=1,IVDLEN                                                  00029300
      VSAVE(K) = V(LV2+K)                                               00029400
   48 V(LV+K) = V(LV2+K)                                                00029500
      DO 49 K=1,NTBAD                                                   00029600
      J = JTBAD(K)                                                      00029700
      IT(J+1)=2                                                         00029800
   49 CONTINUE                                                          00029900
      IT(J1+1) = 3                                                      00030000
      IT(J2+1) = 3                                                      00030100
      VREP = .TRUE.                                                     00030200
      RESTOR = .FALSE.                                                  00030300
      GOTO 20                                                           00030400
C        SINGLE TRACK VERTEX                                            00030500
   50 DO 52 N1=1,NTBAD                                                  00030600
      J1 = JTBAD(N1)                                                    00030700
      IF(N1.EQ.1) GOTO 51                                               00030800
      IF(NV.EQ.20) GOTO 90                                              00030900
      NV = NV + 1                                                       00031000
      LV = (NV-1)*IVDLEN                                                00031100
   51 IV(LV+1) = 5                                                      00031200
      V(LV+2) = T(J1+5)                                                 00031300
      V(LV+3) = T(J1+6)                                                 00031400
      V(LV+4) = T(J1+7)                                                 00031500
      V(LV+5) = T(J1+10)                                                00031600
      V(LV+6) = T(J1+11)                                                00031700
      V(LV+7) = T(J1+12)                                                00031800
      IV(LV+8) = 1                                                      00031900
      V(LV+9) = 0.                                                      00032000
      IV(LV+10) = 1                                                     00032100
      IT(J1+1) = -3                                                     00032200
      IT(J1+14) = NV                                                    00032300
   52 CONTINUE                                                          00032400
      GOTO 90                                                           00032500
C        SEARCH NOT CONVERGING                                          00032600
C        EMERGENCY ACTION: RESTORE 2-TRACK VERTEX (OTHERWISE DEAD LOOP) 00032700
   60 J1 = J1SAVE                                                       00032800
      J2 = J2SAVE                                                       00032900
      DO 62 I=1,IVDLEN                                                  00033000
   62 V(LV+I) = VSAVE(I)                                                00033100
      IF(NTBAD.EQ.0) GOTO 66                                            00033200
      DO 63 I=1,NTBAD                                                   00033300
      J = JTBAD(I)                                                      00033400
      IT(J+1)=2                                                         00033500
   63 CONTINUE                                                          00033600
   66 IF(NTGOD.EQ.0) GOTO 69                                            00033700
      DO 67 I=1,NTGOD                                                   00033800
      J = JTGOD(I)                                                      00033900
      IT(J+1)=2                                                         00034000
   67 CONTINUE                                                          00034100
   69 IT(J1+1) = 3                                                      00034200
      IT(J2+1) = 3                                                      00034300
      RESTOR = .TRUE.                                                   00034400
      GOTO 20                                                           00034500
C****                                                                   00034600
C****    CLEAN UP                                                       00034700
   90 IF(NV.EQ.0) GOTO 100                                              00034800
      J = 0                                                             00034900
      DO 91 I=1,NT                                                      00035000
      IF(IT(J+1).LT.0) IT(J+1)=-IT(J+1)                                 00035100
   91 J = J + ITDLEN                                                    00035200
      IF(NV.EQ.1) GOTO 100                                              00035300
      IF(IPRVTX.NE.0) GOTO 93                                           00035400
      IPRVTX = 1                                                        00035500
      DXYP = 1.E20                                                      00035600
      LV = 0                                                            00035700
      DO 92 I=1,NV                                                      00035800
      DXY = V(LV+2)**2+V(LV+3)**2                                       00035900
      IF(DXY.GT.DXYP) GOTO 92                                           00036000
      IPRVTX = I                                                        00036100
      DXYP = DXY                                                        00036200
   92 LV = LV + IVDLEN                                                  00036300
   93 IF(IPRVTX.EQ.1) GOTO 100                                          00036400
C        MOVE PRIMARY VERTEX TO FIRST POSITION                          00036500
      M = IPRVTX - 1                                                    00036600
      LV = M*IVDLEN                                                     00036700
      DO 94 I=1,IVDLEN                                                  00036800
   94 VSAVE(I) = V(LV+I)                                                00036900
      DO 96 I=1,M                                                       00037000
      DO 95 J=1,IVDLEN                                                  00037100
   95 V(LV+J) = V(LV+J-IVDLEN)                                          00037200
   96 LV = LV - IVDLEN                                                  00037300
      DO 97 I=1,IVDLEN                                                  00037400
   97 V(I) = VSAVE(I)                                                   00037500
      J = 0                                                             00037600
      DO 99 I=1,NT                                                      00037700
      IF(IT(J+1).EQ.0) GOTO 99                                          00037800
      IF(IT(J+14).EQ.IPRVTX) GOTO 98                                    00037900
      IF(IT(J+14).LT.IPRVTX) IT(J+14)=IT(J+14)+1                        00038000
      GOTO 99                                                           00038100
   98 IT(J+14) = 1                                                      00038200
   99 J = J + ITDLEN                                                    00038300
C                                                                       00038400
  100 RETURN                                                            00038500
      END                                                               00038600
***HEADER*** MEMBER  VTXSTA         SAVED BY F22KLE  ON 86/12/11  AT 13:00      
C   27/05/86 612111300  MEMBER NAME  VTXSTA   (S)           FORTRAN     00000000
      SUBROUTINE VTXSTA                                                 00000100
C*860527*KLEINWORT***************************************************   00000200
C*                                                                  *   00000300
C*   PRINT STATISTICS FROM  V E R T E X -FIT                        *   00000400
C*  =========================================                       *   00000500
C*                                                                  *   00000600
C*   STRUCTURE OF HVTXST(120) :                                     *   00000700
C*  ----------------------------                                    *   00000800
C*                                                                  *   00000900
C*   HVTXST(  1) : ERROR-CODE FROM LAST CALL TO VERTEX              *   00001000
C*   HVTXST(  2) : NUMBER OF CALLS TO VERTEX                        *   00001100
C*   HVTXST(  3) : NUMBER OF VERTEX-FIT SUCCEDED                    *   00001200
C*   HVTXST(  4) : NUMBER OF BAD VERTICES ( FLAG = 1 )              *   00001300
C*                                                                  *   00001400
C*   ERRORCOUNTS :                                                  *   00001500
C*                                                                  *   00001600
C*   HVTXST(  5) : NV < 1 OR NV > 20                                *   00001700
C*   HVTXST(  6) : NT  <= 0                                         *   00001800
C*   HVTXST(  7) : NTR <= 0                                         *   00001900
C*   HVTXST(  8) : DET = 0.0                                        *   00002000
C*   HVTXST(  9) : NTR < 2 AFTER REJECTING TRACK WITH DS/R > 90 DEG *   00002100
C*   HVTXST( 10) : ERROR OF > 0 VERTEXCOORDINATES = 0.0             *   00002200
C*   HVTXST( 11) : NTR < 2 AFTER REJECTING BAD TRACK                *   00002300
C*   HVTXST( 12) : COLLINEAR 2-PRONG                                *   00002400
C*   HVTXST( 13) : NTR = 1                                          *   00002500
C*                                                                  *   00002600
C*   COUNTS FOR SPECIAL MODES :                                     *   00002700
C*                                                                  *   00002800
C*   HVTXST( 14) : START ITERATION NEAR RUNVERTEX                   *   00002900
C*   HVTXST( 15) : RUNVERTEX CONSTRAIN                              *   00003000
C*   HVTXST( 16) : AXIS CONSTRAIN                                   *   00003100
C*   HVTXST( 17) : INDEPENDENT FITS IN RPHI AND Z                   *   00003200
C*                                                                  *   00003300
C*   FROM LAST CALL TO VERTEX                                       *   00003400
C*                                                                  *   00003500
C*   HVTXST( 18) : PROB * 10000                                         00003600
C*   HVTXST( 19) : NUMBER OF ITERATIONS                             *   00003700
C*   HVTXST( 20) : DSMAX ( IN MIKRON )                              *   00003800
C*                                                                  *   00003900
C*   HVTXST( 21 + I ) : NUMBER OF VERTICES WITH I TRACKS            *   00004000
C*   HVTXST( 41 + I ) : NUMBER OF VERTICES WITH I COMFIT-TRACKS     *   00004100
C*   HVTXST( 61 + I ) : NUMBER OF VERTICES WITH I TRACKS REJECTED   *   00004200
C*   HVTXST( 81 + I ) : NUMBER OF VERTICES WITH I COMFIT-TRACKS REJ.*   00004300
C*   HVTXST(100 + I ) : NUMBER OF GOOD VERTICES WITH I ITERATIONS   *   00004400
C*   HVTXST(120 + I ) : NUMBER OF BAD VERTICES WITH I ITERATIONS    *   00004500
C*                                                                  *   00004600
C********************************************************************   00004700
      IMPLICIT INTEGER*2 (H)                                            00004800
%MACRO MVERTEX2                                                         00004900
C                                                                       00005000
      IF (HVTXST(2).LE.0) RETURN                                        00005100
C                                                                       00005200
      WRITE(6,9000)                                                     00005300
 9000 FORMAT(//' ====== V E R T E X  STATISTICS ====='/)                00005400
      WRITE(6,9010) HVTXST(2),HVTXST(3),HVTXST(4),(HVTXST(K),K=14,17)   00005500
 9010 FORMAT(' CALLS,VERTICES,SPEC. MODES: ',I5,5X,2I5,5X,4I5)          00005600
      WRITE(6,9020) (HVTXST(K),K=5,13)                                  00005700
 9020 FORMAT(' ERROR-COUNTS              : ',9I5)                       00005800
      WRITE(6,9030) (HVTXST(K),K=21,140)                                00005900
 9030 FORMAT(' TRACKS FROM VERTEX  (0..) : ',20I5/                      00006000
     &       ' COMFIT TRACKS FROM VERTEX : ',20I5/                      00006100
     &       ' TRACKS REJECTED     (0..) : ',20I5/                      00006200
     &       ' COMFIT TRACKS REJECTED    : ',20I5/                      00006300
     &       ' ITERATIONS, GOOD V. (1..) : ',20I5/                      00006400
     &       ' ITERATIONS, BAD  V. (1..) : ',20I5/)                     00006500
C                                                                       00006600
      NER = 0                                                           00006700
      DO 100 IERR = 1, 9                                                00006800
         IF (HVTXST(4+IERR).GT.0)                                       00006900
     &      CALL VTXERR(IERR)                                           00007000
         NER = NER + HVTXST(4+IERR)                                     00007100
  100 CONTINUE                                                          00007200
C                                                                       00007300
      IF (NER.GT.0) WRITE(6,9050)                                       00007400
 9050 FORMAT(' ')                                                       00007500
C                                                                       00007600
      RETURN                                                            00007700
      END                                                               00007800
***HEADER*** MEMBER  VTXTST         SAVED BY F22KLE  ON 86/12/23  AT 10:23      
C   21/12/86 612231022  MEMBER NAME  VTXTST   (S)           FORTRAN     00000000
C----------------------------------------------------------             00000100
C     VERSION OF 21.12.86                   R.RAMCKE                    00000200
C                                                                       00000300
C----------------------------------------------------------             00000400
C                                                                       00000500
      IMPLICIT INTEGER*2 (H)                                            00000600
C                                                                       00000700
C                                      COMMON FOR SIMPLX FIT            00000800
      REAL*8 DATA(30,4)                                                 00000900
      REAL*4 SIMP(9),STEP(3),MERR(3),ERR(3),MEAN(3)                     00001000
C                                                                       00001100
      DIMENSION HSTAR(80),IPROB(100),COV(3)                             00001200
      REAL*8 RR,XM,YM,DX,DY                                             00001300
      DATA IPR / 10 /,IPR1 / 10 /, EPS / 0.001 /                        00001400
      DATA IPROB / 100*0 /                                              00001500
      DATA NSCR /70/,HSTAR / 80*'*'/                                    00001600
C                                                                       00001700
      X1 = 0.0                                                          00001800
      X2 = 0.0                                                          00001900
      XI1 = 0.0                                                         00002000
      XI2 = 0.0                                                         00002100
      NVPP1 = 4                                                         00002200
      N = NVPP1 - 1                                                     00002300
      N2 = N**2                                                         00002400
      NP = 30                                                           00002500
C                                                                       00002600
C                                                                       00002700
      XT = 0.0                                                          00002800
      YT = 0.0                                                          00002900
      ENTRI= 0.0                                                        00003000
      DO 1000 IEV = 1,1000                                              00003100
         PHI0 = 1.57 - 3.14*RN(DMY)                                     00003200
         NUSE = 0                                                       00003300
         DO 100 I = 1,NVPP1                                             00003400
            DPHI = PHI0*(.3 - .6*RN(DMY))                               00003500
            PHI = PHI0 + DPHI                                           00003600
            SINPHI = SIN(PHI)                                           00003700
            COSPHI = COS(PHI)                                           00003800
            R =  90000.0*RN(DMY) + 1000.0                               00003900
            DXY =  .100 + .4*RN(DMY)                                    00004000
            CALL NVERT(DXY,0.0,DERR)                                    00004100
            RR = DBLE(R)                                                00004200
            XM = DBLE(XT) - (RR+DBLE(DERR))*DBLE(SINPHI)                00004300
            YM = DBLE(YT) + (RR+DBLE(DERR))*DBLE(COSPHI)                00004400
C                                                                       00004500
            IF(NUSE .GE. 30) GOTO 100                                   00004600
            NUSE = NUSE + 1                                             00004700
            DATA(NUSE,1) = XM                                           00004800
            DATA(NUSE,2) = YM                                           00004900
            DATA(NUSE,3) = DABS(RR)                                     00005000
C                                                                       00005100
C                                                                       00005200
            DATA(NUSE,4) = DBLE(1./DXY**2)                              00005300
            IF(IPR .LE. 0) GOTO 100                                     00005400
              IPR = IPR - 1                                             00005500
              WRITE(6,792) NUSE, (DATA(NUSE,KJ),KJ=1,3),DXY             00005600
 792          FORMAT('  SPUR,DATA: ',I3,' ',4G14.4)                     00005700
C                                                                       00005800
 100     CONTINUE                                                       00005900
C                                                                       00006000
C                                                                       00006100
         SIMP(1) = 0.0                                                  00006200
         SIMP(2) = 0.0                                                  00006300
         STEP(1) = 2.0                                                  00006400
         STEP(2) = 1.0                                                  00006500
         MERR(1) = 5.0E-02                                              00006600
         MERR(2) = 5.0E-02                                              00006700
         MERR(3) = 5.0E-02                                              00006800
C                                                                       00006900
         IERR = 0                                                       00007000
         NFRD = NVPP1 - 2                                               00007100
         CALL VTXFIT(200,NVPP1,N,N2,NP,NUSE,DATA,                       00007200
     *                   SIMP,STEP,MERR,ERR,MEAN,IFAIL)                 00007300
         IF(IFAIL .LT. 0) GOTO 999                                      00007400
CCC                                                                     00007500
            XVTX = MEAN(1)                                              00007600
            YVTX = MEAN(2)                                              00007700
            PR = PROB(MEAN(3),NFRD)                                     00007800
C                                                                       00007900
            ICOV = 1                                                    00008000
            COV(1) = 0.                                                 00008100
            COV(2) = 0.                                                 00008200
            COV(3) = 0.                                                 00008300
C                                                                       00008400
            DO 900 J = 1, NUSE                                          00008500
               XM = DATA(J,1)                                           00008600
               YM = DATA(J,2)                                           00008700
               DX = DBLE(XVTX)-XM                                       00008800
               DY = DBLE(YVTX)-YM                                       00008900
               RR = DSQRT( DX*DX+DY*DY )                                00009000
               DATA(J,1) = XM + DBLE(EPS)*DX/RR                         00009100
               DATA(J,2) = YM + DBLE(EPS)*DY/RR                         00009200
               SIMP(1) = 0.0                                            00009300
               SIMP(2) = 0.0                                            00009400
               STEP(1) = 2.0                                            00009500
               STEP(2) = 1.0                                            00009600
               CALL VTXFIT(200,NVPP1,N,N2,NP,NUSE,DATA,                 00009700
     *                     SIMP,STEP,MERR,ERR,MEAN,JFAIL)               00009800
               IF (JFAIL.LE.0) ICOV = 0                                 00009900
               DATA(J,1) = XM                                           00010000
               DATA(J,2) = YM                                           00010100
C                                                                       00010200
               DXY = 1./SQRT(SNGL(DATA(J,4)))                           00010300
               DXV = DXY*(MEAN(1)-XVTX)/EPS                             00010400
               DYV = DXY*(MEAN(2)-YVTX)/EPS                             00010500
               COV(1) = COV(1) + DXV*DXV                                00010600
               COV(2) = COV(2) + DYV*DYV                                00010700
               COV(3) = COV(3) + DXV*DYV                                00010800
C                                                                       00010900
  900       CONTINUE                                                    00011000
CCC                                                                     00011100
            IF (ICOV.EQ.0) GOTO 999                                     00011200
            IF (COV(1)*COV(2).LE.0.0) GOTO 999                          00011300
            PR = PROB(XVTX**2/COV(1),1)                                 00011400
            X1 = X1 + PR                                                00011500
            X2 = X2 + PR**2                                             00011600
            PR = PROB(YVTX**2/COV(2),1)                                 00011700
            X1 = X1 + PR                                                00011800
            X2 = X2 + PR**2                                             00011900
            IBIN = IFIX(PR*100.0) + 1                                   00012000
            IF(IBIN .GT. 0 .AND. IBIN .LE. 100)                         00012100
     *             IPROB(IBIN) =IPROB(IBIN) + 1                         00012200
            IF(IFAIL .EQ. 200) GOTO 999                                 00012300
            ENTRI = ENTRI + 1.0                                         00012400
            FAIL = FLOAT(IFAIL)                                         00012500
            XI1 = XI1 + FAIL                                            00012600
            XI2 = XI2 + FAIL**2                                         00012700
 999     CONTINUE                                                       00012800
C                                                                       00012900
         IF(IPR1 .LT. 0) GOTO 1000                                      00013000
         IPR1 = IPR1 - 1                                                00013100
         WRITE(6,790) IEV,NUSE,IFAIL,MEAN(1),MEAN(2),ERR(1)             00013200
     *               ,ERR(2),ERR(3),MEAN(3),PR,(COV(K),K=1,3)           00013300
 790     FORMAT(/' EVT: ',I5,'  NUSE,IFAIL: ',2I4,/,                    00013400
     *           ' XV,YV: ',2F9.3,' ERR: ',3F10.4,' CHI2,PR: ',2F10.4/  00013500
     *           ' COV  : ',3G12.4)                                     00013600
C                                                                       00013700
 1000 CONTINUE                                                          00013800
C                                                                       00013900
      CALL CLEAR                                                        00014000
C                                                                       00014100
      MAX = 0.0                                                         00014200
      ENTR = 0.0                                                        00014300
      DO 1010 I = 1,100                                                 00014400
         ENTR = ENTR + FLOAT(IPROB(I))                                  00014500
         IF(IPROB(I) .LT. MAX) GOTO 1010                                00014600
         MAX = IPROB(I)                                                 00014700
 1010 CONTINUE                                                          00014800
C                                                                       00014900
      XMEAN = X1/ENTR                                                   00015000
      XRMS = SQRT((X2 - 2.0*XMEAN*X1 + ENTR*XMEAN**2)/(ENTR-1.))        00015100
      XIM = XI1/ENTRI                                                   00015200
      XIRMS = SQRT((XI2 - 2.0*XIM*XI1 + ENTRI*XIM**2)/(ENTRI-1.))       00015300
C                                                                       00015400
      WRITE(6,755) ENTR,XMEAN,XRMS,ENTRI,XIM,XIRMS                      00015500
755   FORMAT(' ENTRS: ',F7.0,' MEAN,RMS: ',2F10.3,' ITER: ',F8.0,2F8.2) 00015600
C                                                                       00015700
      DSCR = FLOAT(NSCR)/FLOAT(MAX)                                     00015800
      DO 1020 I = 1,100                                                 00015900
         NSTAR = IFIX(DSCR*FLOAT(IPROB(I)))                             00016000
         IF(NSTAR .LE. 0) GOTO 1008                                     00016100
         WRITE(6,94) I,(HSTAR(JJ),JJ=1,NSTAR)                           00016200
 94      FORMAT(' ',I3,' |',80A1)                                       00016300
         GOTO 1020                                                      00016400
 1008    WRITE(6,99) I                                                  00016500
 99      FORMAT(' ',I3,' |-')                                           00016600
 1020 CONTINUE                                                          00016700
C                                                                       00016800
C                                                                       00016900
      STOP                                                              00017000
      END                                                               00017100
***HEADER*** MEMBER  VXDISP         SAVED BY F22KLE  ON 86/12/16  AT 12:09      
C   01/11/84 612161200  MEMBER NAME  VXDISP   (S)           FORTRAN     00000000
C                                                                       00000100
C-----------------------------------------------------------------------00000200
      SUBROUTINE VXDISP(INDEX)                                          00000300
C-----------------------------------------------------------------------00000400
C                                                                       00000500
C    AUTHOR:   J. OLSSON    1/02/80 :  VERTEX DISPLY FROM DITTMANN      00000600
C                                                                       00000700
C       MOD:   J. OLSSON    4/05/83 :                                   00000800
C       MOD:   C. BOWDERY   8/06/84 :  NEW COMMAND NUMBERS              00000900
C       MOD:   J. HAGEMANN 22/10/84 :  FOR COMMAND VC                   00001000
C  LAST MOD:   J. HAGEMANN 20/06/86 :  FOR EXTENDED COMMON / CWORK1 /   00001100
C                                                                       00001200
C     VERTEX DISPLAY FOR JADE, USING VERTEX PROGRAM FROM P.DITTMANN     00001300
C                                                                       00001400
C-----------------------------------------------------------------------00001500
C                                                                       00001600
      IMPLICIT INTEGER*2 (H)                                            00001700
C                                                                       00001800
      LOGICAL FL18,FL22,FL24,DSPD14                                     00001900
C                                                                       00002000
      COMMON / CPROJ  / XMINR,XMAXR,YMINR,YMAXR,IPRJC,FL18,FL22,FL24    00002100
      %MACRO 'F22KLE.VERTEX.S(MVERTEX1)'                                00002200
CCC   COMMON / CWORK1 / NT,T(1500),NV,V(200)                            00002300
CCC                                                                     00002400
CCC   DIMENSION IT(1500),IV(200)                                        00002500
CCC   EQUIVALENCE (V(1),IV(1)),(T(1),IT(1))                             00002600
C                                                                       00002700
      %MACRO 'F11GOD.PATRECSR(CGRAPH)'                                  00002800
      %MACRO 'F11GOD.PATRECSR(CGEO1)'                                   00002900
      %MACRO 'F11GOD.PATRECSR(CDATA)'                                   00003000
      %MACRO 'F22KLE.VERTEX.S(MVERTEX0)'                                00003100
C                                                                       00003200
      COMMON / CJTRIG / PI,TWOPI                                        00003300
      COMMON / CHEADR / HEAD(108)                                       00003400
      COMMON/CWORK2/HWORK(40),JNDEX,NTR,LTR,ITR,IPO,ICNT,NBK,NCLST,NWPCL00003500
     +             ,DUMMM(16),NTRRES,IW61                               00003600
      COMMON / CVX    / NNPATR                                          00003700
C                                                                       00003800
      DATA  ZDEEP / 5800.0 /, DER/ 20.0 /                               00003900
C                                                                       00004000
C------------------  C O D E  ------------------------------------------00004100
C                                                                       00004200
      JNDEX=INDEX                                                       00004300
      IF(JNDEX.GT.7) JNDEX=JNDEX-4                                      00004400
C-----                                                                  00004500
      IF(JNDEX.GT.0.AND.JNDEX.LT.11) GO TO 2801                         00004600
      IF(INDEX.GE.17.AND.INDEX.LE.19) GO TO 2801                        00004700
      IF(INDEX.EQ.20) GO TO 2801                                        00004800
      RETURN                                                            00004900
2801  IF(NNPATR.LE.0) GO TO 2701                                        00005000
      CALL CLOC(IPPATR,'PATR',NNPATR)                                   00005100
      IF(IPPATR.GT.0) GO TO 2702                                        00005200
      WRITE(6,2703) NNPATR                                              00005300
2703  FORMAT(' PATR BANK NR',I3,' (GIVEN BY COMMAND PATR) NOT EXISTING')00005400
2701  IPPATR = IDATA(IBLN('PATR'))                                      00005500
2702  IPHEAD = IDATA(IBLN('HEAD'))                                      00005600
      IF(IPPATR.LE.0.OR.IPHEAD.LE.0) RETURN                             00005700
      NN = ACMD                                                         00005800
      IF( NN .LT. 0  .AND.  LSTCMD .NE. 52 ) RETURN                     00005900
      IF( NN .GT. 4  .AND.  LSTCMD .NE. 52 ) RETURN                     00006000
      IF( NN .EQ. 4  .AND.  LSTCMD .NE. 52 ) GO TO 101                  00006100
C---                                                                    00006200
C---   CALL VERTEX PROGRAM HERE                                         00006300
      CALL VTXPRE(IPHEAD,IPPATR)                                        00006400
      CALL VTXSRC                                                       00006500
      CALL VTXAFT                                                       00006600
C---                                                                    00006700
      IF(NV.GT.0) GO TO 101                                             00006800
      WRITE(6,102)                                                      00006900
102   FORMAT('  NO VERTEX FOUND, ERROR RETURN ')                        00007000
      RETURN                                                            00007100
101   IF( LSTCMD .EQ. 52 ) GO TO 1000                                   00007200
C                                                       ************    00007300
C ENTER HERE FOR COMMAND VX, VERTEX POSITION DISPLAY    ***  VX  ***    00007400
C                                                       ************    00007500
      IF(NN.EQ.3) CALL VTXBNK(IPPATR)                                   00007600
      IF(NN.EQ.3) RETURN                                                00007700
      IF(NN.EQ.4) GO TO 4710                                            00007800
C  SET PRINT POSITION, IF NN.EQ.1                                       00007900
      IF(NN.NE.1.OR.FL18) GO TO 110                                     00008000
      XXX = XMIN                                                        00008100
      YYY = YMIN+.76*(YMAX-YMIN)                                        00008200
      CALL XXXYYY(XXX,YYY,SSS,0)                                        00008300
      YYY = YYY - 9.*SSS                                                00008400
      CALL CORE(HWORK,80)                                               00008500
      WRITE(10,220)                                                     00008600
220   FORMAT(' VERTICES')                                               00008700
      CALL SYSSYM(XXX,YYY,SSS,HWORK,9,0.)                               00008800
110   CONTINUE                                                          00008900
C  ADJUST THE DEVIATION DER                                             00009000
      DERV = DER                                                        00009100
      IF( LASTVW .GE. 17  .AND.  LASTVW .LE. 19 ) DERV = .01*DER        00009200
C---   LOOP OVER VERTICES                                               00009300
      DO 111  INV = 1,NV                                                00009400
      INVP = (INV-1)*IVDLEN                                             00009500
      IF(INV.GT.1.AND.NN.EQ.0) GO TO 112                                00009600
      IVFLAG = IV(INVP+1)                                               00009700
      IF(NN.EQ.2.AND.IVFLAG.NE.4) GO TO 111                             00009800
      XV = V(INVP+2)                                                    00009900
      YV = V(INVP+3)                                                    00010000
      ZV = V(INVP+4)                                                    00010100
      VX = -XV                                                          00010200
      VY = YV                                                           00010300
      IF(INDEX.GT.3.AND.INDEX.LT.8) VY = XV                             00010400
      IF(INDEX.EQ.18) VY = XV                                           00010500
      IF(INDEX.GT.3.AND.INDEX.LT.14) VX = ZV                            00010600
      IF(INDEX.EQ.18.OR.INDEX.EQ.19) VX = ZV                            00010700
      IF(JNDEX.LT.4.OR.INDEX.EQ.17.OR.INDEX.EQ.20) GO TO 113            00010800
      RV = SQRT(XV*XV + YV*YV)                                          00010900
      FIV = 0.                                                          00011000
      IF(RV.GT..001) FIV = ATAN2(YV,XV)                                 00011100
      IF(RV.GT..001.AND.FIV.LT.0.) FIV = FIV + TWOPI                    00011200
      IF((.NOT.DSPDTL(9)).OR.DSPDTL(10)) GO TO 113                      00011300
      IF(JNDEX.EQ.10) GO TO 113                                         00011400
      IF(RV.GT..001) RV=RV*WRAP(FIV)                                    00011500
      VY = RV                                                           00011600
113   IF(JNDEX.NE.10) GO TO 114                                         00011700
CYLINDER VIEW, Z CORRECTION FOR PERSPECTIVE FACTOR                      00011800
      ZETMX = ZLGPL + ZDEEP                                             00011900
      RV = RV*(ZDEEP - ZV)/ZETMX                                        00012000
      VX = -RV*COS(FIV)                                                 00012100
      VY = RV*SIN(FIV)                                                  00012200
114   CONTINUE                                                          00012300
      CALL MOVEA(VX-DERV,VY-DERV)                                       00012400
      CALL DRAWA(VX+DERV,VY+DERV)                                       00012500
      CALL MOVEA(VX+DERV,VY-DERV)                                       00012600
      CALL DRAWA(VX-DERV,VY+DERV)                                       00012700
      IF(INV.GT.1) CALL TRNUMB(INV,0,-VX,VY,VZ)                         00012800
C  TEXT SECTION                                                         00012900
112   IF(NN.NE.1.OR.FL18) GO TO 111                                     00013000
      YYY = YYY - 2.*SSS                                                00013100
      NDF = 2*IV(INVP+8) - 3                                            00013200
      CALL CORE(HWORK,80)                                               00013300
      WRITE(10,219) INV,IV(INVP+1),IV(INVP+10),V(INVP+9),NDF            00013400
219   FORMAT(' ',I2,' FLAG',I2,' NTR ',I2,' CHI/NDF ',F6.2,'/',I2)      00013500
      CALL SYSSYM(XXX,YYY,SSS,HWORK,35,0.)                              00013600
      YYY = YYY - 1.5*SSS                                               00013700
      CALL CORE(HWORK,80)                                               00013800
      WRITE(10,218) V(INVP+2),V(INVP+3),V(INVP+4)                       00013900
218   FORMAT(' XYZ ',3F7.1)                                             00014000
      CALL SYSSYM(XXX,YYY,SSS,HWORK,26,0.)                              00014100
111   CONTINUE                                                          00014200
      RETURN                                                            00014300
4710  CONTINUE                                                          00014400
C                                                                       00014500
C RUN VERTEX DISPLAY                                                    00014600
C                                                                       00014700
      IF(JNDEX.LT.4.OR.JNDEX.EQ.10) GO TO 1001                          00014800
      IF(INDEX.EQ.17) GO TO 1001                                        00014900
      IF(INDEX.EQ.20) GO TO 1001                                        00015000
      CALL TRMOUT(80,' NOT AVAILABLE IN THIS VIEW...^')                 00015100
      RETURN                                                            00015200
1001  NRUN = HEAD(18)                                                   00015300
      CALL VRTPOS(NRUN,VX,VY)                                           00015400
      IF(JNDEX.NE.10) GO TO 1002                                        00015500
CYLINDER VIEW, Z CORRECTION FOR PERSPECTIVE FACTOR                      00015600
      RV = SQRT(VX*VX + VY*VY)                                          00015700
      FIV = 0.                                                          00015800
      IF(RV.GT..001) FIV = ATAN2(VY,VX)                                 00015900
      ZETMX = ZLGPL + ZDEEP                                             00016000
      ZV = 0.                                                           00016100
      RV = RV*(ZDEEP - ZV)/ZETMX                                        00016200
      VX = RV*COS(FIV)                                                  00016300
      VY = RV*SIN(FIV)                                                  00016400
1002  CALL MOVEA(-VX-DERV,VY-DERV)                                      00016500
      CALL DRAWA(-VX+DERV,VY+DERV)                                      00016600
      CALL MOVEA(-VX+DERV,VY-DERV)                                      00016700
      CALL DRAWA(-VX-DERV,VY+DERV)                                      00016800
      RETURN                                                            00016900
1000  CONTINUE                                                          00017000
C                                                       ************    00017100
C ENTER HERE FOR COMMAND VRES, VERTEX RESULTS DISPLAY   *** VRES ***    00017200
C                                                       ************    00017300
      IPO = IPPATR                                                      00017400
      LO = IDATA(IPO+1)                                                 00017500
      NBK = IDATA(IPO-2)                                                00017600
      NTR = IDATA(IPO+2)                                                00017700
      IF(NTR.LE.0) GO TO 1161                                           00017800
      LTR = IDATA(IPO+3)                                                00017900
      IPO = IPO + LO - LTR                                              00018000
      IQO = IPO                                                         00018100
      DSPD14 = DSPDTL(14)                                               00018200
      DSPDTL(14) = .TRUE.                                               00018300
      IW61 = 0                                                          00018400
      IF(ACMD.EQ.0) IW61 = 1                                            00018500
      IF(DSPDTL(29)) GO TO 2100                                         00018600
C---------------------------------- LOOP OVER TRACKS -----              00018700
      DO 2102  J = 1,NTR                                                00018800
      IPNOT = (J-1)*ITDLEN                                              00018900
      IQO = IQO+LTR                                                     00019000
      ITR = IDATA(IQO + 1)                                              00019100
      IF(NN.GT.0.AND.NN.NE.ITR) GO TO 2102                              00019200
      IF(NN.LT.0.AND.IABS(NN).NE.IT(IPNOT+14)) GO TO 2102               00019300
      IF(IT(IPNOT+1).LE.0) GO TO 2102                                   00019400
      NRV = IT(IPNOT+14)                                                00019500
      IPNRV = (NRV-1)*IVDLEN                                            00019600
      VXE = V(IPNRV+2)                                                  00019700
      VYE = V(IPNRV+3)                                                  00019800
      VZE = V(IPNRV+4)                                                  00019900
      IF(JNDEX.GT.3.AND.JNDEX.LT.10) GO TO 2002                         00020000
      IF(INDEX.EQ.18.OR.INDEX.EQ.19) GO TO 2002                         00020100
C--                         RFI-VIEW OF INNER DETECTOR                  00020200
C---                        **************************                  00020300
C** DISPLAY TRACKS                                                      00020400
      ITYPLI = IDATA(IQO+29)                                            00020500
C                     PARABOLA FITS                                     00020600
      IF(IDATA(IQO+18).NE.1.AND.ITYPLI.EQ.1)                            00020700
     $ CALL PARDIS(25,ADATA(IQO+19),ADATA(IQO+20),ADATA(IQO+21),        00020800
     $ ADATA(IQO+22),ADATA(IQO+5),ADATA(IQO+6),ADATA(IQO+12),           00020900
     $ ADATA(IQO+13),ADATA(IQO+31),ADATA(IQO+30),VXE,VYE)               00021000
C                     CIRCLE FITS                                       00021100
      IF(IDATA(IQO+18).EQ.1.AND.(ITYPLI.EQ.1.OR.ITYPLI.EQ.2))           00021200
     $ CALL CIRDIS(25,SIGN(ADATA(IQO+19),ADATA(IQO+25)),                00021300
     $ ADATA(IQO+20),ADATA(IQO+21),                                     00021400
     $ ADATA(IQO+5),ADATA(IQO+6),ADATA(IQO+12),ADATA(IQO+13),           00021500
     $ ADATA(IQO+31),ADATA(IQO+30),ITYPLI,VXE,VYE)                      00021600
C** WRITE TRACK NUMBER                                                  00021700
C     CALL TRNUMB(ITR,0,ADATA(IQO+12),ADATA(IQO+13),ADATA(IQO+14))      00021800
      IF(JNDEX.NE.3) GO TO 2172                                         00021900
2003  CONTINUE                                                          00022000
C--                         RFI-VIEW OF MU-CHAMBERS                     00022100
C--                         ***********************                     00022200
      REMEMB = DSPDTL(8)                                                00022300
      REMEMC = DSPDTL(9)                                                00022400
      DSPDTL(8) = .FALSE.                                               00022500
      DSPDTL(9) = .FALSE.                                               00022600
C MUON RESULTS TO BE CALLED HERE                                        00022700
      DSPDTL(8) = REMEMB                                                00022800
      DSPDTL(9) = REMEMC                                                00022900
      GO TO 2172                                                        00023000
2002  IF(JNDEX.GT.7.AND.INDEX.NE.18.AND.INDEX.NE.19) GO TO 2102         00023100
C--                         XZ OR YZ-VIEW OF INNER DETECTOR             00023200
C--                         *******************************             00023300
C** DISPLAY TRACKS                                                      00023400
C                     LINE FITS                                         00023500
      ITYPLI = IDATA(IQO+29)                                            00023600
      IF(ITYPLI.EQ.1) CALL LINDIS(IQO,INDEX,VXE,VYE,VZE)                00023700
      IF(JNDEX.GT.5.AND.INDEX.NE.18.AND.INDEX.NE.19) GO TO 2004         00023800
      GO TO 2172                                                        00023900
2004  CONTINUE                                                          00024000
C                           YZ-VIEW OF MU-CHAMBERS                      00024100
C                           **********************                      00024200
C MUON RESULTS TO BE CALLED HERE                                        00024300
2172  IF(ACMD.EQ.0.) GO TO 2102                                         00024400
      ACMDR = ACMD                                                      00024500
      ACMD = FLOAT(ITR)                                                 00024600
      NTRRES = ITR                                                      00024700
      IF(.NOT.FL18) CALL BANKLS(INDEX,IPPATR)                           00024800
      ACMD = ACMDR                                                      00024900
2102  CONTINUE                                                          00025000
2100  CONTINUE                                                          00025100
      NTRRES = 0                                                        00025200
      IF(.NOT.FL18.AND.ACMD.EQ.0.) CALL BANKLS(INDEX,IPPATR)            00025300
1161  VXG = 0.                                                          00025400
      VYG = 0.                                                          00025500
      VZG = 0.                                                          00025600
      IF(NTR.LE.0.OR.IV(1).EQ.4) GO TO 1920                             00025700
C IF TRACKS EXIST, USE MAIN VERTEX FOR PHOTON ORIGEN                    00025800
      VXG = V(2)                                                        00025900
      VYG = V(3)                                                        00026000
      VZG = V(4)                                                        00026100
1920  IF((DSPDTL(28).OR.DSPDTL(29)).AND.(NN.EQ.0.OR.NN.EQ.-1))          00026200
     $ CALL GAMDIS(INDEX,VXG,VYG,VZG)                                   00026300
      DSPDTL(14) = DSPD14                                               00026400
      RETURN                                                            00026500
      END                                                               00026600
***HEADER*** MEMBER  XFWID          SAVED BY F22KLE  ON 86/07/23  AT 16:38      
C   28/11/85 607231637  MEMBER NAME  XFWID    (S)           FORTRAN     00000000
C                                                                       00000100
C-----------------------------------------------------------------------00000200
      FUNCTION XFWID(IPHEAD)                                            00000300
C-----------------------------------------------------------------------00000400
C                                                                       00000500
C                                                                       00000600
C     RETURNS THE NUMBER OF RADIATION LENGTHS FROM THE INSIDE OF THE    00000700
C     BEAM PIPE TO THE FIRST GAS MOLECULE IN THE JET CHAMBER TANK.      00000800
C     BASED ON DATE IN HEAD BANK.                                       00000900
C     MC-DATA: NEW GEOMETRY IS FORCED IF FLAG LVTXC IS TRUE             00001000
C     ARGUMENT DUMMY IS IGNORED.                                        00001100
C                                                                       00001200
C   RADIATION LENGTH UPDATE, 9.6.1986    J.O.                           00001300
C   RADIATION LENGTH UPDATE, 11.6.1986    J.O.                          00001400
C-----------------------------------------------------------------------00001500
C                                                                       00001600
      IMPLICIT INTEGER*2 (H)                                            00001700
C                                                                       00001800
      LOGICAL NEWDET,LVTXC,LNHARD                                       00001900
C                                                                       00002000
      %MACRO 'F11GOD.PATRECSR(CDATA)'                                   00002100
      %MACRO 'F11GOD.PATRECSR(CADMIN)'                                  00002200
C                                                                       00002300
      COMMON / CVCEX  / LVTXC                                           00002400
C                                                                       00002500
C------------------  C O D E  ------------------------------------------00002600
C                                                                       00002700
      IH2    = 2*IPHEAD                                                 00002800
C                                                                       00002900
      IMONTH = HDATA(IH2+7)                                             00003000
      IYEAR  = HDATA(IH2+8)                                             00003100
C                                                                       00003200
C                            OLD GEOMETRY (PRIOR TO MAY 1984)           00003300
C                                                                       00003400
C                                                                       00003500
C   FOR VALUE OF RADIATION LENGTH, SEE JCN 87                           00003600
C                                                                       00003700
      XFWID = 0.1604                                                    00003800
C                            NEW DETECTOR HARDWARE IN MONTE-CARLO DATA? 00003900
C                            THEN LVTXC IS TRUE (FLAG IS CHECKED AND    00004000
C                                                SET IN RDMTCO)         00004100
C                                                                       00004200
      LNHARD = (IMONTH .GE. 5  .AND.  IYEAR .EQ. 1984)                  00004300
     +                          .OR.  IYEAR .GE. 1985                   00004400
      NEWDET = LVTXC .OR. (IEVTP.EQ.0 .AND. LNHARD)                     00004500
C                                                                       00004600
      IF( .NOT. NEWDET ) RETURN                                         00004700
C                                                                       00004800
C                            NEW GEOMETRY                               00004900
C                                                                       00005000
      XFWID = 0.1443                                                    00005100
C                                                                       00005200
      IF ((IEVTP.NE.0).AND.(IYEAR.LE.1985)) XFWID = 0.1334              00005300
C                                                                       00005400
      RETURN                                                            00005500
      END                                                               00005600
***HEADER*** MEMBER  XFWVXC         SAVED BY F22KLE  ON 86/07/23  AT 16:41      
C   28/11/85 607231641  MEMBER NAME  XFWVXC   (S)           FORTRAN     00000000
C                                                                       00000100
C-----------------------------------------------------------------------00000200
      FUNCTION XFWVXC(IPHEAD)                                           00000300
C-----------------------------------------------------------------------00000400
C                                                                       00000500
C                                                                       00000600
C     RETURNS THE NUMBER OF RADIATION LENGTHS FROM THE INSIDE OF THE    00000700
C     BEAM PIPE TO THE FIRST GAS MOLECULE IN THE VERTEX CHAMBER.        00000800
C     BASED ON DATE IN HEAD BANK.                                       00000900
C     MC-DATA: NEW GEOMETRY IS FORCED IF FLAG LVTXC IS TRUE             00001000
C     ARGUMENT DUMMY IS IGNORED.                                        00001100
C                                                                       00001200
C   RADIATION LENGTH UPDATE, 9.6.1986    J.O.                           00001300
C   RADIATION LENGTH UPDATE, 11.6.1986    J.O.                          00001400
C                                                                       00001500
C       X0(BEAMPIPE)                0.03371                             00001600
C       X0(1.KAPTON)                0.00011                             00001700
C       X0(2.KAPTON+CU)             0.00148                             00001800
C       X0(3.KAPTON+CU)             0.00262                             00001900
C       X0(COOLING PIPES)           0.00107                             00002000
C                                  =========                            00002100
C                                   0.03899                             00002200
C                                                                       00002300
C-----------------------------------------------------------------------00002400
C                                                                       00002500
      IMPLICIT INTEGER*2 (H)                                            00002600
C                                                                       00002700
      LOGICAL NEWDET,LVTXC,LNHARD                                       00002800
C                                                                       00002900
      %MACRO 'F11GOD.PATRECSR(CDATA)'                                   00003000
      %MACRO 'F11GOD.PATRECSR(CADMIN)'                                  00003100
C                                                                       00003200
      COMMON / CVCEX  / LVTXC                                           00003300
C                                                                       00003400
C------------------  C O D E  ------------------------------------------00003500
C                                                                       00003600
      IH2    = 2*IPHEAD                                                 00003700
C                                                                       00003800
      IMONTH = HDATA(IH2+7)                                             00003900
      IYEAR  = HDATA(IH2+8)                                             00004000
C                                                                       00004100
C                            OLD GEOMETRY (PRIOR TO MAY 1984)           00004200
C                                                                       00004300
C                                                                       00004400
C   FOR VALUE OF RADIATION LENGTH, SEE JCN 87                           00004500
C                                                                       00004600
      XFWVXC = 0.00000                                                  00004700
C                            NEW DETECTOR HARDWARE IN MONTE-CARLO DATA? 00004800
C                            THEN LVTXC IS TRUE (FLAG IS CHECKED AND    00004900
C                                                SET IN RDMTCO)         00005000
C                                                                       00005100
      LNHARD = (IMONTH .GE. 5  .AND.  IYEAR .EQ. 1984)                  00005200
     +                          .OR.  IYEAR .GE. 1985                   00005300
      NEWDET = LVTXC .OR. (IEVTP.EQ.0 .AND. LNHARD)                     00005400
C                                                                       00005500
      IF( .NOT. NEWDET ) RETURN                                         00005600
C                                                                       00005700
C                            NEW GEOMETRY                               00005800
C                                                                       00005900
      XFWVXC = 0.03899                                                  00006000
C                                                                       00006100
      IF ((IEVTP.NE.0).AND.(IYEAR.LE.1985)) XFWVXC = 0.03371            00006200
C                                                                       00006300
      RETURN                                                            00006400
      END                                                               00006500
***HEADER*** MEMBER  ZEETEST        SAVED BY F22KLE  ON 86/06/24  AT 10:26      
C   09/03/84 606241026  MEMBER NAME  EETEST   (S)           FORTRAN     00000000
C                                                                       00000100
C-----------------------------------------------------------------------00000200
      SUBROUTINE EETEST(IPNR,IT1,IT2,EPHOT,XCONV,YCONV,IERR)            00000300
C-----------------------------------------------------------------------00000400
C                                                                       00000500
C   AUTHOR:  J. HAGEMANN   20/06/86 : PROGRAM TESTS IF GIVEN TRACKS     00000600
C                                     ORIGINATE FROM A CONVERSION (MC)  00000700
C                                                                       00000800
C   MODIFIED C. KLEINWORT  22/06/86 : FOR USE IN BATCH                  00000900
C                                                                       00001000
C-----------------------------------------------------------------------00001100
C                                                                       00001200
      IMPLICIT INTEGER*2 (H)                                            00001300
C                                                                       00001400
      %MACRO 'F11GOD.PATRECSR(CDATA)'                                   00001500
C                                                                       00001600
      DIMENSION IPART(3), IVECT(3), FRACT(3)                            00001700
C                                                                       00001800
C------------------  C O D E  ------------------------------------------00001900
C                                                                       00002000
      RCONV = -1.0                                                      00002100
      IERR = -1                                                         00002200
      CALL CLOC( IPVCT0, 'VECT', 0 )                                    00002300
      IF( IPVCT0 .LE. 0 ) RETURN                                        00002400
C                                                                       00002500
      IERR = -2                                                         00002600
      CALL CLOC( IPVCT1, 'VECT', 1 )                                    00002700
      IF( IPVCT1 .LE. 0 ) RETURN                                        00002800
C                                                                       00002900
      IERR = -3                                                         00003000
      CALL CLOC( IPPATR, 'PATR', IPNR )                                 00003100
      IF( IPPATR .LE. 0 ) RETURN                                        00003200
C                                                                       00003300
      IERR = -11                                                        00003400
      CALL MCTRCB( IT1, NPART, IPART, IVECT, FRACT )                    00003500
      IF( NPART .NE. 1 ) RETURN                                         00003600
C                                                                       00003700
      IERR = -12                                                        00003800
      IPAR1  = IPART(1)                                                 00003900
      IVBK1  = IVECT(1)                                                 00004000
      IF( IVBK1 .NE. 1 ) RETURN                                         00004100
C                                                                       00004200
      IERR = -21                                                        00004300
      CALL MCTRCB( IT2, NPART, IPART, IVECT, FRACT )                    00004400
      IF( NPART .NE. 1 ) RETURN                                         00004500
C                                                                       00004600
      IERR = -22                                                        00004700
      IPAR2  = IPART(1)                                                 00004800
      IVBK2  = IVECT(1)                                                 00004900
      IF( IVBK2 .NE. 1 ) RETURN                                         00005000
C                                                                       00005100
      IPNT1 = IPVCT1 + IDATA(IPVCT1+1) + (IPAR1-1)*IDATA(IPVCT1+2)      00005200
      IPNT2 = IPVCT1 + IDATA(IPVCT1+1) + (IPAR2-1)*IDATA(IPVCT1+2)      00005300
      ITYP1 = IABS(IDATA(IPNT1+7))                                      00005400
      ITYP2 = IABS(IDATA(IPNT2+7))                                      00005500
      IMOB1 = HDATA(IPNT1*2+21)                                         00005600
      IMOB2 = HDATA(IPNT2*2+21)                                         00005700
      IMOP1 = HDATA(IPNT1*2+22)                                         00005800
      IMOP2 = HDATA(IPNT2*2+22)                                         00005900
C                                                                       00006000
      IF( IMOB1 .EQ. 1 ) IPMP1 = IPVCT1 + IDATA(IPVCT1+1) + (IMOP1 - 1)*00006100
     &                           IDATA(IPVCT1+2)                        00006200
      IF( IMOB1 .EQ. 0 ) IPMP1 = IPVCT0 + IDATA(IPVCT0+1) + (IMOP1 - 1)*00006300
     &                           IDATA(IPVCT0+2)                        00006400
      IF( IMOB2 .EQ. 1 ) IPMP2 = IPVCT1 + IDATA(IPVCT1+1) + (IMOP2 - 1)*00006500
     &                           IDATA(IPVCT1+2)                        00006600
      IF( IMOB2 .EQ. 0 ) IPMP2 = IPVCT0 + IDATA(IPVCT0+1) + (IMOP2 - 1)*00006700
     &                           IDATA(IPVCT0+2)                        00006800
      IMTP1 = IDATA(IPMP1+7)                                            00006900
      IMTP2 = IDATA(IPMP2+7)                                            00007000
C                                                                       00007100
      IERR = 0                                                          00007200
      IF( ITYP1.EQ.ITYP2 .AND. IMOB1.EQ.IMOB2 .AND. IMOP1.EQ.IMOP2 .AND.00007300
     &    IMTP1.EQ.IMTP2 .AND. IABS(IMTP1).EQ.1 ) GO TO 200             00007400
         RETURN                                                         00007500
  200 CONTINUE                                                          00007600
      IERR = 1                                                          00007700
      XCONV = ADATA(IPNT1+8)                                            00007800
      YCONV = ADATA(IPNT1+9)                                            00007900
      EPHOT = ADATA(IPMP2+4)                                            00008000
C                                                                       00008100
      RETURN                                                            00008200
      END                                                               00008300
